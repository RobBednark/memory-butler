
=== [1] of [1277] ============================= id=[1280] ==
Q:  - [http://blog.mattcrampton.com/post/64144666914/managing-wifi-connections-using-the-mac-osx][1]
- [http://www.dgkapps.com/blog/osx-tips/osx-tips-turn-off-wifi-from-the-command-line/][2]

Commands:

    networksetup -setairportpower en1 off  (turn off wifi)
    networksetup -setairportpower en1 on  (turn on wifi)
    networksetup -listallhardwareports  (shows bluetooth, wifi, thunderbolt devices, e.g., en0, en1, en2, ...)

    /System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport scan  (scan and view all wifi networks)


    # get current wifi device
    CURRENT_DEVICE=$(networksetup -listallhardwareports | awk '$3=="Wi-Fi" {getline; print $2}')
    echo "Current Wi-Fi Device = '$CURRENT_DEVICE'"

    networksetup -setairportpower $CURRENT_DEVICE off
    networksetup -setairportpower $CURRENT_DEVICE on


  [1]: http://blog.mattcrampton.com/post/64144666914/managing-wifi-connections-using-the-mac-osx
  [2]: http://www.dgkapps.com/blog/osx-tips/osx-tips-turn-off-wifi-from-the-command-line/
questiontag_set : ['osx (OSX) (Mac)']
datetime_added  =[2015-09-23 15:44:52.750411+00:00]
datetime_updated=[2015-09-23 15:44:52.750443+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [2] of [1277] ============================= id=[1279] ==
Q:  - [https://en.wikipedia.org/wiki/Dollar_cost_averaging][1]
- [https://en.wikipedia.org/wiki/Value_averaging][2]


  [1]: https://en.wikipedia.org/wiki/Dollar_cost_averaging
  [2]: https://en.wikipedia.org/wiki/Value_averaging
questiontag_set : ['investing']
datetime_added  =[2015-09-18 17:53:18.752375+00:00]
datetime_updated=[2015-09-18 17:56:31.060175+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [3] of [1277] ============================= id=[1278] ==
Q:  [https://www.quora.com/Which-is-the-best-JavaScript-framework-to-choose-in-2015][1]


  [1]: https://www.quora.com/Which-is-the-best-JavaScript-framework-to-choose-in-2015
questiontag_set : ['front-end-frameworks', 'javascript']
datetime_added  =[2015-09-17 22:25:35.698052+00:00]
datetime_updated=[2015-09-17 22:25:35.698093+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [4] of [1277] ============================= id=[1277] ==
Q:  [https://en.wikipedia.org/wiki/React_(JavaScript_library)][1]


  [1]: https://en.wikipedia.org/wiki/React_%28JavaScript_library%29
questiontag_set : ['front-end-frameworks']
datetime_added  =[2015-09-09 21:29:24.245254+00:00]
datetime_updated=[2015-09-09 21:29:24.245285+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [5] of [1277] ============================= id=[1276] ==
Q:  http://libscore.com/ -- statistics on JavaScript library usage
questiontag_set : ['javascript']
datetime_added  =[2015-09-09 21:27:31.391809+00:00]
datetime_updated=[2015-09-09 21:27:31.391862+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [6] of [1277] ============================= id=[1275] ==
Q:  [http://www.quora.com/Is-React-killing-Angular][1]


  [1]: http://www.quora.com/Is-React-killing-Angular
questiontag_set : ['front-end-frameworks', 'javascript']
datetime_added  =[2015-09-09 21:21:08.190758+00:00]
datetime_updated=[2015-09-09 21:21:08.190791+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [7] of [1277] ============================= id=[1274] ==
Q:  >Lucene itself is just an indexing and search library and does not contain crawling and HTML parsing functionality. However, several projects extend Lucene's capability:
...
Apache Solr — an enterprise search server[citation needed]
Elasticsearch — an enterprise search server[citation needed]
...

[https://en.wikipedia.org/wiki/Lucene][1]


  [1]: https://en.wikipedia.org/wiki/Lucene
questiontag_set : ['software_technologies']
datetime_added  =[2015-09-09 16:05:56.432891+00:00]
datetime_updated=[2015-09-09 16:05:56.432922+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [8] of [1277] ============================= id=[1273] ==
Q:  Python and method binding:

[https://julien.danjou.info/blog/2013/guide-python-static-class-abstract-methods][1]


  [1]: https://julien.danjou.info/blog/2013/guide-python-static-class-abstract-methods
questiontag_set : ['python']
datetime_added  =[2015-09-08 15:57:34.552253+00:00]
datetime_updated=[2015-09-08 15:57:34.552306+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [9] of [1277] ============================= id=[1272] ==
Q:  Python's late binding closures:

    def create_multipliers():
        return [lambda x : i * x for i in range(5)]

    for multiplier in create_multipliers():
        print multiplier(2)

[http://docs.python-guide.org/en/latest/writing/gotchas/][1]


  [1]: http://docs.python-guide.org/en/latest/writing/gotchas/
questiontag_set : ['python']
datetime_added  =[2015-09-08 15:52:50.196218+00:00]
datetime_updated=[2015-09-08 15:52:50.196260+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [10] of [1277] ============================= id=[1271] ==
Q:  Python descriptors

- [https://docs.python.org/2/reference/datamodel.html#implementing-descriptors][1]
- [https://docs.python.org/2/howto/descriptor.html][2]
- [http://nedbatchelder.com/blog/201306/explaining_descriptors.html][3]
- [http://stackoverflow.com/questions/3798835/understanding-get-and-set-and-python-descriptors][4]


  [1]: https://docs.python.org/2/reference/datamodel.html#implementing-descriptors
  [2]: https://docs.python.org/2/howto/descriptor.html
  [3]: http://nedbatchelder.com/blog/201306/explaining_descriptors.html
  [4]: http://stackoverflow.com/questions/3798835/understanding-get-and-set-and-python-descriptors
questiontag_set : ['python']
datetime_added  =[2015-09-08 15:49:49.405020+00:00]
datetime_updated=[2015-09-08 15:49:49.405052+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [11] of [1277] ============================= id=[1270] ==
Q:  What are the 2 things that the `functools.wraps` decorator helps with?
questiontag_set : ['python']
datetime_added  =[2015-09-08 04:48:18.332137+00:00]
datetime_updated=[2015-09-08 04:48:18.332170+00:00]
---------------------------------------------- id=[649] --
A:
Without the use of this decorator factory:

1. the name of the wrapped function (function.\__name__) is the function that wrapper function instead of the name of the wrapped function
2. the docstring (function.\__doc__) of the wrapped function is the docstring of the wrapper instead of the docstring of the wrapped function



=== [12] of [1277] ============================= id=[1269] ==
Q:  hashable

>An object is hashable if it has a hash value which never changes during its lifetime (it needs a __hash__() method), and can be compared to other objects (it needs an __eq__() or __cmp__() method). Hashable objects which compare equal must have the same hash value.

>Hashability makes an object usable as a dictionary key and a set member, because these data structures use the hash value internally.

>All of Python’s immutable built-in objects are hashable, while no mutable containers (such as lists or dictionaries) are. Objects which are instances of user-defined classes are hashable by default; they all compare unequal (except with themselves), and their hash value is their id().

[https://docs.python.org/2/glossary.html][1]


  [1]: https://docs.python.org/2/glossary.html
questiontag_set : ['python']
datetime_added  =[2015-09-08 04:34:28.496199+00:00]
datetime_updated=[2015-09-08 04:34:28.496232+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [13] of [1277] ============================= id=[1268] ==
Q:  
- [https://engineering.betterworks.com/2015/09/04/ditching-django-rest-framework-serializers-for-serpy/#.Veryv3JIq5k.twitter][1] - shows how object serialization in Django REST Framework is very slow, and how `serpy` is much faster
- [https://github.com/clarkduvall/serpy][2]
- [http://serpy.readthedocs.org/en/latest/performance.html][3]


  [1]: https://engineering.betterworks.com/2015/09/04/ditching-django-rest-framework-serializers-for-serpy/#.Veryv3JIq5k.twitter
  [2]: https://github.com/clarkduvall/serpy
  [3]: http://serpy.readthedocs.org/en/latest/performance.html
questiontag_set : ['django', 'python']
datetime_added  =[2015-09-07 20:08:23.403657+00:00]
datetime_updated=[2015-09-07 20:08:23.403688+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [14] of [1277] ============================= id=[1267] ==
Q:  - [https://en.wikipedia.org/wiki/Unique_user][1]
- [https://en.wikipedia.org/wiki/Unique_visitor][2]
- [https://en.wikipedia.org/wiki/Session_(web_analytics)][3]


  [1]: https://en.wikipedia.org/wiki/Unique_user
  [2]: https://en.wikipedia.org/wiki/Unique_visitor
  [3]: https://en.wikipedia.org/wiki/Session_%28web_analytics%29
questiontag_set : ['web development']
datetime_added  =[2015-09-02 20:13:08.267799+00:00]
datetime_updated=[2015-09-02 20:16:50.899940+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [15] of [1277] ============================= id=[1266] ==
Q:  [https://en.wikipedia.org/wiki/Microservices][1]


  [1]: https://en.wikipedia.org/wiki/Microservices
questiontag_set : ['software architecture']
datetime_added  =[2015-09-01 22:49:44.057193+00:00]
datetime_updated=[2015-09-01 22:49:44.057224+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [16] of [1277] ============================= id=[1265] ==
Q:  [https://en.wikipedia.org/wiki/Latency_(engineering)][1]


  [1]: https://en.wikipedia.org/wiki/Latency_%28engineering%29
questiontag_set : ['computer science']
datetime_added  =[2015-09-01 22:33:01.244869+00:00]
datetime_updated=[2015-09-01 22:33:01.244902+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [17] of [1277] ============================= id=[1264] ==
Q:  - [https://en.wikipedia.org/wiki/Column-oriented_DBMS][1]
- [https://en.wikipedia.org/wiki/List_of_column-oriented_DBMSes][2]


  [1]: https://en.wikipedia.org/wiki/Column-oriented_DBMS
  [2]: https://en.wikipedia.org/wiki/List_of_column-oriented_DBMSes
questiontag_set : ['databases']
datetime_added  =[2015-09-01 22:10:59.514094+00:00]
datetime_updated=[2015-09-01 22:12:33.588686+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [18] of [1277] ============================= id=[1263] ==
Q:  Why does Trapit use Cassandra?
questiontag_set : ['trapit', 'cassandra']
datetime_added  =[2015-09-01 22:09:28.881846+00:00]
datetime_updated=[2015-09-01 22:09:28.881876+00:00]
---------------------------------------------- id=[648] --
A:
- it is performant for wide-row uses cases (queues) (select docs with timestamps)
- free replication


=== [19] of [1277] ============================= id=[1262] ==
Q:  - [https://en.wikipedia.org/wiki/Same-origin_policy][1]
- [https://en.wikipedia.org/wiki/Cross-origin_resource_sharing][2]
- [https://en.wikipedia.org/wiki/JSONP][3]


  [1]: https://en.wikipedia.org/wiki/Same-origin_policy
  [2]: https://en.wikipedia.org/wiki/Cross-origin_resource_sharing
  [3]: https://en.wikipedia.org/wiki/JSONP
questiontag_set : ['javascript', 'web development']
datetime_added  =[2015-09-01 21:58:31.840128+00:00]
datetime_updated=[2015-09-01 21:58:31.840168+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [20] of [1277] ============================= id=[1261] ==
Q:  What is the contenttypes framework in Django?
questiontag_set : ['django']
datetime_added  =[2015-08-31 21:39:55.223287+00:00]
datetime_updated=[2015-08-31 21:39:55.223317+00:00]
---------------------------------------------- id=[647] --
A:
> Django includes a contenttypes application that can track all of the models installed in your Django-powered project, providing a high-level, generic interface for working with your models.

[https://docs.djangoproject.com/en/1.8/ref/contrib/contenttypes/][1]


  [1]: https://docs.djangoproject.com/en/1.8/ref/contrib/contenttypes/

=== [21] of [1277] ============================= id=[1260] ==
Q:  [https://en.wikipedia.org/wiki/Media_queries][1]


  [1]: https://en.wikipedia.org/wiki/Media_queries
questiontag_set : ['web development', 'css']
datetime_added  =[2015-08-31 21:06:19.111841+00:00]
datetime_updated=[2015-08-31 21:06:19.111872+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [22] of [1277] ============================= id=[1259] ==
Q:  - [https://en.wikipedia.org/wiki/Responsive_web_design][1]
- [https://en.wikipedia.org/wiki/Mobile_device_detection][2]
- [https://en.wikipedia.org/wiki/Unobtrusive_JavaScript][3]
- [https://en.wikipedia.org/wiki/Progressive_enhancement][4]
- [https://en.wikipedia.org/wiki/User_agent#User_agent_identification][5]


  [1]: https://en.wikipedia.org/wiki/Responsive_web_design
  [2]: https://en.wikipedia.org/wiki/Mobile_device_detection
  [3]: https://en.wikipedia.org/wiki/Unobtrusive_JavaScript
  [4]: https://en.wikipedia.org/wiki/Progressive_enhancement
  [5]: https://en.wikipedia.org/wiki/User_agent#User_agent_identification
questiontag_set : ['html', 'css', 'web development']
datetime_added  =[2015-08-31 21:05:04.009705+00:00]
datetime_updated=[2015-08-31 21:32:48.281335+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [23] of [1277] ============================= id=[1258] ==
Q:  - [https://simple.wikipedia.org/wiki/Simple_English_Wikipedia][1] - Wikipedia in simple English (850 selected words)
- [https://simple.wikipedia.org/wiki/Basic_English][2]


  [1]: https://simple.wikipedia.org/wiki/Simple_English_Wikipedia
  [2]: https://simple.wikipedia.org/wiki/Basic_English
questiontag_set : ['websites']
datetime_added  =[2015-08-28 16:14:54.816529+00:00]
datetime_updated=[2015-08-28 16:14:54.816563+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [24] of [1277] ============================= id=[1257] ==
Q:  http://scotch.io -- tutorials, lessons, and how-to guides for web development (told to me by Nick Garcia)
questiontag_set : ['javascript', 'web development']
datetime_added  =[2015-08-28 04:35:47.319091+00:00]
datetime_updated=[2015-08-28 04:35:47.319142+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [25] of [1277] ============================= id=[1256] ==
Q:  JavaScript for Python programmers: [http://www.wooji-juice.com/blog/javascript-article.html][1]


  [1]: http://www.wooji-juice.com/blog/javascript-article.html
questiontag_set : ['javascript']
datetime_added  =[2015-08-28 02:13:40.339910+00:00]
datetime_updated=[2015-08-28 02:13:40.339940+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [26] of [1277] ============================= id=[1255] ==
Q:  A proposal for handling different Django settings: [http://tech.yipit.com/2011/11/02/django-settings-what-to-do-about-settings-py/][1]


  [1]: http://tech.yipit.com/2011/11/02/django-settings-what-to-do-about-settings-py/
questiontag_set : ['django']
datetime_added  =[2015-08-28 00:16:00.932908+00:00]
datetime_updated=[2015-08-28 00:16:00.932938+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [27] of [1277] ============================= id=[1254] ==
Q:  process monitoring / process supervision / watchdog

- supervisord
- http://serverfault.com/questions/192302/alternative-to-daemontools-djbtools-to-supervise-unix-processes
- upstart
- restartd
- perp
- monit
- runit
- http://www.skarnet.org/software/s6/why.html
questiontag_set : ['unix']
datetime_added  =[2015-08-28 00:08:04.013114+00:00]
datetime_updated=[2015-08-28 00:08:04.013144+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [28] of [1277] ============================= id=[1253] ==
Q:  [https://en.wikipedia.org/wiki/Network_partition][1]


  [1]: https://en.wikipedia.org/wiki/Network_partition
questiontag_set : ['software architecture', 'computer science']
datetime_added  =[2015-08-27 23:56:53.719642+00:00]
datetime_updated=[2015-08-27 23:56:53.719673+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [29] of [1277] ============================= id=[1252] ==
Q:  [https://en.wikipedia.org/wiki/Message_passing][1]


  [1]: https://en.wikipedia.org/wiki/Message_passing
questiontag_set : ['software architecture', 'computer science']
datetime_added  =[2015-08-27 23:54:01.723313+00:00]
datetime_updated=[2015-08-27 23:54:01.723341+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [30] of [1277] ============================= id=[1251] ==
Q:  [https://en.wikipedia.org/wiki/Distributed_computing][1]


  [1]: https://en.wikipedia.org/wiki/Distributed_computing
questiontag_set : ['computer science']
datetime_added  =[2015-08-27 23:49:55.002582+00:00]
datetime_updated=[2015-08-27 23:49:55.002614+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [31] of [1277] ============================= id=[1250] ==
Q:  [https://en.wikipedia.org/wiki/Asynchronous_module_definition][1]


  [1]: https://en.wikipedia.org/wiki/Asynchronous_module_definition
questiontag_set : ['javascript']
datetime_added  =[2015-08-27 21:52:02.064611+00:00]
datetime_updated=[2015-08-27 21:52:02.064651+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [32] of [1277] ============================= id=[1249] ==
Q:  - http://www.quora.com/What-is-the-best-way-to-learn-Ember-js
- http://www.quora.com/What-is-the-best-way-to-learn-HTML-CSS-and-JavaScript
- http://www.quora.com/What-is-the-best-way-to-learn-JavaScript
- http://www.quora.com/What-is-the-best-way-to-learn-web-development
- http://www.quora.com/What-is-the-best-way-for-a-beginner-to-learn-HTML-CSS
questiontag_set : ['css', 'javascript', 'web development']
datetime_added  =[2015-08-27 04:23:35.610273+00:00]
datetime_updated=[2015-08-27 04:23:35.610306+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [33] of [1277] ============================= id=[1248] ==
Q:  - [http://stackoverflow.com/questions/912479/what-is-the-difference-between-javascript-and-ecmascript][1]
- [http://stackoverflow.com/questions/1507848/does-a-real-ecmascript-implementation-exist-or-is-it-just-a-spec][2]


  [1]: http://stackoverflow.com/questions/912479/what-is-the-difference-between-javascript-and-ecmascript
  [2]: http://stackoverflow.com/questions/1507848/does-a-real-ecmascript-implementation-exist-or-is-it-just-a-spec
questiontag_set : ['javascript']
datetime_added  =[2015-08-27 02:17:23.322108+00:00]
datetime_updated=[2015-08-27 02:19:19.248453+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [34] of [1277] ============================= id=[1247] ==
Q:  [https://en.wikipedia.org/wiki/TypeScript][1]

>TypeScript is a free and open source programming language developed and maintained by Microsoft. It is a strict superset of JavaScript, and adds optional static typing and class-based object-oriented programming to the language.


  [1]: https://en.wikipedia.org/wiki/TypeScript
questiontag_set : ['javascript']
datetime_added  =[2015-08-27 02:14:23.695680+00:00]
datetime_updated=[2015-08-27 02:14:23.695725+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [35] of [1277] ============================= id=[1246] ==
Q:  [https://en.wikipedia.org/wiki/ECMAScript][1]


  [1]: https://en.wikipedia.org/wiki/ECMAScript
questiontag_set : ['javascript']
datetime_added  =[2015-08-27 02:12:48.245303+00:00]
datetime_updated=[2015-08-27 02:12:48.245336+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [36] of [1277] ============================= id=[1245] ==
Q:  [http://todomvc.com/][1] -- a nice website comparing an app in different JavaScript MVC frameworks (Backbone, Angular, ember, knockout, react, meteor, node, ...)


  [1]: http://todomvc.com/
questiontag_set : ['javascript']
datetime_added  =[2015-08-27 02:03:03.880021+00:00]
datetime_updated=[2015-08-27 02:03:03.880053+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [37] of [1277] ============================= id=[1244] ==
Q:  [https://en.wikipedia.org/wiki/Message-oriented_middleware][1]


  [1]: https://en.wikipedia.org/wiki/Message-oriented_middleware
questiontag_set : ['computer science']
datetime_added  =[2015-08-27 01:50:30.693144+00:00]
datetime_updated=[2015-08-27 01:50:30.693179+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [38] of [1277] ============================= id=[1243] ==
Q:  Meteor (a JavaScript web framework) [https://en.wikipedia.org/wiki/Meteor_(web_framework)][1]


  [1]: https://en.wikipedia.org/wiki/Meteor_%28web_framework%29
questiontag_set : ['web development', 'javascript']
datetime_added  =[2015-08-27 01:49:17.232808+00:00]
datetime_updated=[2015-08-27 01:49:17.232839+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [39] of [1277] ============================= id=[1242] ==
Q:  Big Data: [https://en.wikipedia.org/wiki/Big_data][1]


  [1]: https://en.wikipedia.org/wiki/Big_data
questiontag_set : ['computer science']
datetime_added  =[2015-08-27 01:48:08.097549+00:00]
datetime_updated=[2015-08-27 01:48:08.097580+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [40] of [1277] ============================= id=[1241] ==
Q:  [https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller][1]


  [1]: https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller
questiontag_set : ['programming']
datetime_added  =[2015-08-25 15:49:31.266959+00:00]
datetime_updated=[2015-08-25 15:49:31.266992+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [41] of [1277] ============================= id=[1240] ==
Q:  What 3 components does the model-view-controller MVC paradigm separate?
questiontag_set : ['programming']
datetime_added  =[2015-08-25 15:48:54.049420+00:00]
datetime_updated=[2015-08-25 15:48:54.049452+00:00]
---------------------------------------------- id=[646] --
A:
1. presentation
2. data
3. logic

[https://en.wikipedia.org/wiki/AngularJS#Philosophy][1]


  [1]: https://en.wikipedia.org/wiki/AngularJS#Philosophy

=== [42] of [1277] ============================= id=[1239] ==
Q:  - [http://stackoverflow.com/questions/7284/what-is-turing-complete][1]
- [http://stackoverflow.com/questions/2990277/how-useful-is-turing-completeness-are-neural-nets-turing-complete/][2]


  [1]: http://stackoverflow.com/questions/7284/what-is-turing-complete
  [2]: http://stackoverflow.com/questions/2990277/how-useful-is-turing-completeness-are-neural-nets-turing-complete/
questiontag_set : ['computer science', 'programming']
datetime_added  =[2015-08-25 15:45:45.994347+00:00]
datetime_updated=[2015-08-25 15:45:45.994383+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [43] of [1277] ============================= id=[1238] ==
Q:  [https://en.wikipedia.org/wiki/Domain-specific_language][1]


  [1]: https://en.wikipedia.org/wiki/Domain-specific_language
questiontag_set : ['programming languages']
datetime_added  =[2015-08-25 15:01:39.964957+00:00]
datetime_updated=[2015-08-25 15:01:39.964995+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [44] of [1277] ============================= id=[1237] ==
Q:  [https://en.wikipedia.org/wiki/First-class_citizen][1]


  [1]: https://en.wikipedia.org/wiki/First-class_citizen
questiontag_set : ['programming']
datetime_added  =[2015-08-25 14:59:38.495681+00:00]
datetime_updated=[2015-08-25 14:59:38.495712+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [45] of [1277] ============================= id=[1236] ==
Q:  What are the two usual subcategories of the declarative category or programming languages?
questiontag_set : ['programming']
datetime_added  =[2015-08-25 14:58:28.455473+00:00]
datetime_updated=[2015-08-25 14:58:28.455505+00:00]
---------------------------------------------- id=[645] --
A:
"functional" and "logical"

[https://en.wikipedia.org/wiki/List_of_programming_languages_by_type#Declarative_languages][1]


  [1]: https://en.wikipedia.org/wiki/List_of_programming_languages_by_type#Declarative_languages

=== [46] of [1277] ============================= id=[1235] ==
Q:  What type of programming paradigm is SQL?
questiontag_set : ['programming']
datetime_added  =[2015-08-25 14:56:55.854087+00:00]
datetime_updated=[2015-08-25 14:56:55.854118+00:00]
---------------------------------------------- id=[644] --
A:
declarative programming

[https://en.wikipedia.org/wiki/List_of_programming_languages_by_type#Declarative_languages][1]


  [1]: https://en.wikipedia.org/wiki/List_of_programming_languages_by_type#Declarative_languages

=== [47] of [1277] ============================= id=[1234] ==
Q:  Domain-specific languages

Some well-known examples of declarative domain-specific languages (DSLs) include the yacc parser generator input language, the Make build specification language, Puppet's configuration management language, regular expressions, and a subset of SQL (SELECT queries, for example). DSLs have the advantage of being useful while not necessarily needing to be Turing-complete, which makes it easier for a language to be purely declarative.

Many markup languages such as HTML, MXML, XAML, XSLT or other user-interface markup languages are often declarative. HTML, for example, only describes what should appear on a webpage - it specifies control flow neither rendering a page nor its possible interactions with a user.

As of 2013 some software systems combine traditional user-interface markup languages (such as HTML) with declarative markup that defines what (but not how) the back-end server systems should do to support the declared interface. Such systems, typically using a domain-specific XML namespace, may include abstractions of SQL database syntax or parameterised calls to web services using representational state transfer (REST) and SOAP.

[https://en.wikipedia.org/wiki/Declarative_programming][1]


  [1]: https://en.wikipedia.org/wiki/Declarative_programming
questiontag_set : ['programming']
datetime_added  =[2015-08-25 14:54:33.322527+00:00]
datetime_updated=[2015-08-25 14:54:33.322559+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [48] of [1277] ============================= id=[1233] ==
Q:  The following are definitions of what programming paradigm?


- A program that describes what computation should be performed and not how to compute it
- Any programming language that lacks side effects (or more specifically, is referentially transparent)
- A language with a clear correspondence to mathematical logic
questiontag_set : ['programming']
datetime_added  =[2015-08-25 14:47:32.100317+00:00]
datetime_updated=[2015-08-25 14:47:32.100357+00:00]
---------------------------------------------- id=[643] --
A:
declarative programming

[https://en.wikipedia.org/wiki/Declarative_programming][1]


  [1]: https://en.wikipedia.org/wiki/Declarative_programming

=== [49] of [1277] ============================= id=[1232] ==
Q:  What programming paradigm often considers programs as theories of a formal logic, and computations as deductions in that logic space?
questiontag_set : ['programming']
datetime_added  =[2015-08-25 14:44:15.818492+00:00]
datetime_updated=[2015-08-25 14:44:15.818525+00:00]
---------------------------------------------- id=[642] --
A:
declarative programming

[https://en.wikipedia.org/wiki/Declarative_programming][1]


  [1]: https://en.wikipedia.org/wiki/Declarative_programming

=== [50] of [1277] ============================= id=[1231] ==
Q:  What do you call the programming paradigm that expresses the logic of a computation without describing its control flow?
questiontag_set : ['programming']
datetime_added  =[2015-08-25 14:42:29.436458+00:00]
datetime_updated=[2015-08-25 14:42:29.436489+00:00]
---------------------------------------------- id=[641] --
A:
declarative programming

[https://en.wikipedia.org/wiki/Declarative_programming][1]


  [1]: https://en.wikipedia.org/wiki/Declarative_programming

=== [51] of [1277] ============================= id=[1230] ==
Q:  What type of programming are the following languages:

database query languages (e.g., SQL, XQuery), regular expressions, logic programming, functional programming, and configuration management systems
questiontag_set : ['programming languages']
datetime_added  =[2015-08-25 14:41:22.085255+00:00]
datetime_updated=[2015-08-25 14:41:22.085287+00:00]
---------------------------------------------- id=[640] --
A:
declarative programming

[https://en.wikipedia.org/wiki/Declarative_programming][1]


  [1]: https://en.wikipedia.org/wiki/Declarative_programming

=== [52] of [1277] ============================= id=[1229] ==
Q:  MEAN: [https://en.wikipedia.org/wiki/MEAN_(software_bundle)][1]


  [1]: https://en.wikipedia.org/wiki/MEAN_%28software_bundle%29
questiontag_set : ['javascript', 'front-end-frameworks']
datetime_added  =[2015-08-25 14:37:31.777067+00:00]
datetime_updated=[2015-08-25 14:37:31.777101+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [53] of [1277] ============================= id=[1228] ==
Q:  Angular:  [https://en.wikipedia.org/wiki/AngularJS][1]


  [1]: https://en.wikipedia.org/wiki/AngularJS
questiontag_set : ['front-end-frameworks', 'javascript', 'angular']
datetime_added  =[2015-08-25 14:36:36.664579+00:00]
datetime_updated=[2015-08-25 14:36:36.664619+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [54] of [1277] ============================= id=[1227] ==
Q:  [https://www.livecoding.tv][1] -- website of live streams of people coding


  [1]: https://www.livecoding.tv
questiontag_set : ['websites']
datetime_added  =[2015-08-22 19:51:08.353800+00:00]
datetime_updated=[2015-08-22 19:51:08.353845+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [55] of [1277] ============================= id=[1226] ==
Q:  How to create a pdf from images on the Mac using Preview?
questiontag_set : ['osx (OSX) (Mac)']
datetime_added  =[2015-08-20 18:51:51.977710+00:00]
datetime_updated=[2015-08-20 18:51:51.977740+00:00]
---------------------------------------------- id=[639] --
A:
1. open an image in Preview
2. View => Thumbnails
3. drag-and-drop the other images to add to the thumbnails sidebar/pane
4. File => Print => PDF => Open pdf in Preview...

=== [56] of [1277] ============================= id=[1225] ==
Q:  In pudb, how do you do the equivalent of the pdb command `until`, or how do you run until you get to the cursor?
questiontag_set : ['pudb']
datetime_added  =[2015-08-17 17:52:44.591278+00:00]
datetime_updated=[2015-08-17 17:52:44.591309+00:00]
---------------------------------------------- id=[638] --
A:
Use the "t" command to run until cursor.

=== [57] of [1277] ============================= id=[1224] ==
Q:  [http://stubhub.com/][1] -- online marketplace for buying/selling tickets; owned by Ebay


  [1]: http://www.stubhub.com/
questiontag_set : ['websites']
datetime_added  =[2015-08-17 14:52:13.948928+00:00]
datetime_updated=[2015-08-17 14:52:13.948959+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [58] of [1277] ============================= id=[1223] ==
Q:  In pudb, how to do change the size of the command-line / code windows?
questiontag_set : ['pudb']
datetime_added  =[2015-08-17 14:06:38.092675+00:00]
datetime_updated=[2015-08-17 14:06:38.092707+00:00]
---------------------------------------------- id=[637] --
A:
With the focus on the command-line window (in the output, not on the command-line itself), use:

     +/-  to grow / shrink
     _ / = to minimize / maximize

Note that the focus needs to be in the command-line window, not the code window.  
Furthermore, the focus in the command-line window needs to be in the output, not on the command-line itself.

=== [59] of [1277] ============================= id=[1222] ==
Q:  html pages that are meta refreshes:

- [https://en.wikipedia.org/wiki/Meta_refresh][1]
- [http://webmaster.iu.edu/tools-and-guides/maintenance/redirect-meta-refresh.phtml][2]
- [http://www.w3.org/TR/WCAG20-TECHS/H76.html][3]


  [1]: https://en.wikipedia.org/wiki/Meta_refresh
  [2]: http://webmaster.iu.edu/tools-and-guides/maintenance/redirect-meta-refresh.phtml
  [3]: http://www.w3.org/TR/WCAG20-TECHS/H76.html
questiontag_set : ['html', 'web development']
datetime_added  =[2015-08-15 01:06:01.720528+00:00]
datetime_updated=[2015-08-15 01:06:01.720571+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [60] of [1277] ============================= id=[1221] ==
Q:  In pudb, after hitting 'm' to go into the modules list to open a module, how do you filter the modules?
questiontag_set : ['pudb']
datetime_added  =[2015-08-15 00:29:06.997185+00:00]
datetime_updated=[2015-08-15 00:29:06.997220+00:00]
---------------------------------------------- id=[636] --
A:
Use the up-arrow to go up to the filter pane at the top, and then type in a part of a filename.

=== [61] of [1277] ============================= id=[1220] ==
Q:  How to search only in open folds?
questiontag_set : ['vim']
datetime_added  =[2015-08-13 17:31:11.495065+00:00]
datetime_updated=[2015-08-13 17:31:11.495096+00:00]
---------------------------------------------- id=[635] --
A:
    :set foldopen-=search
(note the minus in "-=")

Now when you search, it will only show matches in the open fold(s).  If there is a match in a fold, it will go to the fold but not open it.

[http://vim.wikia.com/wiki/Search_only_in_unfolded_text][1]


  [1]: http://vim.wikia.com/wiki/Search_only_in_unfolded_text

=== [62] of [1277] ============================= id=[1219] ==
Q:  What 3 POST calls are made by Vulcan when a trap is created?
questiontag_set : ['trapit_elzar', 'trapit']
datetime_added  =[2015-08-13 14:16:13.602055+00:00]
datetime_updated=[2015-08-13 14:16:13.602108+00:00]
---------------------------------------------- id=[634] --
A:
1. POST /traps/ (create bundle trap)
2. POST /traps/ (create topic trap)
3. POST /slings-in/  (create sling from topic to bundle)

(from observing requests in browser when creating a trap; 8/13/15)

=== [63] of [1277] ============================= id=[1218] ==
Q:  - [http://stackoverflow.com/questions/4201455/sqlalchemy-whats-the-difference-between-flush-and-commit][1]
- [http://stackoverflow.com/questions/7471495/what-is-the-difference-between-session-commit-and-session-flush][2]


  [1]: http://stackoverflow.com/questions/4201455/sqlalchemy-whats-the-difference-between-flush-and-commit
  [2]: http://stackoverflow.com/questions/7471495/what-is-the-difference-between-session-commit-and-session-flush
questiontag_set : ['sql', 'databases', 'sqlalchemy']
datetime_added  =[2015-08-13 13:18:28.927075+00:00]
datetime_updated=[2015-08-13 13:18:28.927108+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [64] of [1277] ============================= id=[1217] ==
Q:  In the python interpreter, how do you get the value of the last statement?
questiontag_set : ['python']
datetime_added  =[2015-08-12 14:49:19.181333+00:00]
datetime_updated=[2015-08-12 14:49:19.181364+00:00]
---------------------------------------------- id=[633] --
A:
underscore  `_`

e.g.,


    >>> 1 + 1
    2
    >>> _
    2
    >>> x = _
    >>> x
    2
    >>>

=== [65] of [1277] ============================= id=[1216] ==
Q:  In vim, how do you select characters in a line to delete?
questiontag_set : ['vim']
datetime_added  =[2015-08-12 14:37:26.733267+00:00]
datetime_updated=[2015-08-12 14:37:26.733298+00:00]
---------------------------------------------- id=[632] --
A:
    control-v => (move the cursor to highlight text) => x (to delete)

other keywords: ctl-v, ctrl-v

=== [66] of [1277] ============================= id=[1215] ==
Q:  Does JSON use single-quotes, double-quotes, or both for string delimiters?
questiontag_set : ['programming']
datetime_added  =[2015-08-11 17:33:14.043657+00:00]
datetime_updated=[2015-08-11 17:33:14.043688+00:00]
---------------------------------------------- id=[631] --
A:
JSON only uses double-quotes for string delimiters.

- [http://www.json.org/][2]
- [http://stackoverflow.com/questions/4162642/python-single-vs-double-quotes-in-json
-][1] 


  [1]: http://stackoverflow.com/questions/4162642/python-single-vs-double-quotes-in-json
  [2]: http://www.json.org/

=== [67] of [1277] ============================= id=[1214] ==
Q:  [https://en.wikipedia.org/wiki/Foreign_function_interface][1]


  [1]: https://en.wikipedia.org/wiki/Foreign_function_interface
questiontag_set : ['computer science']
datetime_added  =[2015-08-11 15:43:33.383548+00:00]
datetime_updated=[2015-08-11 15:43:33.383579+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [68] of [1277] ============================= id=[1213] ==
Q:  How to sort a list of dicts or dict of dicts, sorting by multiple fields?
questiontag_set : ['python']
datetime_added  =[2015-08-05 22:12:06.133605+00:00]
datetime_updated=[2015-08-05 22:12:06.133639+00:00]
---------------------------------------------- id=[630] --
A:
using lambda, and modifying one of the values before comparing:

    sorted(dict_of_dicts.values(), 
           key=lambda x: (x['field2'].lower(), x['field1]))  # note the use of a tuple for multiple fields

or, using itemgetter (if not needing to modify the field value like we did with lower() in the previous example):

    from operator import itemgetter
    sorted(dict_of_dicts.values(),
           key=itemgetter('field2', 'field1'))


=== [69] of [1277] ============================= id=[1212] ==
Q:  In vim, how do you search for the word "foo" at column 23?

questiontag_set : ['vim']
datetime_added  =[2015-08-05 20:27:38.573003+00:00]
datetime_updated=[2015-08-05 20:27:38.573035+00:00]
---------------------------------------------- id=[629] --
A:
    \%23cfoo


- [http://stackoverflow.com/questions/1797424/vim-find-text-in-a-specific-column][1]
- [http://stackoverflow.com/questions/12985042/vim-search-for-lines-with-or-without-character-in-specific-column][2]


  [1]: http://stackoverflow.com/questions/1797424/vim-find-text-in-a-specific-column
  [2]: http://stackoverflow.com/questions/12985042/vim-search-for-lines-with-or-without-character-in-specific-column

=== [70] of [1277] ============================= id=[1211] ==
Q:  In pudb, how do you scroll up/down a screen at a time with the keyboard?
questiontag_set : ['python', 'pudb']
datetime_added  =[2015-08-05 19:18:16.976308+00:00]
datetime_updated=[2015-08-05 19:18:16.976340+00:00]
---------------------------------------------- id=[628] --
A:
control-u  (up)   
control-d (down)

=== [71] of [1277] ============================= id=[1210] ==
Q:  In postgres, how do you show all the system tables (e.g, pg_locks, pg_tables, ...)?
questiontag_set : ['postgresql']
datetime_added  =[2015-08-04 03:03:51.495139+00:00]
datetime_updated=[2015-08-04 03:03:51.495182+00:00]
---------------------------------------------- id=[627] --
A:
\dS   ("S" for "system")

=== [72] of [1277] ============================= id=[1209] ==
Q:  In postgresql, how can you drop a table and drop all other objects that are dependent on the table?
questiontag_set : ['postgresql']
datetime_added  =[2015-08-04 02:36:51.912058+00:00]
datetime_updated=[2015-08-04 02:36:51.912091+00:00]
---------------------------------------------- id=[626] --
A:
DROP TABLE my_table CASCADE

[http://www.postgresql.org/docs/devel/static/sql-droptable.html][1]


  [1]: http://www.postgresql.org/docs/devel/static/sql-droptable.html

=== [73] of [1277] ============================= id=[1208] ==
Q:  - [https://www.goodreads.com/author/quotes/7583959.Daniell_Koepke][1]
- [http://internal-acceptance-movement.tumblr.com/][2]


  [1]: https://www.goodreads.com/author/quotes/7583959.Daniell_Koepke
  [2]: http://internal-acceptance-movement.tumblr.com/
questiontag_set : ['inspiration']
datetime_added  =[2015-07-30 21:53:57.166752+00:00]
datetime_updated=[2015-07-30 21:53:57.166786+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [74] of [1277] ============================= id=[1207] ==
Q:  What does "MIME" stand for, and what are the 4 things about the email format does it extend?
questiontag_set : ['email']
datetime_added  =[2015-07-27 13:57:21.703649+00:00]
datetime_updated=[2015-07-27 13:57:21.703684+00:00]
---------------------------------------------- id=[625] --
A:
>Multipurpose Internet Mail Extensions (MIME) is an Internet standard that extends the format of email to support:

1. Text in character sets other than ASCII
2. Non-text attachments: audio, video, images, application programs etc.
3. Message bodies with multiple parts
4. Header information in non-ASCII character sets

[https://en.wikipedia.org/wiki/MIME][1]


  [1]: https://en.wikipedia.org/wiki/MIME

=== [75] of [1277] ============================= id=[1206] ==
Q:  What does MIME multipart/alternative refer to?
questiontag_set : ['email']
datetime_added  =[2015-07-27 13:55:01.435644+00:00]
datetime_updated=[2015-07-27 13:55:01.435676+00:00]
---------------------------------------------- id=[624] --
A:
It gives alternative forms to display.  

>Most commonly, multipart/alternative is used for email with two parts, one plain text (text/plain) and one HTML (text/html). The plain text part provides backwards compatibility while the HTML part allows use of formatting and hyperlinks. Most email clients offer a user option to prefer plain text over HTML; this is an example of how local factors may affect how an application chooses which "best" part of the message to display.

[https://en.wikipedia.org/wiki/MIME][1]


  [1]: https://en.wikipedia.org/wiki/MIME

=== [76] of [1277] ============================= id=[1205] ==
Q:  Note that there is no way to view email addresses on the AWS SES suppression list.

>The only way you will know if an address is on the suppression list is that you will receive a suppression list bounce when you send to it. There is no way to query the suppression list in advance.

[http://docs.aws.amazon.com/ses/latest/DeveloperGuide/remove-from-suppression-list.html][1]


  [1]: http://docs.aws.amazon.com/ses/latest/DeveloperGuide/remove-from-suppression-list.html
questiontag_set : ['email']
datetime_added  =[2015-07-27 12:56:50.019595+00:00]
datetime_updated=[2015-07-27 12:56:50.019625+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [77] of [1277] ============================= id=[1204] ==
Q:  What is the website to give a nice reordering of postgresql EXPLAIN ANALYZE output?
questiontag_set : ['postgresql']
datetime_added  =[2015-07-24 14:36:28.590185+00:00]
datetime_updated=[2015-07-24 14:36:28.590216+00:00]
---------------------------------------------- id=[623] --
A:
[http://explain.depesz.com/][1]


  [1]: http://explain.depesz.com/

=== [78] of [1277] ============================= id=[1203] ==
Q:  How do you drop all temp tables in postgres?
questiontag_set : ['postgresql']
datetime_added  =[2015-07-24 13:24:14.994085+00:00]
datetime_updated=[2015-07-24 13:24:14.994120+00:00]
---------------------------------------------- id=[622] --
A:
DISCARD TEMP

or

DISCARD ALL

[http://www.postgresql.org/docs/9.5/static/sql-discard.html][1]


  [1]: http://www.postgresql.org/docs/9.5/static/sql-discard.html

=== [79] of [1277] ============================= id=[1202] ==
Q:  When doing a LEFT OUTER JOIN, what is a general rule to speed up to performance?
questiontag_set : ['sql_performance', 'sql']
datetime_added  =[2015-07-22 21:34:17.871646+00:00]
datetime_updated=[2015-07-22 21:34:17.871677+00:00]
---------------------------------------------- id=[621] --
A:
Making the table on the right smaller than the table on the left will make the query faster, because the table on the right needs to do a sequential scan.  If the table on the right is larger, see if the query can be modified to reverse the tables.

[per discussion with Dave Setchell 7/22/15]

=== [80] of [1277] ============================= id=[1201] ==
Q:  Why is a global needed for func1 but not for func2?

    colors = {}
    
    def func1():
        global colors
        colors = {"red": 14}
    
    def func2():
        colors['red'] = 100


questiontag_set : ['python']
datetime_added  =[2015-07-22 17:26:39.654089+00:00]
datetime_updated=[2015-07-22 17:26:39.654144+00:00]
---------------------------------------------- id=[620] --
A:
Because func1 does assignment, whereas func2 just modifies the existing colors dict.

=== [81] of [1277] ============================= id=[1200] ==
Q:  - [https://en.wikipedia.org/wiki/Crab_mentality][1]
- [https://en.wikipedia.org/wiki/Tall_poppy_syndrome][2]


  [1]: https://en.wikipedia.org/wiki/Crab_mentality
  [2]: https://en.wikipedia.org/wiki/Tall_poppy_syndrome
questiontag_set : ['vocabulary']
datetime_added  =[2015-07-22 14:27:09.225528+00:00]
datetime_updated=[2015-07-22 14:27:09.225559+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [82] of [1277] ============================= id=[1199] ==
Q:  Where can we access a read-only replica of the Higgs postgres db?
questiontag_set : ['trapit']
datetime_added  =[2015-07-20 18:00:28.548827+00:00]
datetime_updated=[2015-07-20 18:00:28.548859+00:00]
---------------------------------------------- id=[619] --
A:
db-3.higgs.trapit.com (10.0.1.22)

=== [83] of [1277] ============================= id=[1198] ==
Q:  [http://www.scotthyoung.com/blog/2015/07/07/building-searching/?inf_contact_key=15e74294425a495e237e5905758daeda8120672b6a88a584aab658fd97d8e478][1]


  [1]: http://www.scotthyoung.com/blog/2015/07/07/building-searching/?inf_contact_key=15e74294425a495e237e5905758daeda8120672b6a88a584aab658fd97d8e478
questiontag_set : ['psychology', 'web pages to review']
datetime_added  =[2015-07-19 21:51:55.526865+00:00]
datetime_updated=[2015-07-19 21:51:55.526899+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [84] of [1277] ============================= id=[1197] ==
Q:  Linus Torvalds: [https://plus.google.com/+LinusTorvalds/posts][1]


  [1]: https://plus.google.com/+LinusTorvalds/posts
questiontag_set : ['web pages to review']
datetime_added  =[2015-07-18 00:18:35.934678+00:00]
datetime_updated=[2015-07-18 00:18:35.934719+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [85] of [1277] ============================= id=[1196] ==
Q:  sqlite doesn't support a FULL OUTER JOIN.  How can it be simulated?
questiontag_set : ['sqlite3', 'sql', 'postgresql']
datetime_added  =[2015-07-17 20:28:39.024492+00:00]
datetime_updated=[2015-07-17 20:28:39.024522+00:00]
---------------------------------------------- id=[618] --
A:
Use a UNION of two queries.

- [https://en.wikipedia.org/wiki/Join_%28SQL%29#Full%5Fouter%5Fjoin][1]
- [http://sqlite.awardspace.info/syntax/sqlitepg06.htm][2]
- [http://stackoverflow.com/questions/1923259/full-outer-join-with-sqlite][3]


  [1]: https://en.wikipedia.org/wiki/Join_%28SQL%29#Full_outer_join
  [2]: http://sqlite.awardspace.info/syntax/sqlitepg06.htm
  [3]: http://stackoverflow.com/questions/1923259/full-outer-join-with-sqlite

=== [86] of [1277] ============================= id=[1195] ==
Q:  What is a requirement for each of the queries in a UNION? (or INTERSECT or EXCEPT)
questiontag_set : ['sql', 'postgresql']
datetime_added  =[2015-07-17 20:02:57.476229+00:00]
datetime_updated=[2015-07-17 20:02:57.476260+00:00]
---------------------------------------------- id=[617] --
A:
> In order to calculate the union, intersection, or difference of two queries, the two queries must be "union compatible", which means that they return the same number of columns and the corresponding columns have compatible data types, as described in Section 10.5.

[http://www.postgresql.org/docs/9.4/static/queries-union.html][1]


  [1]: http://www.postgresql.org/docs/9.4/static/queries-union.html

=== [87] of [1277] ============================= id=[1194] ==
Q:  UNION in SQL: [http://www.postgresql.org/docs/9.4/static/queries-union.html][1]


  [1]: http://www.postgresql.org/docs/9.4/static/queries-union.html
questiontag_set : ['postgresql', 'sql']
datetime_added  =[2015-07-17 20:00:36.015326+00:00]
datetime_updated=[2015-07-17 20:00:36.015358+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [88] of [1277] ============================= id=[1193] ==
Q:  If you have a user's API key, how do you use it to do a curl?
questiontag_set : ['web development', 'unix', 'trapit']
datetime_added  =[2015-07-17 18:21:19.797914+00:00]
datetime_updated=[2015-07-17 18:21:19.797955+00:00]
---------------------------------------------- id=[616] --
A:
`curl -u ':{API_KEY}`

e.g.,

    curl -u ':98fa6e71a4f74b9f8a169c95110c3809' --insecure 'https://ez-4.higgs.trapit.com/api/v4/ibm/users/02c24717e0414cc2afdcf0a068d428bb/compass/'

>-u, --user <user:password>
[man curl]

=== [89] of [1277] ============================= id=[1192] ==
Q:  What are the pgrep options to show the full command, and to grep through all the args in each command?
questiontag_set : ['unix']
datetime_added  =[2015-07-16 21:34:30.572823+00:00]
datetime_updated=[2015-07-16 21:34:30.572856+00:00]
---------------------------------------------- id=[615] --
A:
`pgrep -fl`

>-f          Match against full argument lists.  The default is to match against process names.

>-l          Long output.  For pgrep, print the process name in addition to the process ID for each matching process.  If used in conjunction with -f, print the process ID and the full argument list for each matching process.  For pkill,
                 display the kill command used for each process killed.

=== [90] of [1277] ============================= id=[1191] ==
Q:  What are the two types of topic traps?
questiontag_set : ['trapit']
datetime_added  =[2015-07-16 16:42:28.978870+00:00]
datetime_updated=[2015-07-16 16:42:28.978901+00:00]
---------------------------------------------- id=[614] --
A:
1. discovery traps (trainable; AI / machine-learning); can start with a document instead of a keyword
2. search traps (just looks for keyword; does not respond to training)

=== [91] of [1277] ============================= id=[1190] ==
Q:  What does a LEFT OUTER JOIN do?  (and RIGHT OUTER JOIN)
questiontag_set : ['sql']
datetime_added  =[2015-07-16 16:29:29.295293+00:00]
datetime_updated=[2015-07-16 16:29:29.295325+00:00]
---------------------------------------------- id=[613] --
A:
Left outer join

The result of a left outer join (or simply left join) for table A and B always contains all records of the "left" table (A), even if the join-condition does not find any matching record in the "right" table (B). This means that if the ON clause matches 0 (zero) records in B, the join will still return a row in the result—but with NULL in each column from B. This means that a left outer join returns all the values from the left table, plus matched values from the right table (or NULL in case of no matching join predicate). If the right table returns one row and the left table returns more than one matching row for it, the values in the right table will be repeated for each distinct row on the left table.
For example, this allows us to find an employee's department, but still shows the employee(s) even when they have not been assigned to a department (contrary to the inner-join example above, where unassigned employees are excluded from the result).

    SELECT *
    FROM employee
    LEFT OUTER JOIN department ON employee.DepartmentID = department.DepartmentID;

================================================================================
Right outer join
A right outer join (or right join) closely resembles a left outer join, except with the treatment of the tables reversed. Every row from the "right" table (B) will appear in the joined table at least once. If no matching row from the "left" table (A) exists, NULL will appear in columns from A for those records that have no match in B. A right outer join returns all the values from the right table and matched values from the left table (NULL in case of no matching join predicate). For example, this allows us to find each employee and his or her department, but still show departments that have no employees. Below is shown an example of right outer join, with the additional result row italicized:

    SELECT *
    FROM employee
    RIGHT OUTER JOIN department ON employee.DepartmentID = department.DepartmentID;

=== [92] of [1277] ============================= id=[1189] ==
Q:  How to debug issues on Higgs with a specific elzar?
questiontag_set : ['trapit_elzar']
datetime_added  =[2015-07-16 13:19:40.472029+00:00]
datetime_updated=[2015-07-16 13:19:40.472062+00:00]
---------------------------------------------- id=[612] --
A:
1. pick an ez-* box
2. rewrite the curl to hit that box (use `curl -k / --insecure`, need to be on vpn)
3. quickly and carefully hotpatch elzar on that box to log progress in multiple places in the handler, probably to a dedicated file and flush output and/or include timestamps as you go

[per Luke in Flowdock, 4:43pm July 14, 2015]


Here is a successful curl that I used:

    curl --insecure 'https://ez-4.higgs.trapit.com/api/v4/ibm/users/02c24717e0414cc2afdcf0a068d428bb/compass/'  -H 'Authorization: Basic ...'

(note that the 'https' is still required, and that `ibm.trap.it` becomes `ez-4.higgs.trapit.com`)

=== [93] of [1277] ============================= id=[1188] ==
Q:  [https://github.com/donnemartin/interactive-coding-challenges][1]


  [1]: https://github.com/donnemartin/interactive-coding-challenges
questiontag_set : ['code katas', 'python']
datetime_added  =[2015-07-16 00:00:35.048918+00:00]
datetime_updated=[2015-07-16 00:00:35.048951+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [94] of [1277] ============================= id=[1187] ==
Q:  [https://sivers.org/pg][1] - "Simplify: move code into database functions" by Derek Sivers

  [1]: https://sivers.org/pg
questiontag_set : ['postgresql', 'web development']
datetime_added  =[2015-07-15 23:15:03.756998+00:00]
datetime_updated=[2015-07-15 23:15:03.757032+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [95] of [1277] ============================= id=[1186] ==
Q:  Video to watch, recommended by Derek Sivers: [https://www.youtube.com/watch?v=rI8tNMsozo0&t=45s][1]


  [1]: https://www.youtube.com/watch?v=rI8tNMsozo0&t=45s
questiontag_set : ['video']
datetime_added  =[2015-07-15 23:12:04.399088+00:00]
datetime_updated=[2015-07-15 23:12:04.399121+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [96] of [1277] ============================= id=[1185] ==
Q:  [https://sivers.org/projects][1]


  [1]: https://sivers.org/projects
questiontag_set : ['web pages to review']
datetime_added  =[2015-07-15 23:09:00.165438+00:00]
datetime_updated=[2015-07-15 23:09:00.165472+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [97] of [1277] ============================= id=[1184] ==
Q:  What is probably the issue when seeing errors like this:

>UnicodeDecodeError: 'utf8' codec can't decode byte 0xa7 in position 0: invalid start byte
questiontag_set : ['unicode']
datetime_added  =[2015-07-14 19:17:15.971888+00:00]
datetime_updated=[2015-07-14 19:17:15.971921+00:00]
---------------------------------------------- id=[611] --
A:
It's probably an encoding issue.  Python is expecting utf8, but the file is probably not utf-8 encoded.  Run the Python "chardet" package against the file to see what encoding it is.

=== [98] of [1277] ============================= id=[1183] ==
Q:  What are the semantics for multiple outer joins?

e.g.,

    SELECT *
    FROM table1 tab1 
    LEFT OUTER JOIN table2 tab2 ON tab1.fg = tab2.fg
    LEFT OUTER JOIN table4 tab4 ON tab1.ss = tab4.ss
    INNER JOIN table3 tab3 ON tab4.xya = tab3.xya
    LEFT OUTER JOIN table5 tab5 ON tab4.kk = tab5.kk
questiontag_set : ['sql']
datetime_added  =[2015-07-08 15:07:07.841111+00:00]
datetime_updated=[2015-07-08 15:07:07.841144+00:00]
---------------------------------------------- id=[610] --
A:

>They are processed in top-to-bottom order, with the joins all associating to the "whole" of the prior FROM clause.

All things being equal:

- tab1 is the mandatory partner for the OUTER JOIN with the optional partner tab2
- the above is the mandatory partner for the OUTER JOIN with the optional partner tab4
- the above and tab4 are both mandatory partners in the INNER JOIN
- the above is the mandatory partner for the OUTER JOIN with the optional partner tab5

However, the problem with this query

    SELECT *
    FROM table1 tab1 
    LEFT OUTER JOIN table2 tab2 ON tab1.fg = tab2.fg
    LEFT OUTER JOIN table4 tab4 ON tab1.ss = tab4.ss
    INNER JOIN table3 tab3 ON tab4.xya = tab3.xya
    LEFT OUTER JOIN table5 tab5 ON tab4.kk = tab5.kk

is that the INNER JOIN with table3 uses a condition that REQUIRES tab4 to get involved, making it virtually a mandatory link to retain records from the left part, so in total tab1/tab4/tab3 have to successfully join, with tab2 and tab5 optional.

[http://stackoverflow.com/questions/12818258/multiple-outer-joins-semantics][1]


  [1]: http://stackoverflow.com/questions/12818258/multiple-outer-joins-semantics

=== [99] of [1277] ============================= id=[1182] ==
Q:  Is there any difference in SQL between GROUP BY and DISTINCT?
questiontag_set : ['sql']
datetime_added  =[2015-07-07 15:37:31.849321+00:00]
datetime_updated=[2015-07-07 15:37:31.849353+00:00]
---------------------------------------------- id=[609] --
A:
GROUP BY allows you to use aggregate functions, whereas DISTINCT just removes duplicates.

>If you use DISTINCT with multiple columns, the result set won't be grouped as it will with GROUP BY, and you can't use aggregate functions with DISTINCT.

[http://stackoverflow.com/questions/164319/is-there-any-difference-between-group-by-and-distinct][1]


  [1]: http://stackoverflow.com/questions/164319/is-there-any-difference-between-group-by-and-distinct

=== [100] of [1277] ============================= id=[1181] ==
Q:  What is the purpose of `GROUP BY` in SQL?
questiontag_set : ['sql']
datetime_added  =[2015-07-07 15:35:04.501750+00:00]
datetime_updated=[2015-07-07 15:35:04.501810+00:00]
---------------------------------------------- id=[608] --
A:
GROUP BY is used to eliminate duplicate rows, and also with aggregate functions.

>The GROUP BY clause is used to project rows having common values into a smaller set of rows. GROUP BY is often used in conjunction with SQL aggregation functions or to eliminate duplicate rows from a result set. The WHERE clause is applied before the GROUP BY clause.

[https://en.wikipedia.org/wiki/SQL#Queries][1]


  [1]: https://en.wikipedia.org/wiki/SQL#Queries

=== [101] of [1277] ============================= id=[1180] ==
Q:  What does this do in Python:

    try:
        foo = bar
    finally:
        print 'cleanup'
questiontag_set : ['python']
datetime_added  =[2015-07-07 13:53:31.129214+00:00]
datetime_updated=[2015-07-07 13:53:31.129247+00:00]
---------------------------------------------- id=[607] --
A:
"cleanup" will get printed, and then the unhandled exception will be raised.


> A finally clause is always executed before leaving the try statement, whether an exception has occurred or not. When an exception has occurred in the try clause and has not been handled by an except clause (or it has occurred in a except or else clause), it is re-raised after the finally clause has been executed. The finally clause is also executed “on the way out” when any other clause of the try statement is left via a break, continue or return statement. 

[https://docs.python.org/2/tutorial/errors.html#defining-clean-up-actions][1]
[https://docs.python.org/2/reference/compound_stmts.html#the-try-statement][2]


  [1]: https://docs.python.org/2/tutorial/errors.html#defining-clean-up-actions
  [2]: https://docs.python.org/2/reference/compound_stmts.html#the-try-statement

=== [102] of [1277] ============================= id=[1179] ==
Q:  What does this exception mean?

<pre>

Traceback (most recent call last):
  File "/trapit/elzar/356c6322-240f-11e5-a7ec-12ee69de7766/.virt/local/lib/python2.7/site-packages/elzar/wsgi.py", line 150, in handled
    ret = app(environ, start_response)
  File "/trapit/elzar/356c6322-240f-11e5-a7ec-12ee69de7766/.virt/local/lib/python2.7/site-packages/elzar/wsgi.py", line 212, in controlled
    return app(environ, start_response)
  File "/trapit/elzar/356c6322-240f-11e5-a7ec-12ee69de7766/.virt/local/lib/python2.7/site-packages/elzar/wsgi.py", line 228, in database_ized
    return app(environ, start_response)
  File "/usr/lib/python2.7/contextlib.py", line 35, in __exit__
    self.gen.throw(type, value, traceback)
  File "/trapit/elzar/356c6322-240f-11e5-a7ec-12ee69de7766/.virt/local/lib/python2.7/site-packages/mom/db.py", line 253, in safe_session
    "select pg_advisory_unlock_shared(%s);" % lock_id)
  File "/trapit/elzar/356c6322-240f-11e5-a7ec-12ee69de7766/.virt/local/lib/python2.7/site-packages/sqlalchemy/orm/session.py", line 934, in execute
    clause, params or {})
  File "/trapit/elzar/356c6322-240f-11e5-a7ec-12ee69de7766/.virt/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 662, in execute
    params)
  File "/trapit/elzar/356c6322-240f-11e5-a7ec-12ee69de7766/.virt/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 761, in _execute_clauseelement
    compiled_sql, distilled_params
  File "/trapit/elzar/356c6322-240f-11e5-a7ec-12ee69de7766/.virt/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 874, in _execute_context
    context)
  File "/trapit/elzar/356c6322-240f-11e5-a7ec-12ee69de7766/.virt/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 1024, in _handle_dbapi_exception
    exc_info
  File "/trapit/elzar/356c6322-240f-11e5-a7ec-12ee69de7766/.virt/local/lib/python2.7/site-packages/sqlalchemy/util/compat.py", line 195, in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb)
  File "/trapit/elzar/356c6322-240f-11e5-a7ec-12ee69de7766/.virt/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 867, in _execute_context
    context)
  File "/trapit/elzar/356c6322-240f-11e5-a7ec-12ee69de7766/.virt/local/lib/python2.7/site-packages/sqlalchemy/engine/default.py", line 324, in do_execute
    cursor.execute(statement, parameters)
InternalError: (InternalError) current transaction is aborted, commands ignored until end of transaction block
 'select pg_advisory_unlock_shared(42);' {}

</pre>
questiontag_set : ['trapit']
datetime_added  =[2015-07-06 20:10:02.851275+00:00]
datetime_updated=[2015-07-16 13:53:54.900244+00:00]
---------------------------------------------- id=[606] --
A:
Per Luke, this usually just means that there was an error in the SQL, and the real issue got lost and replaced with this exception.

=== [103] of [1277] ============================= id=[1178] ==
Q:  [http://hashrocket.com/blog/posts/faster-json-generation-with-postgresql][1]


  [1]: http://hashrocket.com/blog/posts/faster-json-generation-with-postgresql
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-07-06 17:58:55.823177+00:00]
datetime_updated=[2015-07-06 17:58:55.823207+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [104] of [1277] ============================= id=[1177] ==
Q:  [http://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048][1]


  [1]: http://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048
questiontag_set : ['css']
datetime_added  =[2015-07-06 17:57:36.019446+00:00]
datetime_updated=[2015-07-06 17:57:36.019478+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [105] of [1277] ============================= id=[1176] ==
Q:  What does `git log --decorate` do?
questiontag_set : ['git']
datetime_added  =[2015-07-06 16:17:00.104662+00:00]
datetime_updated=[2015-07-06 16:17:00.104692+00:00]
---------------------------------------------- id=[605] --
A:
It shows the branches associated with each commit.

>       --no-decorate, --decorate[=short|full|no]
           Print out the ref names of any commits that are shown. If short is specified, the ref name prefixes refs/heads/, refs/tags/ and refs/remotes/ will not be printed. If full is specified, the full ref name (including prefix) will be
           printed. The default option is short.

=== [106] of [1277] ============================= id=[1175] ==
Q:  [http://linux.slashdot.org/story/15/06/30/0058243/interviews-linus-torvalds-answers-your-question][1]


  [1]: http://linux.slashdot.org/story/15/06/30/0058243/interviews-linus-torvalds-answers-your-question
questiontag_set : ['web pages to review']
datetime_added  =[2015-07-06 14:32:08.157212+00:00]
datetime_updated=[2015-07-06 14:32:08.157245+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [107] of [1277] ============================= id=[1174] ==
Q:  [http://www.surplusgizmos.com/][1] - 5797 NW Cornelius Pass Road, Hillsboro Oregon, 97124


  [1]: http://www.surplusgizmos.com/
questiontag_set : ['portland']
datetime_added  =[2015-07-06 13:37:10.036494+00:00]
datetime_updated=[2015-07-06 13:37:10.036526+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [108] of [1277] ============================= id=[1173] ==
Q:  What are the 4 ways to add CSS to HTML?
questiontag_set : ['html', 'css']
datetime_added  =[2015-07-04 19:16:37.070744+00:00]
datetime_updated=[2015-07-04 19:16:37.070782+00:00]
---------------------------------------------- id=[604] --
A:
1. embed CSS into HTML with `< style>` tag, e.g.,
2. add inline CSS to HTML tags
3. link to a separate CSS file
4. import a css file from within CSS

**Embedding example:**

    <style type="text/css">
        .myclass {
        color: red;
        }
    </style>
    <p class="myclass">this text is red</p>
[http://jsfiddle.net/rbednark/8ybb44yy/][1]


**Inline CSS example:**

    <p style="color:red;">this is red text</p>

   [http://jsfiddle.net/rbednark/e6xaxudx/][2] 


**Link to CSS file example:**

    <link rel="stylesheet" type="text/css" href="mystyles.css" media="screen" />



[http://matthewjamestaylor.com/blog/adding-css-to-html-with-link-embed-inline-and-import][3]


  [1]: http://jsfiddle.net/rbednark/8ybb44yy/
  [2]: http://jsfiddle.net/rbednark/e6xaxudx/
  [3]: http://matthewjamestaylor.com/blog/adding-css-to-html-with-link-embed-inline-and-import

=== [109] of [1277] ============================= id=[1172] ==
Q:  What is an example of a class selector in CSS?
questiontag_set : ['html', 'css']
datetime_added  =[2015-07-04 19:07:27.614077+00:00]
datetime_updated=[2015-07-04 19:07:27.614111+00:00]
---------------------------------------------- id=[603] --
A:
    <p class="myclass">this text is red</p>

    <style type="text/css">
    .myclass {
        color: red;
    }
    </style>

Syntax: `<element class="classname">`


- jsfiddle example: [http://jsfiddle.net/rbednark/8ybb44yy/][1]
- jsfiddle example: [http://jsfiddle.net/rbednark/uwy1uL8v/][2]
- definition: [http://www.w3schools.com/tags/att_global_class.asp][3]


  [1]: http://jsfiddle.net/rbednark/8ybb44yy/
  [2]: http://jsfiddle.net/rbednark/uwy1uL8v/
  [3]: http://www.w3schools.com/tags/att_global_class.asp

=== [110] of [1277] ============================= id=[1171] ==
Q:  What is a `CSS selector`?
questiontag_set : ['css']
datetime_added  =[2015-07-04 18:39:57.330335+00:00]
datetime_updated=[2015-07-04 18:39:57.330379+00:00]
---------------------------------------------- id=[602] --
A:
>A CSS selector is a pattern rule that matches style rules to a specific element (or elements). The selector begins a rule set and precedes definitions of how the element(s) should look.

[https://developer.mozilla.org/en-US/docs/Glossary/CSS_Selector][1]


  [1]: https://developer.mozilla.org/en-US/docs/Glossary/CSS_Selector

=== [111] of [1277] ============================= id=[1170] ==
Q:  [https://developer.mozilla.org/en-US/docs/Glossary/CSS_Selector][1]


  [1]: https://developer.mozilla.org/en-US/docs/Glossary/CSS_Selector
questiontag_set : ['css']
datetime_added  =[2015-07-04 18:37:58.968445+00:00]
datetime_updated=[2015-07-04 18:37:58.968481+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [112] of [1277] ============================= id=[1169] ==
Q:  [https://en.wikipedia.org/wiki/Cascading_Style_Sheets][1]


  [1]: https://en.wikipedia.org/wiki/Cascading_Style_Sheets
questiontag_set : ['css']
datetime_added  =[2015-07-04 18:35:19.330921+00:00]
datetime_updated=[2015-07-04 18:35:19.330952+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [113] of [1277] ============================= id=[1168] ==
Q:  How do you select all elements in a CSS selector?
questiontag_set : ['css']
datetime_added  =[2015-07-04 18:31:23.055918+00:00]
datetime_updated=[2015-07-04 18:31:23.055953+00:00]
---------------------------------------------- id=[601] --
A:
`*` (asterisk)

e.g.,

    * {
     margin: 0;
     padding: 0;
     color: red;
    }

[http://jsfiddle.net/rbednark/njm5mfgn/][1]


  [1]: http://jsfiddle.net/rbednark/njm5mfgn/


=== [114] of [1277] ============================= id=[1167] ==
Q:  What is the syntax for a comment in CSS?
questiontag_set : ['css']
datetime_added  =[2015-07-04 18:29:54.777320+00:00]
datetime_updated=[2015-07-04 18:29:54.777382+00:00]
---------------------------------------------- id=[600] --
A:
/* this is a CSS comment */

=== [115] of [1277] ============================= id=[1166] ==
Q:  Luke mentioned this Redis error that looks like an encoding issue but is really just an inability to talk to the Redis server:

Per Luke in Flowdock 1:45pm 7/2/15: 
> the python redis library buries
> the exception. it's not an encoding bug in the code. it is an encoding
> bug in redis-py exception handling it just can't talk to the redis
> server and it screws itself up trying to format an error message with
> binary data in it. real issue: tiles redis can't snapshot 
> probably because it is getting too big. we need to issue it that
> command to accept writes even if it can't snapshot

    Exception KeyError: KeyError(20875376,) in <module 'threading' from '/usr/lib/python2.7/threading.pyc'> ignored
    Traceback (most recent call last):
      File "/trapit/rosecity/032c8a68-0e4d-11e5-b7c8-12ee69de7766/.virt/bin/penrose", line 9, in <module>
        load_entry_point('penrose==0.0.8', 'console_scripts', 'penrose')()
      File "/trapit/rosecity/032c8a68-0e4d-11e5-b7c8-12ee69de7766/.virt/local/lib/python2.7/site-packages/penrose/cli.py", line 113, in run
        getattr(cli, cmd.replace('-', '_'))()
      File "/trapit/rosecity/032c8a68-0e4d-11e5-b7c8-12ee69de7766/.virt/local/lib/python2.7/site-packages/penrose/cli.py", line 85, in intake_tiles
        mosaic.write_tiles()
      File "/trapit/rosecity/032c8a68-0e4d-11e5-b7c8-12ee69de7766/.virt/local/lib/python2.7/site-packages/penrose/mosaic.py", line 352, in write_tiles
        self.write_tiles_for_fact(header, fact)
      File "/trapit/rosecity/032c8a68-0e4d-11e5-b7c8-12ee69de7766/.virt/local/lib/python2.7/site-packages/penrose/mosaic.py", line 347, in write_tiles_for_fact
        pipeline.execute()
      File "/trapit/rosecity/032c8a68-0e4d-11e5-b7c8-12ee69de7766/.virt/local/lib/python2.7/site-packages/redis/client.py", line 2578, in execute
        return execute(conn, stack, raise_on_error)
      File "/trapit/rosecity/032c8a68-0e4d-11e5-b7c8-12ee69de7766/.virt/local/lib/python2.7/site-packages/redis/client.py", line 2465, in _execute_transaction
        self.annotate_exception(ex, i + 1, command[0])
      File "/trapit/rosecity/032c8a68-0e4d-11e5-b7c8-12ee69de7766/.virt/local/lib/python2.7/site-packages/redis/client.py", line 2529, in annotate_exception
        cmd = unicode(' ').join(imap(unicode, command))
    UnicodeDecodeError: 'ascii' codec can't decode byte 0x81 in position 0: ordinal not in range(128)
    Exception KeyError: KeyError(40802416,) in <module 'threading' from '/usr/lib/python2.7/threading.pyc'> ignored
    root@rosecity-higgs-4:~# 
questiontag_set : ['redis']
datetime_added  =[2015-07-02 20:47:44.885544+00:00]
datetime_updated=[2015-07-02 20:47:44.885577+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [116] of [1277] ============================= id=[1165] ==
Q:  [https://en.wikipedia.org/wiki/False_flag][1]


  [1]: https://en.wikipedia.org/wiki/False_flag
questiontag_set : ['vocabulary']
datetime_added  =[2015-07-02 17:36:29.205590+00:00]
datetime_updated=[2015-07-02 17:36:29.205625+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [117] of [1277] ============================= id=[1164] ==
Q:  How do you bind parameters in SQLAlchemy?
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-07-01 23:30:58.351163+00:00]
datetime_updated=[2015-07-01 23:30:58.351195+00:00]
---------------------------------------------- id=[599] --
A:
Use `:my_variable` named colon format, and give the arguments to the execute() method as keyword arguments, e.g.,

    session.execute('SELECT * FROM :table', table='my_table')

>To use bind parameters with text(), always use the named colon format. Such as below, we create a text() and execute it, feeding in the bind parameters to the execute() method

- [http://docs.sqlalchemy.org/en/rel_0_8/core/tutorial.html#using-text][1]
- [http://stackoverflow.com/questions/19314342/python-sqlalchemy-pass-parameters-in-connection-execute][2]


  [1]: http://docs.sqlalchemy.org/en/rel_0_8/core/tutorial.html#using-text
  [2]: http://stackoverflow.com/questions/19314342/python-sqlalchemy-pass-parameters-in-connection-execute

=== [118] of [1277] ============================= id=[1163] ==
Q:  SQL injection and SQLAlchemy:

- don't do string interpolation

- [https://groups.google.com/forum/#!topic/sqlalchemy/RLtezuLDos4][1]
- [http://www.quora.com/Do-I-need-to-worry-about-SQL-injection-if-Im-using-SQLAlchemy-with-Pyramid][2]
- [http://stackoverflow.com/questions/17972020/how-to-execute-raw-sql-in-sqlalchemy-flask-app][3]
- [http://stackoverflow.com/questions/23206562/sqlalchemy-executing-raw-sql-with-parameter-bindings][4]


  [1]: https://groups.google.com/forum/#!topic/sqlalchemy/RLtezuLDos4
  [2]: http://www.quora.com/Do-I-need-to-worry-about-SQL-injection-if-Im-using-SQLAlchemy-with-Pyramid
  [3]: http://stackoverflow.com/questions/17972020/how-to-execute-raw-sql-in-sqlalchemy-flask-app
  [4]: http://stackoverflow.com/questions/23206562/sqlalchemy-executing-raw-sql-with-parameter-bindings
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-07-01 23:01:13.555089+00:00]
datetime_updated=[2015-07-02 13:06:14.388975+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [119] of [1277] ============================= id=[1162] ==
Q:  How to work with psql removing comments from SQL queries?


1. create foo.sql file and then use `\i foo.sql`

[http://stackoverflow.com/questions/27570846/psql-how-to-not-remove-comments-for-external-editor][1]

  [1]: http://stackoverflow.com/questions/27570846/psql-how-to-not-remove-comments-for-external-editor
questiontag_set : ['psql']
datetime_added  =[2015-07-01 19:35:00.599403+00:00]
datetime_updated=[2015-07-01 19:35:00.599434+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [120] of [1277] ============================= id=[1161] ==
Q:  [https://en.wikipedia.org/wiki/List_of_cognitive_biases][1]


  [1]: https://en.wikipedia.org/wiki/List_of_cognitive_biases
questiontag_set : ['psychology']
datetime_added  =[2015-07-01 19:09:32.829781+00:00]
datetime_updated=[2015-07-01 19:09:32.829811+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [121] of [1277] ============================= id=[1160] ==
Q:  [https://en.wikipedia.org/wiki/Chronostasis][1]


  [1]: https://en.wikipedia.org/wiki/Chronostasis
questiontag_set : ['psychology', 'vocabulary']
datetime_added  =[2015-07-01 19:08:10.727139+00:00]
datetime_updated=[2015-07-01 19:08:10.727170+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [122] of [1277] ============================= id=[1159] ==
Q:  Where in the tests to we check for the number of db queries?
questiontag_set : ['trapit']
datetime_added  =[2015-07-01 18:53:17.226558+00:00]
datetime_updated=[2015-07-01 18:53:17.226591+00:00]
---------------------------------------------- id=[598] --
A:
In mom.tests.\__init__.DBTestCase.assertDBQueries():

    def assertDBQueries(self, number):
        queries = len(collector.statements) - self.before
        self.assertEquals(
            queries, number,
            "executed %d queries, expected %d:\n\n%s" % (
                queries, number,
                '\n'.join(str(i) for i in collector.statements[self.before:])))

=== [123] of [1277] ============================= id=[1158] ==
Q:   psycopg2 mogrify() method for showing what will go to db: [http://stackoverflow.com/questions/4113910/python-psycogp2-inserting-into-postgresql-help][1]
  
[mentioned by Luke 7/1/15 for SQL injection prevention and parameter binding]

  [1]: http://stackoverflow.com/questions/4113910/python-psycogp2-inserting-into-postgresql-help
questiontag_set : ['psycopg2']
datetime_added  =[2015-07-01 18:48:46.379656+00:00]
datetime_updated=[2015-07-01 18:48:46.379688+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [124] of [1277] ============================= id=[1157] ==
Q:  Preventing SQL injection in Python and PostgreSQL:

- [http://stackoverflow.com/questions/1973/what-is-the-best-way-to-avoid-sql-injection-attacks][1]
- [http://stackoverflow.com/questions/4113910/python-psycogp2-inserting-into-postgresql-help][2]


  [1]: http://stackoverflow.com/questions/1973/what-is-the-best-way-to-avoid-sql-injection-attacks
  [2]: http://stackoverflow.com/questions/4113910/python-psycogp2-inserting-into-postgresql-help
questiontag_set : ['sql', 'postgresql', 'psycopg2']
datetime_added  =[2015-07-01 18:46:00.004060+00:00]
datetime_updated=[2015-07-01 18:46:00.004092+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [125] of [1277] ============================= id=[1156] ==
Q:  - [http://www.postgresql.org/docs/devel/static/sql-insert.html][1]  (see the ON CONFLICT section for UPSERT functionality)
- [https://wiki.postgresql.org/wiki/UPSERT][2]
- [https://en.wikipedia.org/wiki/Merge_(SQL)][3]
- [http://stackoverflow.com/questions/17267417/how-do-i-do-an-upsert-merge-insert-on-duplicate-update-in-postgresql][4]


  [1]: http://www.postgresql.org/docs/devel/static/sql-insert.html
  [2]: https://wiki.postgresql.org/wiki/UPSERT
  [3]: https://en.wikipedia.org/wiki/Merge_%28SQL%29
  [4]: http://stackoverflow.com/questions/17267417/how-do-i-do-an-upsert-merge-insert-on-duplicate-update-in-postgresql
questiontag_set : ['sql', 'postgresql']
datetime_added  =[2015-07-01 18:28:27.307720+00:00]
datetime_updated=[2015-07-01 18:28:27.307752+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [126] of [1277] ============================= id=[1155] ==
Q:  Favorite Yiddish terms:

 - BUBBALA: A term of endearment, darling. 
 - CHUTZPAH: Nerve; gall, as in a person who kills her parents and asks for mercy because she is an orphan. 
 - KIBITZ: To offer comments which are often unwanted during a game, to tease or joke around. A kibitzer gives unasked for advice. 
 - KLUTZ: An awkward, uncoordinated person. 
 - KVETCH: To annoy or to be an annoying person, to complain. 
 - MAZEL TOV: Good luck, usually said as a statement of support or congratulations. 
 - MENSCH: A person of character. An individual of recognized worth because of noble values or actions. 
 - MESHUGGE or MESHUGGINA: Crazy, refers to a more chronic disturbance.
 - NOSH: To snack. NOSHERYE refers to food. 
 - OY-YOY-YOY: An exclamation of sorrow and lamentation. 
 - OY VEY: "Oh, how terrible things are". OH VEZ MEAR means "Oh, woe is me". 
 - PUTZ: A vulgarism for penis but most usually used as term of contempt for a fool, or an easy mark. 
 - SCHMALTZ: Literally chicken fat. Usually refers to overly emotional and sentimental behavior. 
 - SCHMUCK: A vulgarism for penis, strong putdown for a jerk, a detestable person. 
 - SHLEMIEL: A dummy; someone who is taken advantage of, a born loser. 
 - SHLEP: To carry or to move about. Can refer to a person, a "shlepper," who is unkempt and has no ambition. 
 - SHLIMAZL: A chronically unlucky person, a born loser, when a shlimazl sells umbrella the sun comes out. 
 - shlimazel
Someone with constant bad luck. When the shlemiel spills his soup, he probably spills it on the shlimazel. Fans of the TV sitcom “Laverne and Shirley” remember these two words from the Yiddish-American hopscotch chant that opened each show.
 - schlock
Cheap, shoddy, or inferior, as in, “I don’t know why I bought this schlocky souvenir.”
 - SHMEER: To spread as in to "shmeer" butter on bread. Can also mean to bribe and can refer to the "whole package", as in I'll accept the whole shmeer. 
 - SHMOOZ: To hang out with, a friendly gossipy talk. 
 - SHMUTZIK: Dirt. 
 - SHNOZ: A Nose. Jimmy Durante was known as a the great shnoz. 
 - SHTETL: A Jewish ghetto village. 
 - SHTIK: A stick or thing. Often refers to an individual's unique way of presenting themselves, as in "She is doing her shtik." 
 - SHTUNK: A stinker, a nasty person or a scandalous mess. 
 - SHTUP: An expression for sexual intercourse, to "screw." 
 - SPIEL: To play, as in to play a game. 
 - TUCHES: Backside, ass, "tuches lecker" means ass kisser, one who shamelessly curries favor with superiors. 
 - VER CLEMPT: All choked up. 
 - YENTA: A busybody, usually refers to an older woman. 
 - 

[http://www.dailywritingtips.com/the-yiddish-handbook-40-words-you-should-know/][1]
[http://www.sbjf.org/sbjco/schmaltz/yiddish_phrases.htm][2]


  [1]: http://www.dailywritingtips.com/the-yiddish-handbook-40-words-you-should-know/
  [2]: http://www.sbjf.org/sbjco/schmaltz/yiddish_phrases.htm
questiontag_set : ['vocabulary']
datetime_added  =[2015-07-01 17:12:30.880339+00:00]
datetime_updated=[2015-07-01 17:12:30.880370+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [127] of [1277] ============================= id=[1154] ==
Q:  [https://en.wikipedia.org/wiki/Defensive_programming][1]


  [1]: https://en.wikipedia.org/wiki/Defensive_programming
questiontag_set : ['computer science']
datetime_added  =[2015-07-01 16:16:55.627079+00:00]
datetime_updated=[2015-07-01 16:16:55.627111+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [128] of [1277] ============================= id=[1153] ==
Q:  What is another way of writing LEFT JOIN and RIGHT JOIN?
questiontag_set : ['sql']
datetime_added  =[2015-07-01 14:30:34.130279+00:00]
datetime_updated=[2015-07-01 14:30:34.130320+00:00]
---------------------------------------------- id=[597] --
A:
LEFT OUTER JOIN  
RIGHT OUTER JOIN

>left outer join (or simply left join)
[https://en.wikipedia.org/wiki/Join_(SQL)#Left_outer_join][1]


  [1]: https://en.wikipedia.org/wiki/Join_%28SQL%29#Left_outer_join

=== [129] of [1277] ============================= id=[1152] ==
Q:  How does an OUTER JOIN differ from an INNER JOIN?
questiontag_set : ['sql']
datetime_added  =[2015-07-01 14:29:49.335309+00:00]
datetime_updated=[2015-07-01 14:29:49.335359+00:00]
---------------------------------------------- id=[596] --
A:
An OUTER JOIN also contains rows where there is no match.

Note these equivalencies:  

LEFT JOIN = LEFT OUTER JOIN  
RIGHT JOIN = RIGHT OUTER JOIN

=== [130] of [1277] ============================= id=[1151] ==
Q:  Is "CREATE TABLE ... AS SELECT ..." available in sqlite?
questiontag_set : ['sqlite3']
datetime_added  =[2015-07-01 13:57:39.638757+00:00]
datetime_updated=[2015-07-01 13:57:39.638798+00:00]
---------------------------------------------- id=[595] --
A:
Yes.

[https://www.sqlite.org/lang_createtable.html][1]


  [1]: https://www.sqlite.org/lang_createtable.html

=== [131] of [1277] ============================= id=[1150] ==
Q:  In SQLAlchemy, how do you check to see which db engine it is using?
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-07-01 00:21:21.306516+00:00]
datetime_updated=[2015-07-01 00:21:21.306557+00:00]
---------------------------------------------- id=[594] --
A:
    if session.bind.engine.dialect.name == 'postgresql':

=== [132] of [1277] ============================= id=[1149] ==
Q:  What are the aggregate functions in postgres and in sqlite that concatenate all the given values?
questiontag_set : ['sqlite3', 'postgresql']
datetime_added  =[2015-07-01 00:05:56.501885+00:00]
datetime_updated=[2015-07-01 00:05:56.501917+00:00]
---------------------------------------------- id=[593] --
A:
postgres:

    string_agg(some_column, ',')

sqlite:

    group_concat(some_column, ',')

- [https://www.sqlite.org/lang_aggfunc.html][1]
- [http://www.postgresql.org/docs/9.3/static/functions-aggregate.html][2]


  [1]: https://www.sqlite.org/lang_aggfunc.html
  [2]: http://www.postgresql.org/docs/9.3/static/functions-aggregate.html

=== [133] of [1277] ============================= id=[1148] ==
Q:  What is an alternative way to GROUP BY and listing all the columns selected to eliminate redundant rows in a query?
questiontag_set : ['postgresql', 'sql']
datetime_added  =[2015-06-30 23:43:28.137420+00:00]
datetime_updated=[2015-06-30 23:43:28.137452+00:00]
---------------------------------------------- id=[592] --
A:
SELECT DISTINCT

=== [134] of [1277] ============================= id=[1147] ==
Q:  In psql, if a multiple commands are issued, how many roundtrips are made to the database?
questiontag_set : ['postgresql']
datetime_added  =[2015-06-30 23:01:53.656999+00:00]
datetime_updated=[2015-06-30 23:01:53.657030+00:00]
---------------------------------------------- id=[591] --
A:
One roundtrip is made for each statement.

(I don't 100% trust this, and would like to get a more definitive source)

[http://stackoverflow.com/questions/19785417/multiple-selects-in-psycopg2-or-sqlalchemy#comment29436294_19785417][1]


  [1]: http://stackoverflow.com/questions/19785417/multiple-selects-in-psycopg2-or-sqlalchemy#comment29436294_19785417

=== [135] of [1277] ============================= id=[1146] ==
Q:  Can you execute multiple statements in sqlalchemy's execute() ?
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-06-30 22:59:10.531240+00:00]
datetime_updated=[2015-06-30 22:59:10.531282+00:00]
---------------------------------------------- id=[590] --
A:
You can in postgres, but only the rows from the last statement are returned.  In sqlite you cannot, because it raises this exception:

    Warning: You can only execute one statement at a time.

See my script: learn_sqlalchemy_multiple_statements_in_execute.py

=== [136] of [1277] ============================= id=[1145] ==
Q:  - [https://en.wikipedia.org/wiki/W._Edwards_Deming#Key_principles][1]
- [https://en.wikipedia.org/wiki/W._Edwards_Deming#The_Deming_System_of_Profound_Knowledge][2]
- [https://en.wikipedia.org/wiki/W._Edwards_Deming#Seven_Deadly_Diseases][3]


  [1]: https://en.wikipedia.org/wiki/W._Edwards_Deming#Key_principles
  [2]: https://en.wikipedia.org/wiki/W._Edwards_Deming#The_Deming_System_of_Profound_Knowledge
  [3]: https://en.wikipedia.org/wiki/W._Edwards_Deming#Seven_Deadly_Diseases
questiontag_set : ['management']
datetime_added  =[2015-06-30 21:12:35.356892+00:00]
datetime_updated=[2015-06-30 21:12:35.356935+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [137] of [1277] ============================= id=[1144] ==
Q:  [https://deming.org/theman/theories/fourteenpoints][1]


  [1]: https://deming.org/theman/theories/fourteenpoints
questiontag_set : ['management']
datetime_added  =[2015-06-30 21:05:25.842648+00:00]
datetime_updated=[2015-06-30 21:05:25.842680+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [138] of [1277] ============================= id=[1143] ==
Q:  - [https://en.wikipedia.org/wiki/Inversion_of_control][1]
- [http://stackoverflow.com/questions/3058/what-is-inversion-of-control][2]


  [1]: https://en.wikipedia.org/wiki/Inversion_of_control
  [2]: http://stackoverflow.com/questions/3058/what-is-inversion-of-control
questiontag_set : ['software patterns', 'software engineering']
datetime_added  =[2015-06-30 20:10:06.683630+00:00]
datetime_updated=[2015-06-30 20:11:31.600203+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [139] of [1277] ============================= id=[1142] ==
Q:  In the Python interpreter or in the pdb debugger, how do you print a multi-line string and have it show the newlines as actual newlines instead of \\n characters?
questiontag_set : ['python']
datetime_added  =[2015-06-30 19:51:53.787190+00:00]
datetime_updated=[2015-06-30 19:51:53.787231+00:00]
---------------------------------------------- id=[589] --
A:
use the print() command, e.g.,

    my_str = '''
    one
    two'''
    print(my_str)

=== [140] of [1277] ============================= id=[1141] ==
Q:  - [http://www.quora.com/What-are-the-major-technical-differences-between-Apples-OS-X-and-Linux][1]



  [1]: http://www.quora.com/What-are-the-major-technical-differences-between-Apples-OS-X-and-Linux

questiontag_set : ['unix', 'osx (OSX) (Mac)']
datetime_added  =[2015-06-30 16:22:33.197054+00:00]
datetime_updated=[2015-06-30 16:25:35.217410+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [141] of [1277] ============================= id=[1140] ==
Q:  - [http://www.quora.com/What-are-some-Linux-command-line-tools-every-computer-security-researcher-should-know][1]
- [http://www.quora.com/What-are-the-first-10-command-line-tools-any-Linux-sysadmin-should-know][2]
- [http://www.quora.com/What-are-the-most-basic-Linux-commands-every-developer-should-know][3]


  [1]: http://www.quora.com/What-are-some-Linux-command-line-tools-every-computer-security-researcher-should-know
  [2]: http://www.quora.com/What-are-the-first-10-command-line-tools-any-Linux-sysadmin-should-know
  [3]: http://www.quora.com/What-are-the-most-basic-Linux-commands-every-developer-should-know
questiontag_set : ['unix']
datetime_added  =[2015-06-30 16:21:56.983861+00:00]
datetime_updated=[2015-06-30 16:25:58.156214+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [142] of [1277] ============================= id=[1139] ==
Q:  discrete mathematics: [https://en.wikipedia.org/wiki/Discrete_mathematics][1]


  [1]: https://en.wikipedia.org/wiki/Discrete_mathematics
questiontag_set : ['mathematics', 'computer science']
datetime_added  =[2015-06-30 14:24:39.531625+00:00]
datetime_updated=[2015-06-30 14:24:39.531657+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [143] of [1277] ============================= id=[1138] ==
Q:  tuple: [https://en.wikipedia.org/wiki/Tuple][1]


  [1]: https://en.wikipedia.org/wiki/Tuple
questiontag_set : ['mathematics', 'computer science']
datetime_added  =[2015-06-30 14:22:00.785661+00:00]
datetime_updated=[2015-06-30 14:22:00.785703+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [144] of [1277] ============================= id=[1137] ==
Q:  What does a 405 http return code in elzar indicate?
questiontag_set : ['trapit_elzar']
datetime_added  =[2015-06-30 13:33:37.945118+00:00]
datetime_updated=[2015-06-30 13:33:37.945176+00:00]
---------------------------------------------- id=[588] --
A:
It is a response from Selector indicating that the method supplied (e.g., GET, PUT, POST) is not specified for this endpoint in the api.urls file.

=== [145] of [1277] ============================= id=[1136] ==
Q:  Issues with gists:

- not editable by others
- not easily discoverable (and maybe not very categorizable)
- tied to the user's account; if user leaves company, they could delete the gists
- not easily viewable at the command-line (e.g., in a file in a repo)
questiontag_set : ['git']
datetime_added  =[2015-06-29 18:31:30.022912+00:00]
datetime_updated=[2015-06-29 18:31:30.022952+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [146] of [1277] ============================= id=[1135] ==
Q:  [https://cloud.google.com/tools/cloud-repositories/][1] - Google Cloud Source Repositories for hosting git repositories


  [1]: https://cloud.google.com/tools/cloud-repositories/
questiontag_set : ['web services']
datetime_added  =[2015-06-29 17:09:38.910074+00:00]
datetime_updated=[2015-06-29 17:09:38.910107+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [147] of [1277] ============================= id=[1134] ==
Q:  [http://www.quora.com/Why-is-C++-faster-than-Java-and-other-object-oriented-languages][1]


  [1]: http://www.quora.com/Why-is-C++-faster-than-Java-and-other-object-oriented-languages
questiontag_set : ['computer science']
datetime_added  =[2015-06-29 16:26:56.184760+00:00]
datetime_updated=[2015-06-29 16:26:56.184816+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [148] of [1277] ============================= id=[1133] ==
Q:  What is a solution to providing a range of values to Django's assertNumQueries() method instead of a single number?
questiontag_set : ['django', 'python']
datetime_added  =[2015-06-28 00:04:07.571177+00:00]
datetime_updated=[2015-06-28 00:04:07.571208+00:00]
---------------------------------------------- id=[587] --
A:
    class FuzzyInt(int):
        '''
        Django has 'assertNumQueries'. Here is how to do fuzzy testing
        with this function, using a subclass of int.  To use it, e.g.,
            with self.assertNumQueries(FuzzyInt(5,8)):
        '''
        def __new__(cls, lowest, highest):
            obj = super(FuzzyInt, cls).__new__(cls, highest)
            obj.lowest = lowest
            obj.highest = highest
            return obj
    
        def __eq__(self, other):
            return other >= self.lowest and other <= self.highest
    
    assert (FuzzyInt(1,5) == 3) == True
    assert (FuzzyInt(1,5) == 6) == False

=== [149] of [1277] ============================= id=[1132] ==
Q:  [http://www.quora.com/What-are-the-current-fads-in-computer-science-IT-and-software-engineering][1]


  [1]: http://www.quora.com/What-are-the-current-fads-in-computer-science-IT-and-software-engineering
questiontag_set : ['software engineering']
datetime_added  =[2015-06-27 23:28:50.791217+00:00]
datetime_updated=[2015-06-27 23:28:50.791258+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [150] of [1277] ============================= id=[1131] ==
Q:  [http://www.quora.com/What-are-some-great-questions-testing-knowledge-for-someone-new-to-Python][1]


  [1]: http://www.quora.com/What-are-some-great-questions-testing-knowledge-for-someone-new-to-Python
questiontag_set : ['interviewing', 'python']
datetime_added  =[2015-06-27 22:37:12.728225+00:00]
datetime_updated=[2015-06-27 22:38:21.714259+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [151] of [1277] ============================= id=[1130] ==
Q:  How do you mock the sending of an email to capture the message in an "outbox"?
questiontag_set : ['flexmock']
datetime_added  =[2015-06-25 23:28:43.754688+00:00]
datetime_updated=[2015-06-25 23:28:43.754730+00:00]
---------------------------------------------- id=[586] --
A:
       def mock_emailing(self, outbox):
            def fake_ses_response():
                return {'SendRawEmailResponse':
                        {'SendRawEmailResult':
                         {'MessageId': uuid.uuid4().hex}}}
    
            def send_raw_email_mock(outbox, **kwargs):
                outbox.append(kwargs['raw_message'])
                return fake_ses_response()
    
            mock_ses = flexmock(send_raw_email=None)
            (flexmock(TrapMailer)
             .should_receive('connect')
             .replace_with(lambda: mock_ses))
            (flexmock(mock_ses)
             .should_receive('send_raw_email')
             .replace_with(lambda **kw: send_raw_email_mock(outbox=outbox, **kw)))

    def test_emailing(self):
        self.outbox = []
        self.mock_emailing(outbox=self.outbox)

        len_before = len(self.outbox)
        resp = api.post_password_reset(email=user_blank.email)
        self.assertEqual(len(self.outbox), len_before + 1)
        msg = self.outbox[-1]

[search for `mock_emailing` in elzar]

=== [152] of [1277] ============================= id=[1129] ==
Q:  SNI - Sever Name Indication [https://en.wikipedia.org/wiki/Server_Name_Indication][1]


  [1]: https://en.wikipedia.org/wiki/Server_Name_Indication
questiontag_set : ['networking']
datetime_added  =[2015-06-25 21:10:12.446520+00:00]
datetime_updated=[2015-06-25 21:10:12.446553+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [153] of [1277] ============================= id=[1128] ==
Q:  [http://www.quora.com/What-are-some-books-for-understanding-business-fundamentals-and-setting-up-my-business-to-succeed-as-recommended-by-successful-serial-entrepreneurs][1]


  [1]: http://www.quora.com/What-are-some-books-for-understanding-business-fundamentals-and-setting-up-my-business-to-succeed-as-recommended-by-successful-serial-entrepreneurs
questiontag_set : ['books']
datetime_added  =[2015-06-25 21:05:01.804272+00:00]
datetime_updated=[2015-06-25 21:05:01.804303+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [154] of [1277] ============================= id=[1127] ==
Q:  How to check if any commits need any associated configuration file changes?
questiontag_set : ['trapit']
datetime_added  =[2015-06-25 03:17:37.386167+00:00]
datetime_updated=[2015-06-25 03:17:37.386201+00:00]
---------------------------------------------- id=[584] --
A:
    git diff OLDVERSION..NEWVERSION | grep env

=== [155] of [1277] ============================= id=[1126] ==
Q:  To run zulu on a Higgs ez-* server:

1. login to an ez-* server
2. activate the elzar virt
3. zulu --zmq='10.0.1.77:7789' tail nginx

I created a `zulu.run` alias for it on ez-[4-8]
questiontag_set : ['trapit']
datetime_added  =[2015-06-24 14:15:25.072168+00:00]
datetime_updated=[2015-06-29 04:56:11.597606+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [156] of [1277] ============================= id=[1125] ==
Q:      Luke: this is what I use to hook pg up to emacs 
    ssh -L 5432:10.0.1.94:5432 larno@sg1
    David: @luke is sg1 in your example your local machine?
    Luke: no, sorry, it's an alias to staging-1
    that's how I map a local port to postgres on staging-1
    then I connect emacs to the local port and run sql
    Luke Jun 23, 2015 8:13 PM:
    ssh -L LOCALPORT:remotip:REMOTEPORT user@remote

[per Luke in Flowdock 6/23/15]

questiontag_set : ['unix']
datetime_added  =[2015-06-24 14:09:45.773115+00:00]
datetime_updated=[2015-06-24 14:09:45.773175+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [157] of [1277] ============================= id=[1124] ==
Q:  Why do we pin morbo?
questiontag_set : ['trapit']
datetime_added  =[2015-06-23 21:53:48.925938+00:00]
datetime_updated=[2015-06-23 21:53:48.925970+00:00]
---------------------------------------------- id=[583] --
A:
Because there is another package named morbo, so we pin it to make it point to ours.

    $ pip search morbo
    morbo                     - A MongoDB object mapper for puny humans.

=== [158] of [1277] ============================= id=[1123] ==
Q:  What are the three different states for a file in git?
questiontag_set : ['git']
datetime_added  =[2015-06-23 21:48:03.130214+00:00]
datetime_updated=[2015-06-23 21:48:03.130244+00:00]
---------------------------------------------- id=[582] --
A:
1. committed / HEAD (commited files)
1. modifed / working directory (file that have been modified but not staged)
3. staged / index / cache / staging area (files that have been "added" but not yet committed)

[https://git-scm.com/book/en/v2/Getting-Started-Git-Basics][1]


  [1]: https://git-scm.com/book/en/v2/Getting-Started-Git-Basics

=== [159] of [1277] ============================= id=[1122] ==
Q:  In git, how do you see the differences between the last commit and all the files current modified and/or currently staged?
questiontag_set : ['git']
datetime_added  =[2015-06-23 21:40:18.431448+00:00]
datetime_updated=[2015-06-23 21:40:18.431480+00:00]
---------------------------------------------- id=[581] --
A:
git diff HEAD

=== [160] of [1277] ============================= id=[1121] ==
Q:  Why are annotations and overlay information stored in a json string rather than each in its own queueitem field?
questiontag_set : ['trapit_mom']
datetime_added  =[2015-06-23 21:27:48.615172+00:00]
datetime_updated=[2015-06-23 21:27:48.615213+00:00]
---------------------------------------------- id=[580] --
A:
This allows fields to be added to the json without having to modify queuestore.

=== [161] of [1277] ============================= id=[1120] ==
Q:  Is it ok to restart all trapit services?
questiontag_set : ['trapit']
datetime_added  =[2015-06-23 18:16:28.077696+00:00]
datetime_updated=[2015-06-23 18:16:28.077728+00:00]
---------------------------------------------- id=[579] --
A:
No, because some of the redis services don't have persistence, or might have persistence such that some workload would get lost during a restart.

=== [162] of [1277] ============================= id=[1119] ==
Q:  Portland code schools / bootcamps:

- Code Fellows
- Epicodus
- PDX Code Guild
- Portland Code School
- Tech Academy Portland
 
[http://www.bizjournals.com/portland/blog/techflash/2015/06/as-portland-seeks-7k-coders-bootcamps-arrive-to.html][1]


  [1]: http://www.bizjournals.com/portland/blog/techflash/2015/06/as-portland-seeks-7k-coders-bootcamps-arrive-to.html
questiontag_set : ['portland']
datetime_added  =[2015-06-23 17:24:01.571547+00:00]
datetime_updated=[2015-06-23 17:24:01.571579+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [163] of [1277] ============================= id=[1118] ==
Q:  If two columns are part of a primary key in postgres, does a "NOT NULL" constraint add anything?  Or without it, can one of the columns be NULL and the other not NULL so the combination for the primary key is ok?
questiontag_set : ['postgresql']
datetime_added  =[2015-06-23 14:01:57.575578+00:00]
datetime_updated=[2015-06-23 14:01:57.575610+00:00]
---------------------------------------------- id=[578] --
A:
It is not needed:

    psql# CREATE TABLE foo (
            col1 TEXT,
            col2 TEXT,
            PRIMARY KEY (col1, col2)
    );
    
    psql# INSERT INTO foo VALUES (NULL, 'Rob');
    ERROR:  23502: null value in column "col1" violates not-null constraint
    
    psql# INSERT INTO foo VALUES ('Rob', NULL);
    ERROR:  23502: null value in column "col2" violates not-null constraint



=== [164] of [1277] ============================= id=[1117] ==
Q:  What happens in elzar if you don't specially render datetime fields?
questiontag_set : ['trapit_elzar']
datetime_added  =[2015-06-22 18:52:15.378933+00:00]
datetime_updated=[2015-06-22 18:52:15.378965+00:00]
---------------------------------------------- id=[577] --
A:
wsgi has a jsonize function with a custom encoder that recognizes datetime fields and automatically encodes them using formatters.datetime_flow()

Code from wsgi:

    class CustomEncoder(json.JSONEncoder):
    
        def default(self, obj):
            if isinstance(obj, datetime):
                return fmt.datetime_float(obj)
            else:
                return super(CustomEncoder, self).default(obj)
    
    
    def jsonize(app):
        """Middleware to JSON encode responses."""
    
        def jsonized(environ, start_response):
    
            def start_response_(status, response_headers, exc_info=None):
                if 'Content-Type' not in [k for k, v in response_headers]:
                    response_headers.append(
                        ('Content-Type', 'application/json'))
                start_response(status, response_headers)
    
            response = app(environ, start_response_)
            if isinstance(response, Raw):
                return response
            else:
                query = parse_qs(environ.get('QUERY_STRING', ''))
                pretty = query.get('pretty')
                kwargs = {'cls': CustomEncoder}
                if pretty and pretty[0].lower() != 'false':
                    kwargs['indent'] = 2
                    kwargs['sort_keys'] = True
                return [json.dumps(response, **kwargs)]
    
        return jsonized

=== [165] of [1277] ============================= id=[1116] ==
Q:  What are tools to pretty-print json?
questiontag_set : ['unix']
datetime_added  =[2015-06-22 18:14:51.553468+00:00]
datetime_updated=[2015-06-22 18:14:51.553500+00:00]
---------------------------------------------- id=[576] --
A:
- jq  
- json_pp

=== [166] of [1277] ============================= id=[1115] ==
Q:  How to see character encoding being used/set by less and vim?

less: If  neither LESSCHARSET nor LESSCHARDEF is set, but any of the strings "UTF-8", "UTF8", "utf-8" or "utf8" is found in the LC_ALL, LC_TYPE or LANG environment variables, then the default character set is utf-8.  [man less]

vim: `:set encoding`  (default: "latin1" or value from $LANG)  [`:help encoding`]
                       
questiontag_set : ['unicode', 'character-encoding']
datetime_added  =[2015-06-22 13:53:10.877551+00:00]
datetime_updated=[2015-06-22 13:53:10.877583+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [167] of [1277] ============================= id=[1114] ==
Q:  Charset / character encoding detection 

- [https://en.wikipedia.org/wiki/Charset_detection][1]
- online character converter: [http://i-tools.org/charset][2]
- BOM / Byte order mark [https://en.wikipedia.org/wiki/Byte_order_mark][3]
- [http://stackoverflow.com/questions/4198804/how-to-reliably-guess-the-encoding-between-macroman-cp1252-latin1-utf-8-and][4]


  [1]: https://en.wikipedia.org/wiki/Charset_detection
  [2]: http://i-tools.org/charset
  [3]: https://en.wikipedia.org/wiki/Byte_order_mark
  [4]: http://stackoverflow.com/questions/4198804/how-to-reliably-guess-the-encoding-between-macroman-cp1252-latin1-utf-8-and
questiontag_set : ['character-encoding']
datetime_added  =[2015-06-22 07:25:51.359831+00:00]
datetime_updated=[2015-06-22 07:25:51.359862+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [168] of [1277] ============================= id=[1113] ==
Q:  Can an org-sync be done with fewer tags than the previous org-sync and it will be additive?
questiontag_set : ['trapit_mom']
datetime_added  =[2015-06-22 07:07:47.912855+00:00]
datetime_updated=[2015-06-22 07:07:47.912911+00:00]
---------------------------------------------- id=[575] --
A:
No!  The sources will be additive, but the tags will be subtractive.  I discovered this with an msft org-sync 6/22/15 where the counts before and after were:

     num_tags_all      : before=[  5,771,321] after=[  5,772,136] diff=[        815]
     num_tags_lib      : before=[     30,269] after=[     30,269] diff=[          0]
     num_tags_org      : before=[     28,656] after=[     29,471] diff=[        815]
     num_tags_other    : before=[  5,742,665] after=[  5,742,665] diff=[          0]
     num_traps_all     : before=[ 20,241,176] after=[ 20,242,700] diff=[      1,524]
     num_traps_lib     : before=[    116,222] after=[    116,222] diff=[          0]
     num_traps_org     : before=[    112,719] after=[    114,243] diff=[      1,524]
     num_traps_other   : before=[ 20,128,457] after=[ 20,128,457] diff=[          0]
     num_traptags_all  : before=[ 50,463,739] after=[ 50,187,441] diff=[   -276,298]
     num_traptags_lib  : before=[    539,711] after=[    539,711] diff=[          0]
     num_traptags_org  : before=[    282,377] after=[      6,079] diff=[   -276,298]
     num_traptags_other: before=[ 50,181,362] after=[ 50,181,362] diff=[          0]

=== [169] of [1277] ============================= id=[1112] ==
Q:  How to vacuum all databases?
questiontag_set : ['postgresql']
datetime_added  =[2015-06-20 18:17:43.967295+00:00]
datetime_updated=[2015-06-20 18:17:43.967328+00:00]
---------------------------------------------- id=[574] --
A:
    vacuumdb --all --full --verbose

(this is a command-line command, not a psql command)


=== [170] of [1277] ============================= id=[1111] ==
Q:  To view sizes of databases in Postgres:

    \l+
                                                                                     List of databases
                   Name                |    Owner     | Encoding |   Collate   |    Ctype    |  Access privileges  |  Size   | Tablespace |                Description
    -----------------------------------+--------------+----------+-------------+-------------+---------------------+---------+------------+--------------------------------------------
     atlatl                            | atlatl       | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                     | 734 MB  | pg_default |
     atlatl2                           | atlatl       | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                     | 11 MB   | pg_default |
     buddyup                           | buddyup      | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                     | 5865 kB | pg_default |
     buddyup_db                        | buddyup_user | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                     | 6953 kB | pg_default |


To show table sizes:

    \d+
    rob@[local]:5432/quizme# \d+
                                       List of relations
     Schema |             Name              |   Type   | Owner  |    Size    | Description
    --------+-------------------------------+----------+--------+------------+-------------
     public | auth_group                    | table    | quizme | 0 bytes    |
     public | auth_group_id_seq             | sequence | quizme | 8192 bytes |
     public | auth_group_permissions        | table    | quizme | 0 bytes    |
     public | auth_group_permissions_id_seq | sequence | quizme | 8192 bytes |

Another way to show database sizes:

    SELECT 
    pg_database.datname, pg_database_size(pg_database.datname), pg_size_pretty(pg_database_size(pg_database.datname)) 
    FROM pg_database 
    ORDER BY pg_database_size DESC;


                  datname              | pg_database_size | pg_size_pretty
    -----------------------------------+------------------+----------------
     atlatl                            |        769434424 | 734 MB
     trapit_nginx_logs                 |         19555128 | 19 MB
     trapit_schema_from_higgs_20140113 |         12297016 | 12 MB
     trapit                            |         11526968 | 11 MB
     atlatl2                           |         11059716 | 11 MB
     quizme                            |          9986872 | 9753 kB
     osqa                              |          8889144 | 8681 kB
[http://www.commandlinefu.com/commands/view/9792/list-all-databases-in-postgres-and-their-bytehuman-sizes-ordering-by-byte-size-descending][1]


- [http://stackoverflow.com/questions/18907047/postgres-db-size-command][2]
- [https://wiki.postgresql.org/wiki/Disk_Usage][3]

    SELECT pg_database.datname,  
           pg_size_pretty(pg_database_size(pg_database.datname)) AS size  
      FROM pg_database;

(this did not show my biggest database for some reason)  
[https://feeding.cloud.geek.nz/posts/finding-size-of-postgres-database-on/][4]


  [1]: http://www.commandlinefu.com/commands/view/9792/list-all-databases-in-postgres-and-their-bytehuman-sizes-ordering-by-byte-size-descending
  [2]: http://stackoverflow.com/questions/18907047/postgres-db-size-command
  [3]: https://wiki.postgresql.org/wiki/Disk_Usage
  [4]: https://feeding.cloud.geek.nz/posts/finding-size-of-postgres-database-on/

questiontag_set : ['postgresql']
datetime_added  =[2015-06-20 18:06:35.520076+00:00]
datetime_updated=[2015-06-20 18:06:35.520107+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [171] of [1277] ============================= id=[1110] ==
Q:  [https://en.wikipedia.org/wiki/Wi-Fi_Protected_Setup][1]


  [1]: https://en.wikipedia.org/wiki/Wi-Fi_Protected_Setup
questiontag_set : ['networking']
datetime_added  =[2015-06-20 16:56:03.640458+00:00]
datetime_updated=[2015-06-20 16:56:03.640488+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [172] of [1277] ============================= id=[1109] ==
Q:  Putting posgresql data files in a different directory/location:

- [http://www.postgresql.org/docs/9.3/static/storage-file-layout.html][1]
- [http://www.postgresql.org/docs/9.4/static/manage-ag-tablespaces.html][2]


To see where the data directory is, use this query.

    show data_directory;

To see all the run-time parameters, use

    show all;

You can create tablespaces to store database objects in other parts of the filesystem. To see tablespaces, which might not be in that data directory, use this query.

    SELECT * FROM pg_tablespace;

location of specific tables/indexes can be adjusted by TABLESPACEs:

    CREATE TABLESPACE dbspace LOCATION '/data/dbs';
    CREATE TABLE something (......) TABLESPACE dbspace;
    CREATE TABLE otherthing (......) TABLESPACE dbspace;

[http://stackoverflow.com/questions/1137060/where-does-postgresql-store-the-database][3]


  [1]: http://www.postgresql.org/docs/9.3/static/storage-file-layout.html
  [2]: http://www.postgresql.org/docs/9.4/static/manage-ag-tablespaces.html
  [3]: http://stackoverflow.com/questions/1137060/where-does-postgresql-store-the-database
questiontag_set : ['postgresql']
datetime_added  =[2015-06-20 15:56:08.141705+00:00]
datetime_updated=[2015-06-20 18:06:42.146770+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [173] of [1277] ============================= id=[1108] ==
Q:  What is the default location of the postgres data files?
questiontag_set : ['postgresql']
datetime_added  =[2015-06-20 15:39:08.004470+00:00]
datetime_updated=[2015-06-20 15:39:08.004501+00:00]
---------------------------------------------- id=[573] --
A:
/usr/local/var/postgres  (on Mac via "brew install postgresql")

=== [174] of [1277] ============================= id=[1107] ==
Q:  How to use AirDrop between my older Mac and Sara's newer Mac?

A: On Sara's Mac that is running Yosemite, click on "Don't see who you're looking for?" in the bottom of the AirDrop window and then click on "Search for an older Mac?"
questiontag_set : ['osx (OSX) (Mac)']
datetime_added  =[2015-06-19 03:28:46.074073+00:00]
datetime_updated=[2015-06-19 03:55:20.194298+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [175] of [1277] ============================= id=[1106] ==
Q:  What is the website that shows the locations of all the TriMet buses/MAXes/streetcars?
questiontag_set : ['portland']
datetime_added  =[2015-06-18 21:51:42.310450+00:00]
datetime_updated=[2015-06-18 21:51:42.310482+00:00]
---------------------------------------------- id=[572] --
A:
[http://pdxlivebus.com][1]


  [1]: http://pdxlivebus.com

=== [176] of [1277] ============================= id=[1105] ==
Q:  How do you tell flexmock to ignore the details of an argument?
questiontag_set : ['flexmock']
datetime_added  =[2015-06-18 20:18:47.602276+00:00]
datetime_updated=[2015-06-18 20:18:47.602309+00:00]
---------------------------------------------- id=[571] --
A:
Use a type, e.g., `with_args(str, 'my_value', int)`

=== [177] of [1277] ============================= id=[1104] ==
Q:  Can flexmock be used to mock the same function multiple times, each with a different set of arguments?
questiontag_set : ['flexmock']
datetime_added  =[2015-06-18 20:17:56.588732+00:00]
datetime_updated=[2015-06-18 20:17:56.588773+00:00]
---------------------------------------------- id=[570] --
A:
yes.  Tom Marshall did it for his test that tested Twitter images.  6/18/15

=== [178] of [1277] ============================= id=[1103] ==
Q:  What was the issue that Tom had with his test using flexmock to mock the same function twice, the second with a different group of arguments?
questiontag_set : ['flexmock']
datetime_added  =[2015-06-18 20:17:01.018915+00:00]
datetime_updated=[2015-06-18 20:17:01.018948+00:00]
---------------------------------------------- id=[569] --
A:
The second signature was missing a unicode representation in a string, so it was raising a `MethodSignatureError`.



=== [179] of [1277] ============================= id=[1102] ==
Q:  How do you specify a source-code segment in markdown for githup?
questiontag_set : ['markdown']
datetime_added  =[2015-06-18 15:53:03.688424+00:00]
datetime_updated=[2015-06-18 15:53:03.688462+00:00]
---------------------------------------------- id=[568] --
A:
Use these tags:

    #+BEGIN_SRC sql
    #+END_SRC

Note that these work in github, but not in the markdown for my Django plugin in my quiz program.

=== [180] of [1277] ============================= id=[1101] ==
Q:  In postgresql, how do you create a column with a date timestamp of when the row was inserted?
questiontag_set : ['postgresql']
datetime_added  =[2015-06-18 14:02:51.705542+00:00]
datetime_updated=[2015-06-18 14:02:51.705571+00:00]
---------------------------------------------- id=[567] --
A:
    CREATE TABLE my_table (
          created_date timestamp default current_timestamp;
    )

    CREATE TABLE my_table (
          created_date timestamp DEFAULT localtimestamp NOT NULL;
)

>Note that the value for that column can explicitly be overwritten by supplying a value in the INSERT statement. If you want to prevent that you do need a trigger.  You also need a trigger if you need to update that column whenever the row is updated.

- [http://stackoverflow.com/questions/11693084/query-rows-by-time-of-creation][1]
- [http://stackoverflow.com/questions/9556474/how-do-i-automatically-update-a-timestamp-in-postgresql][2]


  [1]: http://stackoverflow.com/questions/11693084/query-rows-by-time-of-creation
  [2]: http://stackoverflow.com/questions/9556474/how-do-i-automatically-update-a-timestamp-in-postgresql

=== [181] of [1277] ============================= id=[1100] ==
Q:  In markdown, how do you specify a preformatted block of text, which may include html tags that you want displayed?
questiontag_set : ['markdown']
datetime_added  =[2015-06-18 12:53:46.792149+00:00]
datetime_updated=[2015-06-18 12:53:46.792179+00:00]
---------------------------------------------- id=[566] --
A:
For github's markdown, use a blank line followed by 3 backticks, e.g.,

<pre>
```
this is my preformatted text
new line here
here are some tags: <pre> </html> <foo>
```
</pre>
(note that the backticks don't have the desired effect in the Django markdown plugin I'm using)

Can use a pre tag, but the angle brackets and tags get lost:

<pre>
this is my preformatted text
new line here
here are some tags: <pre> </html> <foo>
</pre>

=== [182] of [1277] ============================= id=[1099] ==
Q:  How to find an image type for a web page in Chrome Developer Tools?
questiontag_set : ['web development']
datetime_added  =[2015-06-17 21:19:26.782709+00:00]
datetime_updated=[2015-06-17 21:19:26.782740+00:00]
---------------------------------------------- id=[565] --
A:
Developer Tools > Resources > Frames > [frame] > Images > (under the image it will have "MIME type")

=== [183] of [1277] ============================= id=[1098] ==
Q:  Is it necessary to create an index for a primary key in postgresql?
questiontag_set : ['postgresql']
datetime_added  =[2015-06-16 14:35:56.336889+00:00]
datetime_updated=[2015-06-16 14:35:56.336920+00:00]
---------------------------------------------- id=[564] --
A:
PostgreSQL automatically creates an index for each unique constraint and primary key constraint to enforce uniqueness. Thus, it is not necessary to create an index explicitly for primary key columns. (See CREATE INDEX for more information.)

[http://www.postgresql.org/docs/9.3/static/sql-createtable.html][1]


  [1]: http://www.postgresql.org/docs/9.3/static/sql-createtable.html

=== [184] of [1277] ============================= id=[1097] ==
Q:  In SQL, what question do you ask to determine whether a LEFT OUTER JOIN is needed?
questiontag_set : ['sql']
datetime_added  =[2015-06-16 13:40:11.284697+00:00]
datetime_updated=[2015-06-16 13:40:11.284728+00:00]
---------------------------------------------- id=[563] --
A:
Do you want to see rows from the left table that have no match in the right table?


=== [185] of [1277] ============================= id=[1096] ==
Q:  In vim, how do I disable autoindent, even when `:set noautoindent` isn't enough?
questiontag_set : ['vim']
datetime_added  =[2015-06-16 13:22:03.158975+00:00]
datetime_updated=[2015-06-16 13:22:03.159007+00:00]
---------------------------------------------- id=[562] --
A:
    :set paste=on

or alternatively:

    :set indentexpr=
    (this will set it to nothing)


    to see what it is set to:
    :set indentexpr


=== [186] of [1277] ============================= id=[1095] ==
Q:  How do I edit a psql command from history in the editor without executing it first?
questiontag_set : ['postgresql', 'psql']
datetime_added  =[2015-06-16 12:58:31.682358+00:00]
datetime_updated=[2015-06-16 12:58:31.682388+00:00]
---------------------------------------------- id=[561] --
A:
  1. get the command back at the cursor using control-p
  2. remove the ";"
  3. `\e`

=== [187] of [1277] ============================= id=[1094] ==
Q:  How do you write the psql history out to a file?
questiontag_set : ['postgresql', 'psql']
datetime_added  =[2015-06-16 12:44:47.706504+00:00]
datetime_updated=[2015-06-16 12:44:47.706533+00:00]
---------------------------------------------- id=[560] --
A:
    \s my_file


=== [188] of [1277] ============================= id=[1093] ==
Q:  When are temporary tables deleted in Postgresql?
questiontag_set : ['postgresql']
datetime_added  =[2015-06-16 12:19:18.873704+00:00]
datetime_updated=[2015-06-16 12:19:18.873736+00:00]
---------------------------------------------- id=[559] --
A:
>TEMPORARY or TEMP
If specified, the table is created as a temporary table. Temporary tables are automatically dropped at the end of a session, or optionally at the end of the current transaction (see ON COMMIT below). Existing permanent tables with the same name are not visible to the current session while the temporary table exists, unless they are referenced with schema-qualified names. Any indexes created on a temporary table are automatically temporary as well.

>The autovacuum daemon cannot access and therefore cannot vacuum or analyze temporary tables. For this reason, appropriate vacuum and analyze operations should be performed via session SQL commands. For example, if a temporary table is going to be used in complex queries, it is wise to run ANALYZE on the temporary table after it is populated.

[http://www.postgresql.org/docs/9.4/static/sql-createtable.html][1]


  [1]: http://www.postgresql.org/docs/9.4/static/sql-createtable.html

=== [189] of [1277] ============================= id=[1092] ==
Q:  To search for posts in Facebook News Feed:

[http://search.fb.com/][1]

after searching for something, there is a "Refine this search" widget to filter things.

  [1]: http://search.fb.com/
questiontag_set : ['unassimilated']
datetime_added  =[2015-06-16 01:32:52.401037+00:00]
datetime_updated=[2015-06-16 01:32:52.401068+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [190] of [1277] ============================= id=[1091] ==
Q:  http://www.shopgoodwill.com/ - website for buying Goodwill items (like musical instruments) from Goodwill; can select Hillsboro or Eugene locations and pick them up without paying shipping

To search for things at Hillsboro, click on `search` and then under `Seller` choose `OR -- Hillsboro`
questiontag_set : ['websites']
datetime_added  =[2015-06-15 22:19:20.975219+00:00]
datetime_updated=[2015-06-15 22:19:20.975251+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [191] of [1277] ============================= id=[1090] ==
Q:  titrate
questiontag_set : ['vocabulary']
datetime_added  =[2015-06-15 16:41:10.259750+00:00]
datetime_updated=[2015-06-15 16:41:10.259779+00:00]
---------------------------------------------- id=[558] --
A:


(transitive, analytical chemistry) To ascertain the amount of a constituent in a solution (or other mixture) by measuring the volume of a known concentration (the "standard solution") needed to complete a reaction.

(medicine) To adjust the amount of a drug consumed until the desired effects are achieved.

[https://en.wiktionary.org/wiki/titrate][1]


  [1]: https://en.wiktionary.org/wiki/titrate

=== [192] of [1277] ============================= id=[1089] ==
Q:  yo
questiontag_set : ['vocabulary']
datetime_added  =[2015-06-15 16:38:32.077872+00:00]
datetime_updated=[2015-06-15 16:38:32.077901+00:00]
---------------------------------------------- id=[557] --
A:
3) A declaritive or imperative exclaimation, whether alone or within a sentence.

[http://www.urbandictionary.com/define.php?term=yo][1]


  [1]: http://www.urbandictionary.com/define.php?term=yo

=== [193] of [1277] ============================= id=[1088] ==
Q:  What does the phrase "watch your six" mean?
questiontag_set : ['vocabulary']
datetime_added  =[2015-06-15 16:34:35.777938+00:00]
datetime_updated=[2015-06-15 16:34:35.777970+00:00]
---------------------------------------------- id=[556] --
A:
the phrase 'watch your six' does indeed mean 'watch your back'.

It refers to the 6 position on the face of a clock. If you were standing in the center of a clock face, facing the 12 position, the 6 position would be immediately behind you. 

This phrase is often used by combat fighter pilots to refer to keeping an eye out for enemy attacks coming from behind.

[http://english.stackexchange.com/questions/115906/meaning-of-watch-your-six][1]


  [1]: http://english.stackexchange.com/questions/115906/meaning-of-watch-your-six

=== [194] of [1277] ============================= id=[1087] ==
Q:  Creating a read-only user in postgresql:

    CREATE ROLE read-only-user LOGIN PASSWORD 'yyy';
    ALTER USER  read-only-user WITH encrypted password 'yourpasswordinhere';
    GRANT SELECT ON ALL TABLES IN SCHEMA public TO read-only-user;
    GRANT SELECT ON ALL SEQUENCES IN SCHEMA public TO read-only-user;
    --  automatically have default roles assigned to new objects in future:
    ALTER DEFAULT PRIVILEGES IN SCHEMA public
       GRANT SELECT ON TABLES TO read-only-user;
    GRANT CONNECT ON DATABASE productiondb to read-only-user;


- [http://stackoverflow.com/questions/760210/how-do-you-create-a-read-only-user-in-postgresql][1]
- [https://jamie.curle.io/posts/creating-a-read-only-user-in-postgres/][2]


  [1]: http://stackoverflow.com/questions/760210/how-do-you-create-a-read-only-user-in-postgresql
  [2]: https://jamie.curle.io/posts/creating-a-read-only-user-in-postgres/
questiontag_set : ['postgresql']
datetime_added  =[2015-06-15 14:36:15.464547+00:00]
datetime_updated=[2015-06-15 14:39:11.270456+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [195] of [1277] ============================= id=[1086] ==
Q:  What juggler worked with Cirque de Soleil and holds 11 juggling records, 
questiontag_set : ['unassimilated']
datetime_added  =[2015-06-14 23:24:39.053811+00:00]
datetime_updated=[2015-06-14 23:24:39.053848+00:00]
---------------------------------------------- id=[555] --
A:
Anthony Gatto  (real name Anthony Cammarota, born 4/14/1973)

7-ball record: 11mins 37secs in 2011  
8-ball record: 1 min 13 secs in 2006  
9-ball record: 54 secs in 2006

- [https://en.wikipedia.org/wiki/Anthony_Gatto][1]
- [https://www.cirquedusoleil.com/en/jobs/casting/team/artist/anthony-gatto.aspx][2]
- [http://grantland.com/features/anthony-gatto-juggling-cirque-du-soleil-jason-fagone/][3]


  [1]: https://en.wikipedia.org/wiki/Anthony_Gatto
  [2]: https://www.cirquedusoleil.com/en/jobs/casting/team/artist/anthony-gatto.aspx
  [3]: http://grantland.com/features/anthony-gatto-juggling-cirque-du-soleil-jason-fagone/

=== [196] of [1277] ============================= id=[1085] ==
Q:  Google Photos has unlimited storage of photos

[http://www.pcadvisor.co.uk/new-product/google-android/everything-you-need-know-about-google-photos-how-to-backup-and-share-photos-3613555/][1]  May 28, 2015


  [1]: http://www.pcadvisor.co.uk/new-product/google-android/everything-you-need-know-about-google-photos-how-to-backup-and-share-photos-3613555/
questiontag_set : ['web services']
datetime_added  =[2015-06-13 16:49:48.726575+00:00]
datetime_updated=[2015-06-13 16:49:48.726607+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [197] of [1277] ============================= id=[1084] ==
Q:  Cloud storage services:

Ones I know:

1. Amazon Cloud Drive
2. Apple iCloud
3. Dropbox
4. Google Drive

Ones I don't know

    Box
    Copy
    Knowhow Cloud
    Mediafire
    Mega
    Mozy
    OneDrive
    SpiderOak
    Tresorit

[http://www.pcadvisor.co.uk/test-centre/internet/best-cloud-storage-dropbox-google-drive-onedrive-icloud-3506734/][1]


  [1]: http://www.pcadvisor.co.uk/test-centre/internet/best-cloud-storage-dropbox-google-drive-onedrive-icloud-3506734/

questiontag_set : ['web services']
datetime_added  =[2015-06-13 16:43:46.152954+00:00]
datetime_updated=[2015-06-13 16:43:46.152987+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [198] of [1277] ============================= id=[1083] ==
Q:  untenable

questiontag_set : ['vocabulary']
datetime_added  =[2015-06-12 19:46:56.711916+00:00]
datetime_updated=[2015-06-12 19:46:56.711947+00:00]
---------------------------------------------- id=[554] --
A:
(especially of a position or view) not able to be maintained or defended against attack or objection.  
*"this argument is clearly untenable"*  
synonyms:	indefensible, insupportable, unsustainable, unjustified, unjustifiable, flimsy, weak, shaky  
*"these untenable explanations are not helping your case"*

[https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=define:untenable][1]


  [1]: https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=define:untenable

=== [199] of [1277] ============================= id=[1082] ==
Q:  [https://en.wikipedia.org/wiki/Locality_of_reference][1]


  [1]: https://en.wikipedia.org/wiki/Locality_of_reference
questiontag_set : ['computer science']
datetime_added  =[2015-06-12 19:23:02.634611+00:00]
datetime_updated=[2015-06-12 19:23:02.634641+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [200] of [1277] ============================= id=[1081] ==
Q:  Connascence:

- [https://github.com/jimweirich/presentation_connascence/blob/master/Connascence.key.pdf][1]  (slides)
- [https://vimeo.com/10837903][2] (video presentation)


  [1]: https://github.com/jimweirich/presentation_connascence/blob/master/Connascence.key.pdf
  [2]: https://vimeo.com/10837903
questiontag_set : ['software architecture', 'computer science']
datetime_added  =[2015-06-12 19:16:08.965613+00:00]
datetime_updated=[2015-06-12 19:16:08.965644+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [201] of [1277] ============================= id=[1080] ==
Q:  [https://en.wikipedia.org/wiki/Connascence_(computer_programming)][1]


  [1]: https://en.wikipedia.org/wiki/Connascence_%28computer_programming%29
questiontag_set : ['computer science', 'software architecture', 'software engineering']
datetime_added  =[2015-06-12 19:07:28.933933+00:00]
datetime_updated=[2015-06-12 19:07:28.933964+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [202] of [1277] ============================= id=[1079] ==
Q:  Underscores in hostnames, per David Mercer: "I say we do whatever the relevant RFC's say [regarding unicode characters in urls], else we risk more other random breakage.  As an example of what not to do, MS DNS Server supporting underscore in hostnames has cause So Much random breakage the last 18 years its insane"  [flowdock 6/12/15]


questiontag_set : ['web development']
datetime_added  =[2015-06-12 18:35:17.752163+00:00]
datetime_updated=[2015-06-12 18:35:17.752195+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [203] of [1277] ============================= id=[1078] ==
Q:  What can I do to ease my anxiety when starting a new task?
questiontag_set : ['productivity']
datetime_added  =[2015-06-11 17:56:27.096804+00:00]
datetime_updated=[2015-06-11 17:56:27.096846+00:00]
---------------------------------------------- id=[553] --
A:
Pose a question that will help move the task forward, one that is small and won't take much effort to answer.

When I hear a question, I want to find the answer.

=== [204] of [1277] ============================= id=[1077] ==
Q:  [http://antirez.com/latest/0][1] - blog of antirez (Salvatore Sanfilippo, author of Redis)


  [1]: http://antirez.com/latest/0
questiontag_set : ['blogs', 'websites']
datetime_added  =[2015-06-10 22:25:18.962652+00:00]
datetime_updated=[2015-06-10 22:25:18.962683+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [205] of [1277] ============================= id=[1076] ==
Q:  [http://www.panoramio.com/][1] (fun to just watch the page load different beautiful photos from around the world)


  [1]: http://www.panoramio.com/
questiontag_set : ['websites']
datetime_added  =[2015-06-10 19:37:29.565194+00:00]
datetime_updated=[2015-06-10 19:37:51.817639+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [206] of [1277] ============================= id=[1075] ==
Q:  [http://en.wikipedia.org/wiki/Snapshot_(computer_storage)][1]


  [1]: http://en.wikipedia.org/wiki/Snapshot_%28computer_storage%29
questiontag_set : ['computer science']
datetime_added  =[2015-06-10 17:50:02.725432+00:00]
datetime_updated=[2015-06-10 17:50:02.725466+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [207] of [1277] ============================= id=[1074] ==
Q:  [http://en.wikipedia.org/wiki/Demand_paging][1]


  [1]: http://en.wikipedia.org/wiki/Demand_paging
questiontag_set : ['file_systems']
datetime_added  =[2015-06-10 17:47:23.140346+00:00]
datetime_updated=[2015-06-10 17:47:23.140381+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [208] of [1277] ============================= id=[1073] ==
Q:  [http://en.wikipedia.org/wiki/Copy-on-write][1]


  [1]: http://en.wikipedia.org/wiki/Copy-on-write
questiontag_set : ['computer science']
datetime_added  =[2015-06-10 17:40:36.394205+00:00]
datetime_updated=[2015-06-10 17:40:36.394237+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [209] of [1277] ============================= id=[1072] ==
Q:  [http://blog.circleci.com/its-the-future/][1] - satire of Docker, CoreOS, Google, Vagrant, Heroku, Aphyr, Amazon, Mongo, Redis, etcd, gify, Kubernetes, RAFT, Paxos, CAP, 


  [1]: http://blog.circleci.com/its-the-future/
questiontag_set : ['web development']
datetime_added  =[2015-06-10 17:30:08.778583+00:00]
datetime_updated=[2015-06-10 17:30:08.778614+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [210] of [1277] ============================= id=[1071] ==
Q:  [https://www.youtube.com/user/destinws2/videos][1]  (SmarterEveryDay)


  [1]: https://www.youtube.com/user/destinws2/videos
questiontag_set : ['video']
datetime_added  =[2015-06-10 00:44:00.505446+00:00]
datetime_updated=[2015-06-10 00:44:00.505478+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [211] of [1277] ============================= id=[1070] ==
Q:  - [http://stackoverflow.com/questions/1077317/evolutionary-vs-throwaway-prototyping][1]
- [http://en.wikipedia.org/wiki/Software_prototyping][2]


  [1]: http://stackoverflow.com/questions/1077317/evolutionary-vs-throwaway-prototyping
  [2]: http://en.wikipedia.org/wiki/Software_prototyping
questiontag_set : ['software engineering']
datetime_added  =[2015-06-05 19:57:53.802756+00:00]
datetime_updated=[2015-06-05 19:58:25.726898+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [212] of [1277] ============================= id=[1069] ==
Q:  To see the cursor position in vim:

    :set ruler

then type `control-g` and in the status bar at the bottom it will show the line number and column number on the bottom line on the far right, e.g., `14,5` means the cursor is on line 14, in column 5
questiontag_set : ['vim']
datetime_added  =[2015-06-04 23:14:14.616682+00:00]
datetime_updated=[2015-06-04 23:14:14.616713+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [213] of [1277] ============================= id=[1068] ==
Q:  In pudb, how do you open up any given module in the code window?
questiontag_set : ['pudb']
datetime_added  =[2015-06-04 18:28:43.736145+00:00]
datetime_updated=[2015-06-04 18:28:43.736177+00:00]
---------------------------------------------- id=[552] --
A:
Type 'm' and it will open a window of all the modules in the project and imported.

=== [214] of [1277] ============================= id=[1067] ==
Q:  In pudb, how do you got to a given spot in the stack?
questiontag_set : ['pudb']
datetime_added  =[2015-06-04 18:16:30.051788+00:00]
datetime_updated=[2015-06-04 18:28:55.029150+00:00]
---------------------------------------------- id=[551] --
A:
Go into the Stack pane, put the cursor on the spot you want to go to, and hit return.

=== [215] of [1277] ============================= id=[1066] ==
Q:  How do you add elements to a set in Python?
questiontag_set : ['python']
datetime_added  =[2015-06-03 13:58:30.456761+00:00]
datetime_updated=[2015-06-03 13:58:30.456795+00:00]
---------------------------------------------- id=[550] --
A:
    my_set = set()
    my_set.add('something')

=== [216] of [1277] ============================= id=[1065] ==
Q:  What is the nosetests option (short form and long form) to tell it to stop after the first test failure?
questiontag_set : ['nosetests']
datetime_added  =[2015-06-03 12:51:28.509868+00:00]
datetime_updated=[2015-06-03 12:51:28.509896+00:00]
---------------------------------------------- id=[549] --
A:
`-x` `--stop`

=== [217] of [1277] ============================= id=[1064] ==
Q:  What does the following return in Python:

    dict([(1,11), (2, 22)])
questiontag_set : ['python']
datetime_added  =[2015-06-03 12:23:47.531666+00:00]
datetime_updated=[2015-06-03 12:23:47.531697+00:00]
---------------------------------------------- id=[548] --
A:
    {1: 11, 2: 22}

=== [218] of [1277] ============================= id=[1063] ==
Q:  What does the following return in Python:

    zip([1,2,3], [11,22,33])
questiontag_set : ['python']
datetime_added  =[2015-06-03 12:21:41.760040+00:00]
datetime_updated=[2015-06-03 12:21:41.760074+00:00]
---------------------------------------------- id=[547] --
A:
    [(1,11), (2,22), (3,33)]

=== [219] of [1277] ============================= id=[1062] ==
Q:  What is the in-process dict cache that Tom implemented in elzar?
questiontag_set : ['trapit_elzar']
datetime_added  =[2015-06-03 01:18:50.325259+00:00]
datetime_updated=[2015-06-03 01:18:50.325299+00:00]
---------------------------------------------- id=[546] --
A:
It is a cache to get the surrogate_uid for a given org_id:  

    _org_surrogates_cache[org_id] == surrogate_uid

Here's the code:


    # elzar/__init__.py

    _org_surrogates_cache = {}
    
    
    def trap_target(session, org_id, trap):
        if trap.type != 'source':
            return trap.uid.hex
        surrogate_uid = _org_surrogates_cache.get(org_id)
        if surrogate_uid is None:
            surrogate_uid = session.query(Surrogate.uid).filter(
                Surrogate.org_id == org_id,
                Surrogate.name == 'sources').one()[0].hex
            _org_surrogates_cache[org_id] = surrogate_uid
        return surrogate_uid

=== [220] of [1277] ============================= id=[1061] ==
Q:  Fix SSH auth socket location so agent forwarding works with tmux:

1. create ~/.ssh/rc if it doesn't exist yet, and add the following content:

    #!/bin/bash
    
    # Fix SSH auth socket location so agent forwarding works with tmux
    if test "$SSH_AUTH_SOCK" ; then
      ln -sf $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
    fi

2. Make it work in tmux, add this to your ~/.tmux.conf:

    # fix ssh agent when tmux is detached
    setenv -g SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock

[http://stackoverflow.com/questions/21378569/how-to-auto-update-ssh-agent-environment-variables-when-attaching-to-existing-tm][1]


  [1]: http://stackoverflow.com/questions/21378569/how-to-auto-update-ssh-agent-environment-variables-when-attaching-to-existing-tm


questiontag_set : ['tmux']
datetime_added  =[2015-06-02 18:31:24.269006+00:00]
datetime_updated=[2015-06-02 18:31:24.269045+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [221] of [1277] ============================= id=[1060] ==
Q:  What does the Redis MSET command do?
questiontag_set : ['redis']
datetime_added  =[2015-06-02 12:11:20.351162+00:00]
datetime_updated=[2015-06-02 12:11:20.351192+00:00]
---------------------------------------------- id=[545] --
A:
set multiple keys at once (instead of just a single key).

e.g.,

    assert redis.mset(key1='value1', key2='value2')  # call with kwargs
    assert redis.mset({ 'key1': 'value1.1', 'key2': 'value2.1' }) # call with a dict

[http://redis.io/commands/MSET][1]


  [1]: http://redis.io/commands/MSET

=== [222] of [1277] ============================= id=[1059] ==
Q:  In Python, if a string has binary data, how can you print it out so that the binary data is printed as escaped hex bytes?
questiontag_set : ['python']
datetime_added  =[2015-06-01 22:29:15.750790+00:00]
datetime_updated=[2015-06-01 22:29:15.750820+00:00]
---------------------------------------------- id=[544] --
A:
print repr(str)


=== [223] of [1277] ============================= id=[1058] ==
Q:  What is a UserDocument, and how do you typically get one?
questiontag_set : ['trapit_mom', 'trapit_elzar']
datetime_added  =[2015-05-31 23:30:05.137920+00:00]
datetime_updated=[2015-05-31 23:30:05.137950+00:00]
---------------------------------------------- id=[543] --
A:
A UserDocument is defined in mom.model.document.UserDocument().

It is not a sqlalchemy model, but rather a combination of a postgres document and a cassandra queueitem.

Get a UserDocument for a given Trap via `mom.model.trap.Trap.get_document(doc_uid)`

=== [224] of [1277] ============================= id=[1057] ==
Q:  In vim, how do you toggle folds on/off?
questiontag_set : ['vim']
datetime_added  =[2015-05-31 20:08:05.308201+00:00]
datetime_updated=[2015-05-31 20:08:05.308232+00:00]
---------------------------------------------- id=[542] --
A:
`zi`

=== [225] of [1277] ============================= id=[1056] ==
Q:  What are the two nosetests options to tell it:

1. do not capture stdout
1. do not capture logging
questiontag_set : ['nosetests']
datetime_added  =[2015-05-31 19:48:16.468451+00:00]
datetime_updated=[2015-05-31 19:48:16.468490+00:00]
---------------------------------------------- id=[541] --
A:
1.  `--nocapture`  (do not capture stdout)
1. `--nologcapture` (do not capture logging)

=== [226] of [1277] ============================= id=[1055] ==
Q:  In tmux, how do you toggle between default pane layouts?
questiontag_set : ['tmux']
datetime_added  =[2015-05-31 19:43:13.663913+00:00]
datetime_updated=[2015-05-31 19:43:13.663943+00:00]
---------------------------------------------- id=[540] --
A:
`bind-key {spacebar}`

This will toggle among the default pane layouts, e.g.,
  
1. vertical equal-sized
1. horizontal equal-sized
1. last custom-sized layout

=== [227] of [1277] ============================= id=[1054] ==
Q:  How to resize pane in tmux?
questiontag_set : ['tmux']
datetime_added  =[2015-05-31 19:21:09.431710+00:00]
datetime_updated=[2015-05-31 19:21:09.431744+00:00]
---------------------------------------------- id=[539] --
A:
bind-key : resize-pane -R 50

1. `bind-key` (e.g., control-b by default, or control-a for me)
2. `:` (type the colon character)
3. (this brings up a ":" command line where you can input commands
4. after the ":" input the command `resize-pane -R 50`  
  (this will increase the size of the currently-selected pane 50 columns to the right (R))

=== [228] of [1277] ============================= id=[1053] ==
Q:  [http://en.wikipedia.org/wiki/Comparison_of_file_systems][1]


  [1]: http://en.wikipedia.org/wiki/Comparison_of_file_systems
questiontag_set : ['file_systems']
datetime_added  =[2015-05-31 18:34:44.940731+00:00]
datetime_updated=[2015-05-31 18:34:44.940761+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [229] of [1277] ============================= id=[1052] ==
Q:  [http://en.wikipedia.org/wiki/Extent_%28file_systems%29][1]


  [1]: http://en.wikipedia.org/wiki/Extent_%28file_systems%29
questiontag_set : ['unix', 'file_systems']
datetime_added  =[2015-05-31 18:33:57.262423+00:00]
datetime_updated=[2015-05-31 18:33:57.262453+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [230] of [1277] ============================= id=[1051] ==
Q:  [http://en.wikipedia.org/wiki/Mdadm][1]


  [1]: http://en.wikipedia.org/wiki/Mdadm
questiontag_set : ['unix', 'file_systems']
datetime_added  =[2015-05-31 18:31:53.397053+00:00]
datetime_updated=[2015-05-31 18:35:10.245724+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [231] of [1277] ============================= id=[1050] ==
Q:  - [http://en.wikipedia.org/wiki/Logical_Volume_Manager_%28Linux%29][1]
- [http://en.wikipedia.org/wiki/Logical_volume_management][2]


  [1]: http://en.wikipedia.org/wiki/Logical_Volume_Manager_%28Linux%29
  [2]: http://en.wikipedia.org/wiki/Logical_volume_management
questiontag_set : ['unix', 'file_systems']
datetime_added  =[2015-05-31 18:30:11.381709+00:00]
datetime_updated=[2015-05-31 18:35:18.341341+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [232] of [1277] ============================= id=[1049] ==
Q:  In psycopg2, how do you access the data from a `cursor.execute()`?
questiontag_set : ['postgresql', 'psycopg2']
datetime_added  =[2015-05-31 18:22:25.618347+00:00]
datetime_updated=[2015-05-31 18:22:25.618378+00:00]
---------------------------------------------- id=[538] --
A:
rows = cursor.fetchmany(20)

e.g.,

     cursor.execute('''select * from facts order by time asc;''')
     block = 300000
     rows = cursor.fetchmany(block)
     cols = [x[0] for x in cursor.description]
     while rows:
         print row


=== [233] of [1277] ============================= id=[1048] ==
Q:  What is the name of the SQLAlchemy logger to use when setting logging to log queries and/or data returned?
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-05-31 18:14:23.837528+00:00]
datetime_updated=[2015-05-31 18:14:23.837568+00:00]
---------------------------------------------- id=[537] --
A:
`sqlalchemy.engine`

e.g.,

    import logging, sys
    stdoutHandler = logging.StreamHandler(sys.stdout)
    log = logging.getLogger('sqlalchemy.engine')
    log.setLevel(logging.DEBUG)  # INFO ==> log queries
    log.addHandler(stdoutHandler)

=== [234] of [1277] ============================= id=[1047] ==
Q:  [http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html][1]

[from Luke 5/31/15]


  [1]: http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html
questiontag_set : ['git']
datetime_added  =[2015-05-31 18:07:48.453238+00:00]
datetime_updated=[2015-05-31 18:07:48.453268+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [235] of [1277] ============================= id=[1046] ==
Q:  Why is it bad to install a python package system-wide on a build machine?
questiontag_set : ['trapit', 'python']
datetime_added  =[2015-05-29 23:20:32.658674+00:00]
datetime_updated=[2015-05-29 23:20:32.658705+00:00]
---------------------------------------------- id=[536] --
A:
It is bad because if a package is installed system-wide, then the packaging will not add it to the release tarball, so the dependency won't get installed on the target system (e.g., production).

=== [236] of [1277] ============================= id=[1045] ==
Q:  Speed tests:

- [http://www.speedtest.net/][1]
- [http://www.dslreports.com/speedtest][2]

  [1]: http://www.speedtest.net/
  [2]: http://www.dslreports.com/speedtest
questiontag_set : ['networking']
datetime_added  =[2015-05-29 20:04:47.981752+00:00]
datetime_updated=[2015-05-29 20:04:47.981783+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [237] of [1277] ============================= id=[1044] ==
Q:  What does `git fetch --prune` do?
questiontag_set : ['git']
datetime_added  =[2015-05-28 22:14:36.042124+00:00]
datetime_updated=[2015-05-28 22:14:36.042154+00:00]
---------------------------------------------- id=[535] --
A:
After fetching, remove any remote-tracking branches which no longer exist on the remote.


=== [238] of [1277] ============================= id=[1043] ==
Q:  Tracking Branches: [http://www.lornajane.net/posts/2014/understanding-tracking-branches-in-git][1]


  [1]: http://www.lornajane.net/posts/2014/understanding-tracking-branches-in-git
questiontag_set : ['git']
datetime_added  =[2015-05-28 22:07:06.899217+00:00]
datetime_updated=[2015-05-28 22:07:06.899247+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [239] of [1277] ============================= id=[1042] ==
Q:  Which version of the API endpoints does `elzar.tests.__init__.ElzarTestCase.get_api(profile)` default to?
questiontag_set : ['trapit_elzar']
datetime_added  =[2015-05-28 14:29:02.899585+00:00]
datetime_updated=[2015-05-28 14:29:02.899620+00:00]
---------------------------------------------- id=[534] --
A:
It defaults to v3:

    elzar.tests.__init__.ElzarTestCase.get_api(profile='v3')

=== [240] of [1277] ============================= id=[1041] ==
Q:  [http://www.quora.com/What-are-some-effective-patterns-for-access-control-in-a-service-oriented-microservice-architecture][1]


  [1]: http://www.quora.com/What-are-some-effective-patterns-for-access-control-in-a-service-oriented-microservice-architecture
questiontag_set : ['web development']
datetime_added  =[2015-05-28 03:33:33.011383+00:00]
datetime_updated=[2015-05-28 03:33:33.011414+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [241] of [1277] ============================= id=[1040] ==
Q:  Large Portland startups:

    AppFog
    Elemental Technologies
    Geoloqi
    Jama
    Janrain
    Simple
    Urban Airship
questiontag_set : ['portland companies']
datetime_added  =[2015-05-27 21:38:25.075025+00:00]
datetime_updated=[2015-05-27 21:38:25.075055+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [242] of [1277] ============================= id=[1039] ==
Q:  Trapit competitor: [http://en.wikipedia.org/wiki/Dynamic_Signal][1]


  [1]: http://en.wikipedia.org/wiki/Dynamic_Signal
questiontag_set : ['trapit']
datetime_added  =[2015-05-27 21:36:51.064813+00:00]
datetime_updated=[2015-05-27 21:36:51.064844+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [243] of [1277] ============================= id=[1038] ==
Q:  Define "x factor"
questiontag_set : ['vocabulary']
datetime_added  =[2015-05-27 21:35:29.083010+00:00]
datetime_updated=[2015-05-27 21:35:29.083040+00:00]
---------------------------------------------- id=[533] --
A:
1. a variable in a given situation that could have the most significant impact on the outcome.  
*"the young vote may turn out to be the X factor"*

2. a noteworthy special talent or quality.  
*"there are plenty of luxury cars around, but the S-Type has that special X factor"*

[https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=define%3A%20x%20factor][1]


  [1]: https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=define:%20x%20factor

=== [244] of [1277] ============================= id=[1037] ==
Q:  How to fold {count} lines from the cursor down in vim?  Or fold a range of lines?
questiontag_set : ['vim']
datetime_added  =[2015-05-27 13:54:18.094729+00:00]
datetime_updated=[2015-05-27 14:04:14.490124+00:00]
---------------------------------------------- id=[532] --
A:
To fold a lines in the range 10-25:  
  `:10,25fold`

To fold {count} number of lines: 

In normal/visual mode, type the number of lines and then `zF`, e.g.,

`30zF` - create a fold starting at the cursor and continuing 30 lines down

=== [245] of [1277] ============================= id=[1036] ==
Q:  What is the `[cache_redis]` stanza of the config file for?
questiontag_set : ['trapit']
datetime_added  =[2015-05-26 18:53:34.651125+00:00]
datetime_updated=[2015-05-26 18:53:34.651155+00:00]
---------------------------------------------- id=[531] --
A:
It is used for the `uuid-cache`

mom.__init__.py:

    env.register('cache_redis', redis_client_loader('cache_redis'))
    env.register('polling_redis', redis_client_loader('cache_redis'))
    env.register('queue_redis', redis_client_loader('cache_redis'))

    /Users/rob/vagrants/trapit.hashicorp.precise64/trapit.repos/mom/mom/model/analytics.py:
      143:         id_ = env.cache_redis.hget('uuid-cache', hex_)
      146:             env.cache_redis.hset('uuid-cache', hex_, id_)
    
    /Users/rob/vagrants/trapit.hashicorp.precise64/trapit.repos/mom/mom/model/trapdoc.py:
       70:         id_ = env.cache_redis.hget('uuid-cache', hex_)
       73:             env.cache_redis.hset('uuid-cache', hex_, id_)

(also search for `polling_redis` and `queue_redis`)

=== [246] of [1277] ============================= id=[1035] ==
Q:  [https://en.wikipedia.org/wiki/Hindsight_bias][1]

Example of how hindsight bias devalues science: [http://lesswrong.com/lw/im/hindsight_devalues_science/][2]


  [1]: https://en.wikipedia.org/wiki/Hindsight_bias
  [2]: http://lesswrong.com/lw/im/hindsight_devalues_science/
questiontag_set : ['psychology']
datetime_added  =[2015-05-26 18:14:11.430109+00:00]
datetime_updated=[2015-05-26 18:15:36.082302+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [247] of [1277] ============================= id=[1034] ==
Q:  https://github.com/faif/python-patterns - examples of design patterns in Python
questiontag_set : ['python']
datetime_added  =[2015-05-26 14:21:58.591090+00:00]
datetime_updated=[2015-05-26 14:21:58.591126+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [248] of [1277] ============================= id=[1033] ==
Q:  [https://github.com/scottrogowski/code2flow][1] - generate call graphs for Python code


  [1]: https://github.com/scottrogowski/code2flow
questiontag_set : ['python']
datetime_added  =[2015-05-26 14:17:52.964164+00:00]
datetime_updated=[2015-05-26 14:17:52.964194+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [249] of [1277] ============================= id=[1032] ==
Q:  [http://en.wikipedia.org/wiki/Facebook_Platform#Open_Graph_protocol][1]


  [1]: http://en.wikipedia.org/wiki/Facebook_Platform#Open_Graph_protocol
questiontag_set : ['web development']
datetime_added  =[2015-05-26 14:15:31.782020+00:00]
datetime_updated=[2015-05-26 14:15:31.782050+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [250] of [1277] ============================= id=[1031] ==
Q:  [https://github.com/audreyr/cookiecutter][1] - A command-line utility that creates projects from cookiecutters (project templates), e.g. creating a Python package project from a Python package project template.


  [1]: https://github.com/audreyr/cookiecutter
questiontag_set : ['python']
datetime_added  =[2015-05-26 14:13:13.480085+00:00]
datetime_updated=[2015-05-26 14:13:13.480115+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [251] of [1277] ============================= id=[1030] ==
Q:  [http://en.wikipedia.org/wiki/Semantic_URL#Slug][1]


  [1]: http://en.wikipedia.org/wiki/Semantic_URL#Slug
questiontag_set : ['web development']
datetime_added  =[2015-05-26 14:03:03.501726+00:00]
datetime_updated=[2015-05-26 14:03:03.501759+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [252] of [1277] ============================= id=[1029] ==
Q:  - [http://en.wikipedia.org/wiki/Reduced_instruction_set_computing][1]
- [http://en.wikipedia.org/wiki/Complex_instruction_set_computing][2]
- [http://en.wikipedia.org/wiki/Computer_architecture][3]


  [1]: http://en.wikipedia.org/wiki/Reduced_instruction_set_computing
  [2]: http://en.wikipedia.org/wiki/Complex_instruction_set_computing
  [3]: http://en.wikipedia.org/wiki/Computer_architecture
questiontag_set : ['computer science']
datetime_added  =[2015-05-22 23:40:55.322962+00:00]
datetime_updated=[2015-05-22 23:40:55.322993+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [253] of [1277] ============================= id=[1028] ==
Q:  - [http://en.wikipedia.org/wiki/Assembly_language][1]
- [http://en.wikipedia.org/wiki/Machine_code][2]


  [1]: http://en.wikipedia.org/wiki/Assembly_language
  [2]: http://en.wikipedia.org/wiki/Machine_code
questiontag_set : ['programming', 'programming languages']
datetime_added  =[2015-05-22 23:36:59.309813+00:00]
datetime_updated=[2015-05-22 23:36:59.309852+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [254] of [1277] ============================= id=[1027] ==
Q:  [http://rosettacode.org/wiki/Rosetta_Code][1]  - Rosetta Code is a programming chrestomathy site. The idea is to present solutions to the same task in as many different languages as possible, to demonstrate how languages are similar and different, and to aid a person with a grounding in one approach to a problem in learning another. Rosetta Code currently has 771 tasks, 158 draft tasks, and is aware of 575 languages, though we do not (and cannot) have solutions to every task in every language.


  [1]: http://rosettacode.org/wiki/Rosetta_Code
questiontag_set : ['websites']
datetime_added  =[2015-05-22 23:28:53.339015+00:00]
datetime_updated=[2015-05-22 23:28:53.339045+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [255] of [1277] ============================= id=[1026] ==
Q:  - [http://en.wikipedia.org/wiki/Scope_(computer_science)][3]
- [http://en.wikipedia.org/wiki/Name_binding][2] 
- [http://en.wikipedia.org/wiki/Late_binding][1]


  [1]: http://en.wikipedia.org/wiki/Late_binding
  [2]: http://en.wikipedia.org/wiki/Name_binding
  [3]: http://en.wikipedia.org/wiki/Scope_%28computer_science%29
questiontag_set : ['programming']
datetime_added  =[2015-05-22 23:26:17.077511+00:00]
datetime_updated=[2015-05-22 23:26:17.077551+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [256] of [1277] ============================= id=[1025] ==
Q:  - [http://en.wikipedia.org/wiki/Aspect_(computer_programming)][1]
- [http://en.wikipedia.org/wiki/Aspect-oriented_programming][2]


  [1]: http://en.wikipedia.org/wiki/Aspect_%28computer_programming%29
  [2]: http://en.wikipedia.org/wiki/Aspect-oriented_programming
questiontag_set : ['programming']
datetime_added  =[2015-05-22 23:22:11.326135+00:00]
datetime_updated=[2015-05-22 23:22:11.326174+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [257] of [1277] ============================= id=[1024] ==
Q:  - [http://en.wikipedia.org/wiki/Delegation_%28programming%29][1]
- [http://en.wikipedia.org/wiki/Delegation_pattern][2]


  [1]: http://en.wikipedia.org/wiki/Delegation_%28programming%29
  [2]: http://en.wikipedia.org/wiki/Delegation_pattern
questiontag_set : ['programming']
datetime_added  =[2015-05-22 23:16:32.400655+00:00]
datetime_updated=[2015-05-22 23:16:32.400693+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [258] of [1277] ============================= id=[1023] ==
Q:  [http://www.quora.com/What-five-tips-can-make-ones-life-more-simple][1]


  [1]: http://www.quora.com/What-five-tips-can-make-ones-life-more-simple
questiontag_set : ['unassimilated']
datetime_added  =[2015-05-22 20:44:35.603795+00:00]
datetime_updated=[2015-05-22 20:44:35.603824+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [259] of [1277] ============================= id=[1022] ==
Q:  - [http://en.wikipedia.org/wiki/Id,_ego_and_super-ego][1]
- [http://en.wikipedia.org/wiki/Ego_death][2]
- [http://en.wikipedia.org/wiki/Ego_ideal][3]


  [1]: http://en.wikipedia.org/wiki/Id,_ego_and_super-ego
  [2]: http://en.wikipedia.org/wiki/Ego_death
  [3]: http://en.wikipedia.org/wiki/Ego_ideal
questiontag_set : ['psychology']
datetime_added  =[2015-05-22 18:45:30.555745+00:00]
datetime_updated=[2015-05-22 18:49:23.516117+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [260] of [1277] ============================= id=[1021] ==
Q:  How do you eliminate the first n characters of output, e.g.,

    $ echo '2222 abcd' | ...
    abcd
questiontag_set : ['bash']
datetime_added  =[2015-05-22 13:46:42.158214+00:00]
datetime_updated=[2015-05-22 13:46:42.158245+00:00]
---------------------------------------------- id=[530] --
A:
    $ echo '2222 abcd' | cut -b 6-
    abcd

(get everything from byte position 6 onwards)

=== [261] of [1277] ============================= id=[1020] ==
Q:  How do you run the redbike cli?
questiontag_set : ['redbike']
datetime_added  =[2015-05-21 23:01:56.542668+00:00]
datetime_updated=[2015-05-21 23:01:56.542698+00:00]
---------------------------------------------- id=[529] --
A:
    source .virt/bin/activate  # e.g., the mom virt
    redbike --config /trapit/config/current/trapit.conf  --help

=== [262] of [1277] ============================= id=[1019] ==
Q:  Postgresql concat() function:

Function: `concat(str "any" [, str "any" [, ...] ])`  
Return Type: text	
Description: Concatenate the text representations of all the arguments. NULL arguments are ignored.  
Example: `concat('abcde', 2, NULL, 22)`  
Result: `abcde222`

e.g., to add a value to the string in a column:

    UPDATE orgs
    SET facebook_permissions=concat(facebook_permissions,',user_posts') 
    WHERE slug='st' 
    RETURNING facebook_permissions;

[http://www.postgresql.org/docs/devel/static/functions-string.html][1]


  [1]: http://www.postgresql.org/docs/devel/static/functions-string.html
questiontag_set : ['postgresql', 'sql']
datetime_added  =[2015-05-21 19:43:43.770033+00:00]
datetime_updated=[2015-05-21 19:43:43.770061+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [263] of [1277] ============================= id=[1018] ==
Q:  Postgresql coalesce() function: [http://www.postgresql.org/docs/9.4/static/functions-conditional.html][1]


  [1]: http://www.postgresql.org/docs/9.4/static/functions-conditional.html
questiontag_set : ['postgresql']
datetime_added  =[2015-05-21 19:28:23.789852+00:00]
datetime_updated=[2015-05-21 19:28:23.789892+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [264] of [1277] ============================= id=[1017] ==
Q:  >Walking through doors can wipe your short term memory. Which is why most people walk into another room and forget why they were there. The doorway effect even works in video games.

- [http://freakonomics.com/2011/11/23/does-walking-through-doorways-cause-forgetfulness/][1]
- [http://www.scientificamerican.com/article/why-walking-through-doorway-makes-you-forget/][2]
- [http://www.tandfonline.com/doi/abs/10.1080/17470218.2011.571267][3]
- [http://www.quora.com/What-are-some-psychological-facts-that-most-people-dont-know][4]


  [1]: http://freakonomics.com/2011/11/23/does-walking-through-doorways-cause-forgetfulness/
  [2]: http://www.scientificamerican.com/article/why-walking-through-doorway-makes-you-forget/
  [3]: http://www.tandfonline.com/doi/abs/10.1080/17470218.2011.571267
  [4]: http://%20http://www.quora.com/What-are-some-psychological-facts-that-most-people-dont-know
questiontag_set : ['psychology']
datetime_added  =[2015-05-21 13:54:32.950085+00:00]
datetime_updated=[2015-05-21 13:54:32.950116+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [265] of [1277] ============================= id=[1016] ==
Q:  How to check the length of the Redis queues for the alligators?
questiontag_set : ['trapit_mom', 'trapit_alligators']
datetime_added  =[2015-05-20 22:20:12.784289+00:00]
datetime_updated=[2015-05-20 22:20:12.784319+00:00]
---------------------------------------------- id=[528] --
A:
    from mom import env
    [env.aggregates_redis.llen(x) for x in ['trap_events_queue', 'doc_events_queue']

=== [266] of [1277] ============================= id=[1015] ==
Q:  - [http://en.wikipedia.org/wiki/Pivot_table][1]
- [http://www.postgresql.org/docs/devel/static/functions-aggregate.html][2]

Per Tom Marshall, the Postgres `array_agg()` function can be used to easily create a pivot table.


  [1]: http://en.wikipedia.org/wiki/Pivot_table
  [2]: http://www.postgresql.org/docs/devel/static/functions-aggregate.html
questiontag_set : ['databases', 'postgresql']
datetime_added  =[2015-05-19 19:58:02.314984+00:00]
datetime_updated=[2015-05-19 19:58:02.315021+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [267] of [1277] ============================= id=[1014] ==
Q:  [http://en.wikipedia.org/wiki/Permalink][1]


  [1]: http://en.wikipedia.org/wiki/Permalink
questiontag_set : ['web development']
datetime_added  =[2015-05-19 14:44:53.139266+00:00]
datetime_updated=[2015-05-19 14:44:53.139305+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [268] of [1277] ============================= id=[1013] ==
Q:  In elzar, where is req.json assigned?
questiontag_set : ['trapit_elzar']
datetime_added  =[2015-05-19 13:01:23.528932+00:00]
datetime_updated=[2015-05-19 13:01:23.528961+00:00]
---------------------------------------------- id=[527] --
A:
wsgi.container.contained():

    def container(handler):
    
        def contained(req):
    
            def json_body():
                """Decode JSON from the body of the request."""
                return json.loads(req.body) if req.body else None
    
            # Monkeypatch the request.
            req.json = json_body

=== [269] of [1277] ============================= id=[1012] ==
Q:  In elzar, what variable contains the values for the query string?
questiontag_set : ['trapit_elzar']
datetime_added  =[2015-05-19 12:50:00.391454+00:00]
datetime_updated=[2015-05-19 12:50:00.391485+00:00]
---------------------------------------------- id=[526] --
A:
req.query (a dict)

=== [270] of [1277] ============================= id=[1011] ==
Q:  In an elzar handler, what variable contains the values for the parts of the endpoint before the query string, e.g.,

`/v4/{org}/traps/{trap_id}/queue/` - where to find the values for `{org}` and  `{trap_id} `?
questiontag_set : ['trapit_elzar']
datetime_added  =[2015-05-19 12:48:52.127578+00:00]
datetime_updated=[2015-05-19 12:48:52.127609+00:00]
---------------------------------------------- id=[525] --
A:
req.vars

=== [271] of [1277] ============================= id=[1010] ==
Q:  Productivity Hack: make bad habits difficult

>1. Make Bad Habits Difficult for Yourself
Sometimes the best way to break a bad habit is to make things incredibly difficult for yourself. If you hate that you watch too much TV, keep the remote control in the upstairs closet. If you can't help but surf the Web when you need to be focusing on a blog post, disconnect your Wi-Fi for a bit. While the extreme lengths you take to avoid certain habits can seem excessive, once those habits are broken it will be well worth the struggle.

[http://www.inc.com/larry-kim/23-best-productivity-hacks-of-the-year.html][1]


  [1]: http://www.inc.com/larry-kim/23-best-productivity-hacks-of-the-year.html
questiontag_set : ['productivity']
datetime_added  =[2015-05-18 17:26:17.379595+00:00]
datetime_updated=[2015-05-18 17:26:17.379624+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [272] of [1277] ============================= id=[1009] ==
Q:  Online booking sites:

[http://meetme.so][1] - used by Jolie Guillebeau for her 100 Catalysts project 4/2015 where she scheduled 100 calls with people  (automatically added the appt to my Google Calendar!)


  [1]: http://meetme.so
questiontag_set : ['web services']
datetime_added  =[2015-05-18 13:04:32.062148+00:00]
datetime_updated=[2015-05-18 13:04:32.062179+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [273] of [1277] ============================= id=[1008] ==
Q:  What are the places where I store information (e.g., what places other than this quiz db)?
questiontag_set : ['rob-specific']
datetime_added  =[2015-05-18 12:37:52.672273+00:00]
datetime_updated=[2015-05-18 12:37:52.672305+00:00]
---------------------------------------------- id=[524] --
A:
1. quizme db
2. learn directory
3. quiz directory (cdquiz)
4. Google Drive
5. email
6. Reminders (OSX, iOS)
7. my notebooks

=== [274] of [1277] ============================= id=[1007] ==
Q:  How to do a GROUP BY query and return matching values for a column, e.g.,

    SELECT count(*), allow_public_traps, slug
    FROM orgs
    GROUP BY allow_public_traps;
    
    count   allow_public_traps  slug
    -----   ------------------  ----
    2       true                pdx,ti
    110     false               ah, bc, dhz, ti, ...
questiontag_set : ['postgresql']
datetime_added  =[2015-05-16 04:55:50.188745+00:00]
datetime_updated=[2015-05-16 04:55:50.188785+00:00]
---------------------------------------------- id=[522] --
A:
    SELECT
        count(*),
        allow_public_traps,
        string_agg(slug, ',')
    FROM orgs
    GROUP BY allow_public_traps;

=== [275] of [1277] ============================= id=[1006] ==
Q:  Is psql, how do you set it so the pager (e.g., `less` or `more`) is disabled?
questiontag_set : ['postgresql']
datetime_added  =[2015-05-16 04:46:11.829300+00:00]
datetime_updated=[2015-05-16 04:46:11.829342+00:00]
---------------------------------------------- id=[521] --
A:
    psql> \pset

Without any arguments, `\pset` will toggle the pager on and off.

=== [276] of [1277] ============================= id=[1005] ==
Q:  [http://www.quora.com/What-is-the-best-app-and-website-for-team-collaboration][1]


  [1]: http://www.quora.com/What-is-the-best-app-and-website-for-team-collaboration
questiontag_set : ['web pages to review']
datetime_added  =[2015-05-15 18:13:47.118951+00:00]
datetime_updated=[2015-05-15 18:13:47.118982+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [277] of [1277] ============================= id=[1004] ==
Q:  [http://www.quora.com/Who-are-some-of-the-best-software-engineers-alive][1]


  [1]: http://www.quora.com/Who-are-some-of-the-best-software-engineers-alive
questiontag_set : ['web pages to review']
datetime_added  =[2015-05-15 18:11:34.048675+00:00]
datetime_updated=[2015-05-15 18:11:34.048706+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [278] of [1277] ============================= id=[1003] ==
Q:  What was the solution to my problem where I was doing:

    $ git pull origin master
    $ git status
    # On branch master
    # Your branch is ahead of 'origin/master' by 4 commits.
    #
    nothing to commit (working directory clean)
questiontag_set : ['git']
datetime_added  =[2015-05-15 14:32:48.753675+00:00]
datetime_updated=[2015-05-15 14:32:48.753706+00:00]
---------------------------------------------- id=[520] --
A:
Do a `git pull` instead of `git pull origin master`

>(Root cause appears to be linked to doing 'git pull origin master' instead of 'git pull')
[http://stackoverflow.com/questions/10966498/git-branch-is-ahead-by-x-commits-doesnt-help-doing-git-pull][1]

    $ git --version
    git version 1.7.9.5

http://stackoverflow.com/questions/1741143/git-pull-origin-mybranch-leaves-local-mybranch-n-commits-ahead-of-origin-why


  [1]: http://stackoverflow.com/questions/10966498/git-branch-is-ahead-by-x-commits-doesnt-help-doing-git-pull

=== [279] of [1277] ============================= id=[1002] ==
Q:  - [http://arxiv.org/][1]
- [http://en.wikipedia.org/wiki/ArXiv][2]


  [1]: http://arxiv.org/
  [2]: http://en.wikipedia.org/wiki/ArXiv
questiontag_set : ['web pages to review']
datetime_added  =[2015-05-15 13:30:28.944222+00:00]
datetime_updated=[2015-05-15 13:30:28.944253+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [280] of [1277] ============================= id=[1001] ==
Q:  [http://www.quora.com/What-are-some-psychological-facts-that-most-people-dont-know][1]


  [1]: http://www.quora.com/What-are-some-psychological-facts-that-most-people-dont-know
questiontag_set : ['psychology']
datetime_added  =[2015-05-14 12:40:10.485745+00:00]
datetime_updated=[2015-05-14 12:40:10.485776+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [281] of [1277] ============================= id=[1000] ==
Q:  What are the Seven Challenges in Sum Faht?
questiontag_set : ['spirituality']
datetime_added  =[2015-05-13 18:06:14.745946+00:00]
datetime_updated=[2015-05-13 18:06:14.745987+00:00]
---------------------------------------------- id=[519] --
A:
1. Humility
2. Patience
3. Acceptance of Fate
4. Surrender
5. Simplicity
6. Detachment
7. Harmony with Nature

http://sinseecenter.com/path/challenges.cfm

=== [282] of [1277] ============================= id=[999] ==
Q:  What are the 10 Principles in Sum Faht?
questiontag_set : ['spirituality']
datetime_added  =[2015-05-13 18:02:24.246254+00:00]
datetime_updated=[2015-05-13 18:02:24.246293+00:00]
---------------------------------------------- id=[518] --
A:
1. Benevolence
2. Loyalty
3. Faith/Belief
4. Righteousness
5. Social Ritual
6. Proper Roles — Family and Society
7. Female Principles
8. Filial Piety
9. Honesty
10. Enlightenment

Altar

[http://sinseecenter.com/path/principles.cfm][1]


  [1]: http://sinseecenter.com/path/principles.cfm

=== [283] of [1277] ============================= id=[998] ==
Q:  - [http://en.wikipedia.org/wiki/Inductionism][1]
- [http://en.wikipedia.org/wiki/Inductive_reasoning][2]
- [http://en.wikipedia.org/wiki/Deductive_reasoning][3]
- [http://en.wikipedia.org/wiki/Inductivism][4]
- [http://en.wikipedia.org/wiki/Problem_of_induction][5]


  [1]: http://en.wikipedia.org/wiki/Inductionism
  [2]: http://en.wikipedia.org/wiki/Inductive_reasoning
  [3]: http://en.wikipedia.org/wiki/Deductive_reasoning
  [4]: http://en.wikipedia.org/wiki/Inductivism
  [5]: http://en.wikipedia.org/wiki/Problem_of_induction
questiontag_set : ['philosophy-of-science', 'science', 'philosophy']
datetime_added  =[2015-05-13 16:48:26.738854+00:00]
datetime_updated=[2015-05-13 16:48:26.738896+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [284] of [1277] ============================= id=[997] ==
Q:  [http://en.wikipedia.org/wiki/Karl_Popper][1]


  [1]: http://en.wikipedia.org/wiki/Karl_Popper
questiontag_set : ['people', 'philosophy', 'philosophy-of-science']
datetime_added  =[2015-05-13 16:44:26.167073+00:00]
datetime_updated=[2015-05-13 16:44:26.167102+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [285] of [1277] ============================= id=[996] ==
Q:  [http://en.wikipedia.org/wiki/Scientific_theory][1]


  [1]: http://en.wikipedia.org/wiki/Scientific_theory
questiontag_set : ['science']
datetime_added  =[2015-05-13 16:39:34.013848+00:00]
datetime_updated=[2015-05-13 16:39:34.013880+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [286] of [1277] ============================= id=[995] ==
Q:  >A scientific theory is a well-substantiated explanation of some aspect of the natural world that is acquired through the scientific method and repeatedly tested and confirmed through observation and experimentation. As with most (if not all) forms of scientific knowledge, scientific theories are inductive in nature and aim for predictive power and explanatory capability.

>Scientific theories are testable and make falsifiable predictions.They describe the causal elements responsible for a particular natural phenomenon, and are used to explain and predict aspects of the physical universe or specific areas of inquiry (e.g. electricity, chemistry, astronomy). Scientists use theories as a foundation to gain further scientific knowledge, as well as to accomplish goals such as inventing technology or curing disease. Scientific theories are the most reliable, rigorous, and comprehensive form of scientific knowledge. This is significantly different from the common usage of the word "theory", which implies that something is a conjecture, hypothesis, or guess (i.e., unsubstantiated and speculative).

**Essential criteria**
>The defining characteristic of all scientific knowledge, including theories, is the ability to make falsifiable or testable predictions. The relevance and specificity of those predictions determine how potentially useful the theory is. A would-be theory that makes no observable predictions is not a scientific theory at all. Predictions not sufficiently specific to be tested are similarly not useful. In both cases, the term "theory" is not applicable.


>A body of descriptions of knowledge is usually only called a theory if it fulfills the following criteria:

>- It makes falsifiable predictions with consistent accuracy across a broad area of scientific inquiry (such as mechanics).
- It is well-supported by many independent strands of evidence, rather than a single foundation. This ensures that it is probably a good approximation, if not completely correct.
- It is consistent with pre-existing experimental results and at least as accurate in its predictions as are any pre-existing theories.
- It can be subjected to minor adaptations to account for new data that do not fit it perfectly, as they are discovered, thus increasing its predictive capability over time.
- It is among the most parsimonious explanations, economical in the use of proposed entities or explanatory steps. (See Occam's razor. Since there is no generally accepted objective definition of parsimony, this is not a strict criterion, but some theories are much less economical than others.)

>The first three criteria are the most important. Theories considered scientific meet at least most of the criteria, but ideally all of them. This is true of such established theories as special and general relativity, quantum mechanics, plate tectonics, the modern evolutionary synthesis, etc.

[http://en.wikipedia.org/wiki/Scientific_theory][1]


  [1]: http://en.wikipedia.org/wiki/Scientific_theory
questiontag_set : ['science']
datetime_added  =[2015-05-13 16:39:14.637019+00:00]
datetime_updated=[2015-05-13 16:39:14.637061+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [287] of [1277] ============================= id=[994] ==
Q:  [http://en.wikipedia.org/wiki/Electrical_resistance_and_conductance][1]


  [1]: http://en.wikipedia.org/wiki/Electrical_resistance_and_conductance
questiontag_set : ['electronics']
datetime_added  =[2015-05-13 14:24:25.974263+00:00]
datetime_updated=[2015-05-13 14:24:25.974304+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [288] of [1277] ============================= id=[993] ==
Q:  [http://en.wikipedia.org/wiki/Mechanical-electrical_analogies][1]


  [1]: http://en.wikipedia.org/wiki/Mechanical-electrical_analogies
questiontag_set : ['unassimilated']
datetime_added  =[2015-05-13 14:00:40.603266+00:00]
datetime_updated=[2015-05-13 14:00:40.603296+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [289] of [1277] ============================= id=[992] ==
Q:  How do you figure out which way an "ON DELETE CASCADE" works?
questiontag_set : ['databases']
datetime_added  =[2015-05-13 13:56:24.065906+00:00]
datetime_updated=[2015-05-13 13:56:24.065944+00:00]
---------------------------------------------- id=[517] --
A:
Think of "parent" and "child".  If the parent is deleted, then the child gets deleted.  A foreign key is always the child refererring to the parent.  So if what the foreign key is referring to gets deleted, then the child with the foreign key will be deleted.

> Most databases support cascading of foreign key values, that is the when a parent row is updated the new value is placed in child rows, or when the parent row is deleted all corresponding child rows are set to null or deleted.   [http://docs.sqlalchemy.org/en/latest/core/constraints.html][1]

> Mappers support the concept of configurable cascade behavior on relationship() constructs. This refers to how operations performed on a “parent” object relative to a particular Session should be propagated to items referred to by that relationship (e.g. “child” objects), and is affected by the relationship.cascade option.  [http://docs.sqlalchemy.org/en/improve_toc/orm/cascades.html][2]


  [1]: http://docs.sqlalchemy.org/en/latest/core/constraints.html
  [2]: http://docs.sqlalchemy.org/en/improve_toc/orm/cascades.html

=== [290] of [1277] ============================= id=[991] ==
Q:  REST endpoints are about nouns, and the methods are the verbs
questiontag_set : ['web development']
datetime_added  =[2015-05-13 12:21:04.502440+00:00]
datetime_updated=[2015-05-13 12:21:04.502471+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [291] of [1277] ============================= id=[990] ==
Q:  auth examples by Thomas Loh for Twitter, Facebook, and LinkedIn:

[https://gist.github.com/thomasloh/81aeb3d5fd628d0ec330][1]


  [1]: https://gist.github.com/thomasloh/81aeb3d5fd628d0ec330
questiontag_set : ['web development']
datetime_added  =[2015-05-13 12:20:18.648928+00:00]
datetime_updated=[2015-05-13 12:20:18.648976+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [292] of [1277] ============================= id=[989] ==
Q:  What is the company in Big Pink where Howard and Kevin Long worked that does fraud prevention for gambling sites?
questiontag_set : ['portland companies']
datetime_added  =[2015-05-12 20:07:17.732715+00:00]
datetime_updated=[2015-05-12 20:07:17.732758+00:00]
---------------------------------------------- id=[516] --
A:
iovation

=== [293] of [1277] ============================= id=[988] ==
Q:  Why is the ORM, getters/setters, and renderers often a bad idea?
questiontag_set : ['trapit', 'sqlalchemy', 'trapit_elzar']
datetime_added  =[2015-05-12 18:05:56.266829+00:00]
datetime_updated=[2015-05-12 18:05:56.266861+00:00]
---------------------------------------------- id=[515] --
A:
Because they can cause many database calls (one for each element or field).

=== [294] of [1277] ============================= id=[987] ==
Q:  In SQLAlchemy, how do you get the session for an instance of a SQLAlchemy model?
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-05-12 14:07:24.568009+00:00]
datetime_updated=[2015-05-12 14:07:24.568039+00:00]
---------------------------------------------- id=[514] --
A:
        from sqlalchemy.orm.session import object_session
        session = object_session(self)


=== [295] of [1277] ============================= id=[986] ==
Q:  [https://medium.com/@elleluna/the-crossroads-of-should-and-must-90c75eb7c5b0][1]


  [1]: https://medium.com/@elleluna/the-crossroads-of-should-and-must-90c75eb7c5b0
questiontag_set : ['web pages to review']
datetime_added  =[2015-05-12 12:53:49.459655+00:00]
datetime_updated=[2015-05-12 12:53:49.459706+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [296] of [1277] ============================= id=[985] ==
Q:  What is an easy way to see if a string contains another string?  (e.g., does the string "foobar" contain "foo"?)
questiontag_set : ['python']
datetime_added  =[2015-05-11 22:16:42.461037+00:00]
datetime_updated=[2015-05-11 22:16:42.461069+00:00]
---------------------------------------------- id=[513] --
A:
    "foo" in "foobar"

alternatively,

    "foobar".find("foo")  # returns index where it is found, else 0

=== [297] of [1277] ============================= id=[984] ==
Q:  How do you abort a `git difftool ...` command?
questiontag_set : ['bash']
datetime_added  =[2015-05-11 19:49:10.334129+00:00]
datetime_updated=[2015-05-11 19:49:10.334159+00:00]
---------------------------------------------- id=[512] --
A:
    control-z (suspend)
    kill %1

=== [298] of [1277] ============================= id=[983] ==
Q:  How do you check to see if a module has a variable defined?
questiontag_set : ['python']
datetime_added  =[2015-05-11 13:32:16.102017+00:00]
datetime_updated=[2015-05-11 13:32:16.102048+00:00]
---------------------------------------------- id=[511] --
A:
    import module
    
    try:
        getattr(module, 'some_variable'):
        print "Yes, it is defined'
    except AttributeError:
        print "No, it is not defined'

=== [299] of [1277] ============================= id=[982] ==
Q:  What environment variable do you set in bash for `cd` to use to cd to a directory that's not in the current directory?
questiontag_set : ['bash']
datetime_added  =[2015-05-08 21:11:39.407026+00:00]
datetime_updated=[2015-05-08 21:11:39.407067+00:00]
---------------------------------------------- id=[510] --
A:
`CDPATH`

e.g.,

    export CDPATH=':/home/rbednark:/trapit;

=== [300] of [1277] ============================= id=[981] ==
Q:  How to show branches/refs for each commit for `git log` output?
questiontag_set : ['git']
datetime_added  =[2015-05-08 20:56:21.846970+00:00]
datetime_updated=[2015-05-08 20:56:21.847003+00:00]
---------------------------------------------- id=[509] --
A:
`git log --decorate`

=== [301] of [1277] ============================= id=[980] ==
Q:  What is the difference between the TEXT and CHARACTER VARYING data types in postgresql?
questiontag_set : ['postgresql']
datetime_added  =[2015-05-05 15:29:47.644196+00:00]
datetime_updated=[2015-05-05 15:29:47.644227+00:00]
---------------------------------------------- id=[508] --
A:
> In addition, PostgreSQL provides the text type, which stores strings of any length. Although the type text is not in the SQL standard, several other SQL database management systems have it as well.

> Tip: There is no performance difference among these three types, apart from increased storage space when using the blank-padded type, and a few extra CPU cycles to check the length when storing into a length-constrained column. While character(n) has performance advantages in some other database systems, there is no such advantage in PostgreSQL; in fact character(n) is usually the slowest of the three because of its additional storage costs. In most situations text or character varying should be used instead.

[http://www.postgresql.org/docs/devel/static/datatype-character.html][1]


  [1]: http://www.postgresql.org/docs/devel/static/datatype-character.html

=== [302] of [1277] ============================= id=[979] ==
Q:  What does 'ALTER TABLE ONLY' do in postgres?
questiontag_set : ['postgresql']
datetime_added  =[2015-05-05 15:16:52.593643+00:00]
datetime_updated=[2015-05-05 15:16:52.593695+00:00]
---------------------------------------------- id=[507] --
A:
>name

>The name (optionally schema-qualified) of an existing table to alter. If ONLY is specified before the table name, only that table is altered. If ONLY is not specified, the table and all its descendant tables (if any) are altered. Optionally, * can be specified after the table name to explicitly indicate that descendant tables are included.

[http://www.postgresql.org/docs/devel/static/sql-altertable.html][1]


  [1]: http://www.postgresql.org/docs/devel/static/sql-altertable.html

=== [303] of [1277] ============================= id=[978] ==
Q:  Issue with ssh-agent forwarding connection on a-build-0 (but not on staging-1):

staging-1 worked for me because I copied my ssh key to staging-1 but not to a-build-0.

Luke resolves this by putting this in his .bashrc:

    echo "export SSH_AUTH_SOCK=$SSH_AUTH_SOCK" > ~/.auth-sock.sh
    alias auth-sock="source ~/.auth-sock.sh"

Then whenever my ssh access seems hosed in a remote tmux, I just type "auth-sock"  [Luke]

http://stackoverflow.com/questions/21378569/how-to-auto-update-ssh-agent-environment-variables-when-attaching-to-existing-tm

questiontag_set : ['unix']
datetime_added  =[2015-05-05 14:49:50.550558+00:00]
datetime_updated=[2015-05-05 14:49:50.550598+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [304] of [1277] ============================= id=[977] ==
Q:  What are the 5 stages of grief?
questiontag_set : ['psychology']
datetime_added  =[2015-05-04 17:23:26.639138+00:00]
datetime_updated=[2015-05-04 17:23:26.639179+00:00]
---------------------------------------------- id=[506] --
A:
The stages, popularly known by the acronym DABDA, include:[2]

1. Denial — One of the first reactions is Denial, wherein the survivor imagines a false, preferable reality.
2. Anger — When the individual recognizes that denial cannot continue, it becomes frustrated, especially at proximate individuals. Certain psychological responses of a person undergoing this phase would be: "Why me? It's not fair!"; "How can this happen to me?"; '"Who is to blame?"; "Why would God let this happen?".
3. Bargaining — The third stage involves the hope that the individual can avoid a cause of grief. Usually, the negotiation for an extended life is made with a higher power in exchange for a reformed lifestyle. Other times, they will use anything valuable against another human agency to extend or prolong the life. People facing less serious trauma can bargain or seek compromise.
4. Depression — "I'm so sad, why bother with anything?"; "I'm going to die soon so what's the point?"; "I miss my loved one, why go on?"
During the fourth stage, the individual becomes saddened by the certainty of death. In this state, the individual may become silent, refuse visitors and spend much of the time mournful and sullen.
5. Acceptance — "It's going to be okay."; "I can't fight it, I may as well prepare for it."
In this last stage, individuals embrace mortality or inevitable future, or that of a loved one, or other tragic event. People dying may precede the survivors in this state, which typically comes with a calm, retrospective view for the individual, and a stable condition of emotions.

[http://en.wikipedia.org/wiki/K%C3%BCbler-Ross_model][1]


  [1]: http://en.wikipedia.org/wiki/K%C3%BCbler-Ross_model

=== [305] of [1277] ============================= id=[976] ==
Q:  [http://en.wikipedia.org/wiki/Radio-frequency_identification][1]


  [1]: http://en.wikipedia.org/wiki/Radio-frequency_identification
questiontag_set : ['unassimilated']
datetime_added  =[2015-05-01 00:38:49.830565+00:00]
datetime_updated=[2015-05-01 00:38:49.830598+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [306] of [1277] ============================= id=[975] ==
Q:  - [http://en.wikipedia.org/wiki/Composition_over_inheritance][1]
- [http://en.wikipedia.org/wiki/Composite_data_type][2]
- [http://en.wikipedia.org/wiki/Object_composition][3]


  [1]: http://en.wikipedia.org/wiki/Composition_over_inheritance
  [2]: http://en.wikipedia.org/wiki/Composite_data_type
  [3]: http://en.wikipedia.org/wiki/Object_composition
questiontag_set : ['software engineering', 'computer science']
datetime_added  =[2015-04-30 16:35:44.833463+00:00]
datetime_updated=[2015-04-30 16:35:44.833517+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [307] of [1277] ============================= id=[974] ==
Q:  python unidecode package

[http://stackoverflow.com/questions/816285/where-is-pythons-best-ascii-for-this-unicode-database][1]


  [1]: http://stackoverflow.com/questions/816285/where-is-pythons-best-ascii-for-this-unicode-database
questiontag_set : ['python', 'unicode']
datetime_added  =[2015-04-30 16:26:59.993319+00:00]
datetime_updated=[2015-04-30 16:26:59.993369+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [308] of [1277] ============================= id=[973] ==
Q:  In Python, how do you convert Unicode to ASCII, and ignore the characters that can't be converted?
questiontag_set : ['python']
datetime_added  =[2015-04-30 15:17:12.667902+00:00]
datetime_updated=[2015-04-30 15:17:12.667936+00:00]
---------------------------------------------- id=[505] --
A:
    # -*- coding: utf-8 -*-
    u_string = u'foo 哈哈 bar'
    assert u_string.encode('ascii', 'ignore') == 'foo  bar'

=== [309] of [1277] ============================= id=[972] ==
Q:  In Mac OSX, how do you access the /tmp directory in Finder, and in open/save dialog boxes?
questiontag_set : ['osx (OSX) (Mac)']
datetime_added  =[2015-04-29 23:39:21.404236+00:00]
datetime_updated=[2015-04-29 23:39:21.404267+00:00]
---------------------------------------------- id=[504] --
A:
In Finder:  

    Go > Go to Folder... > (input "/tmp/")

In open/save dialog boxes,  to bring up the "Go to the folder..." dialog box:

    shift-command-g (in Mavericks and later)
    command-g (prior to Mavericks)

=== [310] of [1277] ============================= id=[971] ==
Q:  How do you page up/down a page at a time in Excel on the Mac?
questiontag_set : ['osx (OSX) (Mac)']
datetime_added  =[2015-04-29 23:01:52.911532+00:00]
datetime_updated=[2015-04-29 23:14:24.935355+00:00]
---------------------------------------------- id=[503] --
A:
fn + up/down arrow

=== [311] of [1277] ============================= id=[970] ==
Q:  In Chrome Developer Tools, how to you sort the API requests by the time when either they started or finished?
questiontag_set : ['web development']
datetime_added  =[2015-04-29 20:36:08.295437+00:00]
datetime_updated=[2015-04-29 20:36:08.295467+00:00]
---------------------------------------------- id=[502] --
A:
Click on the "Start Time" column (or it might be one of the other following values).   You will get a dropdown, where you can select from:

Timeline  
Start Time  
Response Time  
End Time  
Duration  
Latency

=== [312] of [1277] ============================= id=[969] ==
Q:  GPS positions of WiFi access points databases:

- [http://openwlanmap.org/?lang=en][1]
- [http://www.skyhookwireless.com/][2]


  [1]: http://openwlanmap.org/?lang=en
  [2]: http://www.skyhookwireless.com/
questiontag_set : ['unassimilated']
datetime_added  =[2015-04-29 17:42:32.006186+00:00]
datetime_updated=[2015-04-29 17:42:32.006216+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [313] of [1277] ============================= id=[968] ==
Q:   Apple did use the Skyhook database in the past, but these days they have created their own much larger database by croudsourcing from iPhones that happen to be turned on with their GPS active when they encounter any wifi network (without needing to actually connect to the wifi). All of Apple's GPS-equiped devices will also use wifi triangulation while waiting for the GPS to get a fix, and (because wifi is thousands of times faster) to give the GPS chip an approximate location so it can focus on just the last few metres of the location fix.

[http://apple.stackexchange.com/questions/45630/how-does-find-my-mac-work-since-theres-no-gps-in-a-mac][1]


  [1]: http://apple.stackexchange.com/questions/45630/how-does-find-my-mac-work-since-theres-no-gps-in-a-mac
questiontag_set : ['osx (OSX) (Mac)']
datetime_added  =[2015-04-29 17:40:50.351628+00:00]
datetime_updated=[2015-04-29 17:40:50.351685+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [314] of [1277] ============================= id=[967] ==
Q:  [http://getkong.org/][1] - Kong is an open-source API management layer

  [1]: http://getkong.org/
questiontag_set : ['web development']
datetime_added  =[2015-04-28 19:21:48.707917+00:00]
datetime_updated=[2015-04-28 19:21:48.707968+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [315] of [1277] ============================= id=[966] ==
Q:  https://www.youtube.com/watch?v=NX4O6smZrLE -- young boy asking about what he's eating
questiontag_set : ['video']
datetime_added  =[2015-04-28 03:46:04.031797+00:00]
datetime_updated=[2015-04-28 03:46:04.031837+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [316] of [1277] ============================= id=[965] ==
Q:  The ec2 machine instance for db-4, the postgres machine we went to on 4/25/15:

r3.4xlarge  
16cpu, 122GB RAM, 1x320GB SSD  
$1.40/hr  $642/month
questiontag_set : ['trapit']
datetime_added  =[2015-04-27 19:31:40.973637+00:00]
datetime_updated=[2015-04-27 19:31:40.973678+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [317] of [1277] ============================= id=[964] ==
Q:  [http://en.wikipedia.org/wiki/Rent-seeking][1]


  [1]: http://en.wikipedia.org/wiki/Rent-seeking
questiontag_set : ['economics']
datetime_added  =[2015-04-27 18:09:04.474348+00:00]
datetime_updated=[2015-04-27 18:09:04.474378+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [318] of [1277] ============================= id=[963] ==
Q:  [http://www.quora.com/What-is-the-single-most-revealing-interview-question][1]


  [1]: http://www.quora.com/What-is-the-single-most-revealing-interview-question
questiontag_set : ['interviewing']
datetime_added  =[2015-04-26 21:32:38.888435+00:00]
datetime_updated=[2015-04-26 21:32:38.888475+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [319] of [1277] ============================= id=[962] ==
Q:  [https://www.youtube.com/channel/UC1qC39KQoTG6LqgL_YnjSSQ][1] -- Glove and Boots videos


  [1]: https://www.youtube.com/channel/UC1qC39KQoTG6LqgL_YnjSSQ
questiontag_set : ['unassimilated']
datetime_added  =[2015-04-24 21:42:39.134217+00:00]
datetime_updated=[2015-04-24 21:42:39.134257+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [320] of [1277] ============================= id=[961] ==
Q:  What is the essence of HATEOAS?
questiontag_set : ['web development']
datetime_added  =[2015-04-24 18:57:03.091614+00:00]
datetime_updated=[2015-04-24 18:57:03.091644+00:00]
---------------------------------------------- id=[501] --
A:
> HATEOAS, an abbreviation for Hypermedia as the Engine of Application State, is a constraint of the REST application architecture that distinguishes it from most other network application architectures. The principle is that a client interacts with a network application entirely through hypermedia provided dynamically by application servers. A REST client needs no prior knowledge about how to interact with any particular application or server beyond a generic understanding of hypermedia. By contrast, in a service-oriented architecture (SOA), clients and servers interact through a fixed interface shared through documentation or an interface description language (IDL).

> The HATEOAS constraint decouples client and server in a way that allows the server functionality to evolve independently.

> A REST client enters a REST application through a simple fixed URL. All future actions the client may take are discovered within resource representations returned from the server. The media types used for these representations, and the link relations they may contain, are standardized. The client transitions through application states by selecting from the links within a representation or by manipulating the representation in other ways afforded by its media type. In this way, RESTful interaction is driven by hypermedia, rather than out-of-band information.



[http://en.wikipedia.org/wiki/HATEOAS][1]


  [1]: http://en.wikipedia.org/wiki/HATEOAS

=== [321] of [1277] ============================= id=[960] ==
Q:  [http://en.wikipedia.org/wiki/HATEOAS][1]


  [1]: http://en.wikipedia.org/wiki/HATEOAS
questiontag_set : ['web development']
datetime_added  =[2015-04-24 18:53:47.501542+00:00]
datetime_updated=[2015-04-24 18:53:47.501583+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [322] of [1277] ============================= id=[959] ==
Q:  In vim, how do you say to match 1 or more of the preceding characters, ranges or metacharacters?
questiontag_set : ['vim']
datetime_added  =[2015-04-23 22:05:19.224717+00:00]
datetime_updated=[2015-04-23 22:05:19.224748+00:00]
---------------------------------------------- id=[500] --
A:
    \+

e.g.,

[0-9]\+  (match 1 or more digits)

[http://vimregex.com/][1]


  [1]: http://vimregex.com/

=== [323] of [1277] ============================= id=[958] ==
Q:  How to show max number of postgres connections and number of connections currently used?
questiontag_set : ['postgresql']
datetime_added  =[2015-04-23 21:21:25.288384+00:00]
datetime_updated=[2015-04-23 21:21:25.288414+00:00]
---------------------------------------------- id=[499] --
A:
    SELECT * FROM pg_stat_activity;
    SELECT * FROM pg_stat_activity WHERE datname='my_database_name';
    
    -- number of connections
    SELECT count(*) FROM pg_stat_activity;
    
    To terminate the connections:
        SELECT pg_terminate_backend(procpid) FROM pg_stat_activity WHERE datname='your_database';
    
    psql> show max_connections;
    (or "show all" and grep max_connections)
    ''' }

=== [324] of [1277] ============================= id=[957] ==
Q:  Why is one reason why docs don't get slung into downstream traps?
questiontag_set : ['trapit', 'trapit_nibbler']
datetime_added  =[2015-04-23 14:05:58.672329+00:00]
datetime_updated=[2015-04-23 14:05:58.672360+00:00]
---------------------------------------------- id=[498] --
A:
nilsimsa

This happened on 4/22/15 in this issue: [https://github.com/Trapit/vulcan/issues/1193][1]


  [1]: https://github.com/Trapit/vulcan/issues/1193

=== [325] of [1277] ============================= id=[956] ==
Q:  Who are the 7 character types in the hero's journey (monomyth)?
questiontag_set : ['unassimilated']
datetime_added  =[2015-04-23 02:18:28.491873+00:00]
datetime_updated=[2015-04-23 02:18:28.491907+00:00]
---------------------------------------------- id=[497] --
A:
1. hero
2. herald
3. mentor
4. threshold guardians
5. trickster
6. shape-shifter
7. shadow

[http://mentalfloss.com/article/51451/heros-journey-puppet-style][1]


  [1]: http://mentalfloss.com/article/51451/heros-journey-puppet-style

=== [326] of [1277] ============================= id=[955] ==
Q:  [http://mentalfloss.com/][1]


  [1]: http://mentalfloss.com/
questiontag_set : ['unassimilated']
datetime_added  =[2015-04-23 02:14:38.316607+00:00]
datetime_updated=[2015-04-23 02:14:38.316646+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [327] of [1277] ============================= id=[954] ==
Q:  [http://tvtropes.org/][1]


  [1]: http://tvtropes.org/
questiontag_set : ['unassimilated']
datetime_added  =[2015-04-23 00:27:39.023911+00:00]
datetime_updated=[2015-04-23 00:27:39.023950+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [328] of [1277] ============================= id=[953] ==
Q:  [http://serverfault.com/questions/45516/recommended-logparser-queries-for-iis-monitoring][1]


  [1]: http://serverfault.com/questions/45516/recommended-logparser-queries-for-iis-monitoring
questiontag_set : ['web development']
datetime_added  =[2015-04-22 01:25:06.334286+00:00]
datetime_updated=[2015-04-22 01:25:06.334317+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [329] of [1277] ============================= id=[952] ==
Q:  [http://en.wikipedia.org/wiki/Sitemaps][1]


  [1]: http://en.wikipedia.org/wiki/Sitemaps
questiontag_set : ['web development']
datetime_added  =[2015-04-22 01:20:44.489096+00:00]
datetime_updated=[2015-04-22 01:20:44.489138+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [330] of [1277] ============================= id=[951] ==
Q:  [http://en.wikipedia.org/wiki/Robots_exclusion_standard][1]


  [1]: http://en.wikipedia.org/wiki/Robots_exclusion_standard
questiontag_set : ['web development']
datetime_added  =[2015-04-22 01:18:22.388312+00:00]
datetime_updated=[2015-04-22 01:18:22.388351+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [331] of [1277] ============================= id=[950] ==
Q:  [http://stackoverflow.com/questions/2022030/web-scraping-etiquette][1]


  [1]: http://stackoverflow.com/questions/2022030/web-scraping-etiquette
questiontag_set : ['web development']
datetime_added  =[2015-04-21 23:05:21.317808+00:00]
datetime_updated=[2015-04-21 23:05:21.317846+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [332] of [1277] ============================= id=[949] ==
Q:  [http://serverfault.com/questions/52034/what-is-the-difference-between-double-and-single-square-brackets-in-bash][1]


  [1]: http://serverfault.com/questions/52034/what-is-the-difference-between-double-and-single-square-brackets-in-bash
questiontag_set : ['bash']
datetime_added  =[2015-04-20 22:15:43.297036+00:00]
datetime_updated=[2015-04-20 22:15:43.297074+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [333] of [1277] ============================= id=[948] ==
Q:  Doing a DELETE in Postgresql doesn't allow a JOIN.  What can be used instead?
questiontag_set : ['postgresql']
datetime_added  =[2015-04-20 20:56:46.341992+00:00]
datetime_updated=[2015-04-20 20:56:46.342023+00:00]
---------------------------------------------- id=[496] --
A:
`USING... WHERE`, e.g.,

    DELETE FROM url
     USING link_type l, something s
     WHERE url.link_type = l.id  AND s.id=l.something_id AND link_type.id IS NULL;

[http://stackoverflow.com/questions/11753904/postgresql-delete-with-inner-join][1]


  [1]: http://stackoverflow.com/questions/11753904/postgresql-delete-with-inner-join


=== [334] of [1277] ============================= id=[947] ==
Q:  To import an existing repository into github:

1. create a new empty repo in github
1. git clone --bare /path/to/my/local/repo (if the repo is being hosted somewhere else)
1. git remote add origin git@github.com:RobBednark/sandbox_test.git
1. git push --mirror https://github.com/robbednark/sandbox_test.git
1. confirm that the commits, branches, etc. are present on github.com
1. confirm the commits by cloning the repos and verifying that the commits, branches, etc. are there

[https://help.github.com/articles/importing-a-git-repository-using-the-command-line/][1]


  [1]: https://help.github.com/articles/importing-a-git-repository-using-the-command-line/
questiontag_set : ['git']
datetime_added  =[2015-04-20 14:01:32.685046+00:00]
datetime_updated=[2015-04-20 14:01:32.685096+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [335] of [1277] ============================= id=[946] ==
Q:  How do you configure github so that it does not prompt you for a username/password when doing git operations (fetch, pull, push, ...)?
questiontag_set : ['git']
datetime_added  =[2015-04-17 20:33:31.384960+00:00]
datetime_updated=[2015-04-17 20:33:31.384989+00:00]
---------------------------------------------- id=[495] --
A:
git config remote.origin.url git@github.com:/robbednark/sandbox_test.git

=== [336] of [1277] ============================= id=[945] ==
Q:  In Google Chrome Developer Tools in the Network tab, how do you toggle the path for each request to be displayed?
questiontag_set : ['web development']
datetime_added  =[2015-04-17 07:22:32.831888+00:00]
datetime_updated=[2015-04-17 07:22:32.831920+00:00]
---------------------------------------------- id=[494] --
A:
Click the "Use small/large request rows" button that is 4th from the left and looks like 2 rows.  (it shows a tooltip when you mouse over it)

=== [337] of [1277] ============================= id=[944] ==
Q:  In tmux, how do you add a new window split 1) horizontally and 2) vertically ?
questiontag_set : ['tmux']
datetime_added  =[2015-04-17 06:42:45.094577+00:00]
datetime_updated=[2015-04-17 06:42:45.094606+00:00]
---------------------------------------------- id=[493] --
A:
`bind-key "`  (horizontal)  
`bind-key %` (vertical)

=== [338] of [1277] ============================= id=[943] ==
Q:  - [https://plus.google.com/+RipRowan/posts/eVeouesvaVX][1]
- [https://plus.google.com/110981030061712822816/posts/UgCL6YRwgbR][2]
- [http://code.danyork.com/2011/11/11/the-google-vs-amazon-platform-rant-a-must-read-from-steve-yegge/][3]


  [1]: https://plus.google.com/+RipRowan/posts/eVeouesvaVX
  [2]: https://plus.google.com/110981030061712822816/posts/UgCL6YRwgbR
  [3]: http://code.danyork.com/2011/11/11/the-google-vs-amazon-platform-rant-a-must-read-from-steve-yegge/
questiontag_set : ['software engineering culture']
datetime_added  =[2015-04-16 21:29:54.574397+00:00]
datetime_updated=[2015-04-16 21:30:49.353618+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [339] of [1277] ============================= id=[942] ==
Q:  Why might you get this error:  
  
    IOError: [Errno 13] Permission denied: '/home/rbednark/bin/mom.log'
questiontag_set : ['trapit_mom', 'trapit']
datetime_added  =[2015-04-15 14:39:14.717933+00:00]
datetime_updated=[2015-04-15 14:39:14.717964+00:00]
---------------------------------------------- id=[492] --
A:
Because mom.log is written to the current directory, so if you run as a different user and don't have permission to write to that directory or to that existing file, you will get this error.  Simply importing mom causes it to open the mom.log file.

=== [340] of [1277] ============================= id=[941] ==
Q:  [http://en.wikipedia.org/wiki/DomainKeys_Identified_Mail][1]


  [1]: http://en.wikipedia.org/wiki/DomainKeys_Identified_Mail
questiontag_set : ['email']
datetime_added  =[2015-04-15 13:07:17.651376+00:00]
datetime_updated=[2015-04-15 13:07:17.651414+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [341] of [1277] ============================= id=[940] ==
Q:  How do you show the filenames of all the files that are modified but the changes are not yet committed?  (e.g., want to edit all the files that are modified)
questiontag_set : ['git']
datetime_added  =[2015-04-14 19:24:52.910194+00:00]
datetime_updated=[2015-04-14 19:24:52.910225+00:00]
---------------------------------------------- id=[491] --
A:
    git diff --name-only

e.g., to edit all files that have been modified:
    vim $(git diff --name-only)

=== [342] of [1277] ============================= id=[939] ==
Q:  What is the relationship between URI, URL, and URN?
questiontag_set : ['http']
datetime_added  =[2015-04-14 17:26:24.351551+00:00]
datetime_updated=[2015-04-14 17:26:24.351581+00:00]
---------------------------------------------- id=[490] --
A:
>...the URN defines an item's identity, while the URL provides a method for finding it.

> ...a URI can be a URL, a URN, or both.

[http://en.wikipedia.org/wiki/Uniform_resource_identifier][1]


  [1]: http://en.wikipedia.org/wiki/Uniform_resource_identifier

=== [343] of [1277] ============================= id=[938] ==
Q:  Why use `requests` instead of `httplib2`:  [http://docs.python-requests.org/en/latest/community/faq/#why-not-httplib2][1]


  [1]: http://docs.python-requests.org/en/latest/community/faq/#why-not-httplib2
questiontag_set : ['python']
datetime_added  =[2015-04-14 17:06:23.698579+00:00]
datetime_updated=[2015-04-14 17:06:23.698619+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [344] of [1277] ============================= id=[937] ==
Q:  How OAuth2 works

1. [http://stackoverflow.com/questions/4727226/on-a-high-level-how-does-oauth-2-work][1]
1. [http://en.wikipedia.org/wiki/OAuth][2]
1. [https://aaronparecki.com/articles/2012/07/29/1/oauth2-simplified][3]
1. [https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2][4]
1. [http://www.quora.com/How-does-OAuth-2-0-work][5]
1. [http://tools.ietf.org/html/rfc6749][6]
1. [http://tools.ietf.org/html/rfc6750][7]
1. [http://tools.ietf.org/html/rfc6819][11]
1. [http://helloowen.com/Tech-What-is-OAuth/][8]
1. [https://gist.github.com/mziwisky/10079157][9]
1. [http://stackoverflow.com/questions/4065657/how-important-is-it-to-keep-oauths-access-token-secret?rq=1][10]


  [1]: http://stackoverflow.com/questions/4727226/on-a-high-level-how-does-oauth-2-work
  [2]: http://en.wikipedia.org/wiki/OAuth
  [3]: https://aaronparecki.com/articles/2012/07/29/1/oauth2-simplified
  [4]: https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2
  [5]: http://www.quora.com/How-does-OAuth-2-0-work
  [6]: http://tools.ietf.org/html/rfc6749
  [7]: http://tools.ietf.org/html/rfc6750
  [8]: http://helloowen.com/Tech-What-is-OAuth/
  [9]: https://gist.github.com/mziwisky/10079157
  [10]: http://stackoverflow.com/questions/4065657/how-important-is-it-to-keep-oauths-access-token-secret?rq=1
  [11]: http://tools.ietf.org/html/rfc6819
questiontag_set : ['security']
datetime_added  =[2015-04-14 15:06:44.286882+00:00]
datetime_updated=[2015-04-14 15:06:44.286951+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [345] of [1277] ============================= id=[936] ==
Q:  How to find non-zero length files?
questiontag_set : ['unix']
datetime_added  =[2015-04-13 22:38:44.053981+00:00]
datetime_updated=[2015-04-13 22:38:44.054013+00:00]
---------------------------------------------- id=[489] --
A:
 (note that '-ls' must come *after*)

    find . -name '*.log' -size +0 -ls

    find . -name '*.log' ! -size 0 -ls 
    
    find . -name '*.log' -not -empty -ls

=== [346] of [1277] ============================= id=[935] ==
Q:  How many primary keys can a table have in postgresql?
questiontag_set : ['postgresql']
datetime_added  =[2015-04-13 21:03:48.630802+00:00]
datetime_updated=[2015-04-13 21:03:48.630833+00:00]
---------------------------------------------- id=[488] --
A:
> A table can have at most one primary key. (There can be any number of unique and not-null constraints, which are functionally the same thing, but only one can be identified as the primary key.) 

[http://www.postgresql.org/docs/devel/static/ddl-constraints.html][1]


  [1]: http://www.postgresql.org/docs/devel/static/ddl-constraints.html

=== [347] of [1277] ============================= id=[934] ==
Q:  Technically,  a PRIMARY KEY is simply a combination of what two constraints?
questiontag_set : ['sql', 'postgresql']
datetime_added  =[2015-04-13 21:02:00.178671+00:00]
datetime_updated=[2015-04-13 21:02:00.178701+00:00]
---------------------------------------------- id=[487] --
A:
Technically, a primary key constraint is simply a combination of a unique constraint and a not-null constraint. 

So, the following two table definitions accept the same data:

    CREATE TABLE products (
        product_no integer UNIQUE NOT NULL,
    );
    CREATE TABLE products (
        product_no integer PRIMARY KEY,
    );

[http://www.postgresql.org/docs/devel/static/ddl-constraints.html][1]


  [1]: http://www.postgresql.org/docs/devel/static/ddl-constraints.html

=== [348] of [1277] ============================= id=[933] ==
Q:  What does it mean that "SQLAlchemy has the ability to load elements polymorphically"?
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-04-13 07:35:20.209910+00:00]
datetime_updated=[2015-04-13 07:35:20.209941+00:00]
---------------------------------------------- id=[486] --
A:
> When mappers are configured in an inheritance relationship, SQLAlchemy has the ability to load elements polymorphically, meaning that a single query can return objects of multiple types.

[http://docs.sqlalchemy.org/en/latest/orm/inheritance.html][1]


  [1]: http://docs.sqlalchemy.org/en/latest/orm/inheritance.html

=== [349] of [1277] ============================= id=[932] ==
Q:  man gitrevision
questiontag_set : ['git']
datetime_added  =[2015-04-11 00:00:27.774224+00:00]
datetime_updated=[2015-04-11 00:00:27.774263+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [350] of [1277] ============================= id=[931] ==
Q:  How do you edit a remote file using vim locally?  (e.g., edit `my_host:/tmp/my_file`)
questiontag_set : ['vim']
datetime_added  =[2015-04-09 18:10:36.616990+00:00]
datetime_updated=[2015-04-09 18:10:36.617022+00:00]
---------------------------------------------- id=[485] --
A:
    vim scp://my_host//tmp/my_file

=== [351] of [1277] ============================= id=[930] ==
Q:  [http://www.imore.com/][1] -- Apple site recommend by Jason Templeman; iOS, OSX info


  [1]: http://www.imore.com/
questiontag_set : ['iOS', 'osx (OSX) (Mac)']
datetime_added  =[2015-04-09 17:58:36.466114+00:00]
datetime_updated=[2015-04-09 17:58:36.466153+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [352] of [1277] ============================= id=[929] ==
Q:  How do you create a virtualenv using python3 for python?
questiontag_set : ['python']
datetime_added  =[2015-04-09 07:34:32.812293+00:00]
datetime_updated=[2015-04-09 07:34:32.812323+00:00]
---------------------------------------------- id=[484] --
A:
    mkvirtualenv -p $(which python3) my_python3_virtualenv

=== [353] of [1277] ============================= id=[928] ==
Q:  python3

Note this:

    >>> int(1e22)
    10000000000000000000000
    >>> int(1e23)
    99999999999999991611392

    >>> int(1e50)
    100000000000000007629769841091887003294964970946560

and this:
  

    >>> ((100**12) / 100) == (100**11)
    True
    >>> ((100**13) / 100) == (100**12)
    False
    >>> ((100**13) // 100) == (100**12)
    True

python v3.4.1

questiontag_set : ['python']
datetime_added  =[2015-04-09 07:32:45.007981+00:00]
datetime_updated=[2015-04-09 07:32:45.008015+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [354] of [1277] ============================= id=[927] ==
Q:  What is `SELECT 1 FROM ...` often used in an `EXISTS (SELECT 1 FROM...)`?
questiontag_set : ['sql']
datetime_added  =[2015-04-07 10:17:03.169471+00:00]
datetime_updated=[2015-04-07 10:17:03.169501+00:00]
---------------------------------------------- id=[483] --
A:
> Since the result depends only on whether any rows are returned, and not on the contents of those rows, the output list of the subquery is normally unimportant. A common coding convention is to write all EXISTS tests in the form EXISTS(SELECT 1 WHERE ...). There are exceptions to this rule however, such as subqueries that use INTERSECT.

[http://www.postgresql.org/docs/devel/static/functions-subquery.html][1]


  [1]: http://www.postgresql.org/docs/devel/static/functions-subquery.html

=== [355] of [1277] ============================= id=[926] ==
Q:  Is there short-circuit evaluation in a Postgresql query?
questiontag_set : ['postgresql']
datetime_added  =[2015-04-07 10:08:08.305215+00:00]
datetime_updated=[2015-04-07 10:08:08.305246+00:00]
---------------------------------------------- id=[482] --
A:
No, per the docs:

> The order of evaluation of subexpressions is not defined. In particular, the inputs of an operator or function are not necessarily evaluated left-to-right or in any other fixed order.

> Furthermore, if the result of an expression can be determined by evaluating only some parts of it, then other subexpressions might not be evaluated at all. 

>Note that this is not the same as the left-to-right "short-circuiting" of Boolean operators that is found in some programming languages.

> 
[http://www.postgresql.org/docs/devel/static/sql-expressions.html][1]


  [1]: http://www.postgresql.org/docs/devel/static/sql-expressions.html

=== [356] of [1277] ============================= id=[925] ==
Q:  What does `EXISTS()` do?
questiontag_set : ['sql']
datetime_added  =[2015-04-07 09:57:05.255730+00:00]
datetime_updated=[2015-04-07 09:57:05.255761+00:00]
---------------------------------------------- id=[481] --
A:
It simply returns true or false based on whether the subquery returned at least 1 row.

[http://www.postgresql.org/docs/9.4/static/functions-subquery.html][1]


  [1]: http://www.postgresql.org/docs/9.4/static/functions-subquery.html

=== [357] of [1277] ============================= id=[924] ==
Q:  How do you see benchmarking diagnostics for a query in Postgres?
questiontag_set : ['postgresql']
datetime_added  =[2015-04-07 09:54:21.227019+00:00]
datetime_updated=[2015-04-07 09:54:21.227049+00:00]
---------------------------------------------- id=[480] --
A:
EXPLAIN ANALYZE SELECT * FROM my_table;

=== [358] of [1277] ============================= id=[923] ==
Q:  How do you undo all changes made that have not yet been committed?
questiontag_set : ['git']
datetime_added  =[2015-04-07 09:11:18.023643+00:00]
datetime_updated=[2015-04-07 09:11:18.023682+00:00]
---------------------------------------------- id=[479] --
A:
git reset --hard HEAD

    what                    outcome
    -------------------     ---------  
    new files staged        deleted
    new files unstaged      still there
    modified files staged   reset
    modified files unstaged reset

=== [359] of [1277] ============================= id=[922] ==
Q:  In psql, how do you send the output of a query to a file?
questiontag_set : ['postgresql']
datetime_added  =[2015-04-07 07:55:41.263482+00:00]
datetime_updated=[2015-04-07 07:55:41.263512+00:00]
---------------------------------------------- id=[478] --
A:
Use `\g my_file` instead of semi-colon `;`

e.g.,

    SELECT * FROM my_table \g my_output

=== [360] of [1277] ============================= id=[921] ==
Q:  What is the difference between LEFT OUTER JOIN and RIGHT OUTER JOIN?
questiontag_set : ['sql']
datetime_added  =[2015-04-07 07:30:51.107412+00:00]
datetime_updated=[2015-04-07 07:30:51.107443+00:00]
---------------------------------------------- id=[477] --
A:
They are essentially equivalent.

*left* and *right* refer to the two sides of the JOIN keyword.

These queries are equivalent (the tables are just reversed):

    -- using a RIGHT OUTER JOIN:
    SELECT * FROM author a
    RIGHT OUTER JOIN books b ON b.author_id=a.id
    WHERE a.id IS NULL;
    
     -- using a LEFT OUTER JOIN:
    SELECT * FROM books b
    LEFT OUTER JOIN author a ON b.author_id=a.id
    WHERE a.id IS NULL;

=== [361] of [1277] ============================= id=[920] ==
Q:  Give the following 2 tables:

books

    author_id
    --------

author

    id
    --

How do I find all authors that do NOT have any books?
questiontag_set : ['sql']
datetime_added  =[2015-04-07 07:21:47.240214+00:00]
datetime_updated=[2015-04-07 07:21:47.240246+00:00]
---------------------------------------------- id=[476] --
A:
    -- using a RIGHT OUTER JOIN:
    SELECT * FROM author a
    RIGHT OUTER JOIN books b ON b.author_id=a.id
    WHERE a.id IS NULL;
    
     -- using a LEFT OUTER JOIN:
    SELECT * FROM books b
    LEFT OUTER JOIN author a ON b.author_id=a.id
    WHERE a.id IS NULL;

=== [362] of [1277] ============================= id=[919] ==
Q:  What is the grep option to not show output for unreadable files, i.e.,  

 "*Silent mode.  Nonexistent and unreadable files are ignored (i.e. their error messages are suppressed).*" 
questiontag_set : ['unix']
datetime_added  =[2015-04-07 06:31:41.547428+00:00]
datetime_updated=[2015-04-09 06:25:49.544256+00:00]
---------------------------------------------- id=[475] --
A:
-s, --no-messages

=== [363] of [1277] ============================= id=[918] ==
Q:  How do you make text bold or italics in markdown?
questiontag_set : ['markdown']
datetime_added  =[2015-04-06 21:39:25.460428+00:00]
datetime_updated=[2015-04-06 21:39:25.460459+00:00]
---------------------------------------------- id=[474] --
A:
Italics uses single asterisks: \*this text is italics\*  (*this text is italics*)

Bold uses double asterisks: \*\*this text is bold\*\* (**this text is bold**)

=== [364] of [1277] ============================= id=[917] ==
Q:  What does `git push origin mybranch:master` do?
questiontag_set : ['git']
datetime_added  =[2015-04-04 15:10:20.302597+00:00]
datetime_updated=[2015-04-04 15:10:20.302628+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [365] of [1277] ============================= id=[916] ==
Q:  What does `OVER... PARTITION BY` do?
questiontag_set : ['postgresql']
datetime_added  =[2015-04-04 01:42:33.070556+00:00]
datetime_updated=[2015-04-04 01:42:33.070587+00:00]
---------------------------------------------- id=[473] --
A:
> A window function call always contains an OVER clause directly following the window function's name and argument(s). This is what syntactically distinguishes it from a regular function or aggregate function. 

>The OVER clause determines exactly how the rows of the query are split up for processing by the window function. 

>The PARTITION BY list within OVER specifies dividing the rows into groups, or partitions, that share the same values of the PARTITION BY expression(s). For each row, the window function is computed across the rows that fall into the same partition as the current row.

[http://www.postgresql.org/docs/9.4/static/tutorial-window.html][1]


  [1]: http://www.postgresql.org/docs/9.4/static/tutorial-window.html

=== [366] of [1277] ============================= id=[914] ==
Q:  What does count() do for a GROUP BY?  e.g.,

    CREATE TABLE my_table (
        name TEXT
    );
    INSERT INTO my_table (name) VALUES ('Rob');
    INSERT INTO my_table (name) VALUES ('Rob');
    INSERT INTO my_table (name) VALUES ('Sara');
    
    SELECT name, count(*) FROM my_table GROUP BY name;


questiontag_set : ['sql']
datetime_added  =[2015-04-03 23:52:34.985634+00:00]
datetime_updated=[2015-04-03 23:52:34.985665+00:00]
---------------------------------------------- id=[472] --
A:
A count(*) is computed for the rows that make up each group, producing a single count for each group.

> GROUP BY Clause... Aggregate functions, if any are used, are computed across all rows making up each group, producing a separate value for each group.

[http://www.postgresql.org/docs/devel/static/sql-select.html#SQL-GROUPBY][1]


  [1]: http://www.postgresql.org/docs/devel/static/sql-select.html#SQL-GROUPBY

=== [367] of [1277] ============================= id=[913] ==
Q:  What is the difference between:

    SELECT count(*) FROM my_table;

and

    SELECT count(foo) FROM my_table;
questiontag_set : ['sql']
datetime_added  =[2015-04-03 22:48:54.000428+00:00]
datetime_updated=[2015-04-03 22:48:54.000458+00:00]
---------------------------------------------- id=[471] --
A:
count(*) - counts the number of input rows  
count(expression) - number of input rows for which the value of expression is not null


    CREATE TABLE my_table (
        name TEXT
    );
    INSERT INTO my_table (name) VALUES ('Rob');
    INSERT INTO my_table (name) VALUES ('Sara');
    INSERT INTO my_table (name) VALUES (NULL);
    
    -- returns 2 rows (where name != NULL):
    SELECT count(name) FROM my_table;

    -- returns 3 rows:
    SELECT count(*) FROM my_table;
[http://www.sqlfiddle.com/#!12/f3a05/9][1]

[http://www.postgresql.org/docs/devel/static/functions-aggregate.html][2]


  [1]: http://www.sqlfiddle.com/#!12/f3a05/9
  [2]: http://www.postgresql.org/docs/devel/static/functions-aggregate.html

=== [368] of [1277] ============================= id=[912] ==
Q:  -  [http://www.postgresql.org/docs/9.4/static/tutorial-window.html][1] Postgresql Window Functions (`OVER`, `PARTITION BY`)
- [http://www.postgresql.org/docs/9.4/static/sql-select.html][2] (`Window Clause` section)
- http://www.postgresql.org/docs/9.4/static/queries-table-expressions.html#QUERIES-WINDOW (`Window Function Processing`).
- [http://www.postgresql.org/docs/9.4/static/functions-window.html][3]
- [http://www.postgresql.org/docs/9.4/static/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS][4]


  [1]: http://www.postgresql.org/docs/9.4/static/tutorial-window.html
  [2]: http://www.postgresql.org/docs/9.4/static/sql-select.html
  [3]: http://www.postgresql.org/docs/9.4/static/functions-window.html
  [4]: http://www.postgresql.org/docs/9.4/static/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS
questiontag_set : ['postgresql']
datetime_added  =[2015-04-03 22:36:12.721935+00:00]
datetime_updated=[2015-04-04 14:40:54.899508+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [369] of [1277] ============================= id=[911] ==
Q:  Documentation for DISTINCT: [http://www.postgresql.org/docs/9.4/static/sql-select.html#SQL-DISTINCT][1]


  [1]: http://www.postgresql.org/docs/9.4/static/sql-select.html#SQL-DISTINCT
questiontag_set : ['postgresql']
datetime_added  =[2015-04-03 21:15:35.003088+00:00]
datetime_updated=[2015-04-03 21:15:35.003119+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [370] of [1277] ============================= id=[910] ==
Q:  See documentation for `count(*)` and `count(expression)` here: [http://www.postgresql.org/docs/9.4/static/functions-aggregate.html][1]


  [1]: http://www.postgresql.org/docs/9.4/static/functions-aggregate.html
questiontag_set : ['postgresql']
datetime_added  =[2015-04-03 21:14:58.225774+00:00]
datetime_updated=[2015-04-03 21:14:58.225806+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [371] of [1277] ============================= id=[909] ==
Q:  Review the Joel Test: [http://www.joelonsoftware.com/articles/fog0000000043.html][1]


  [1]: http://www.joelonsoftware.com/articles/fog0000000043.html
questiontag_set : ['software engineering culture']
datetime_added  =[2015-04-03 18:36:22.070712+00:00]
datetime_updated=[2015-04-03 18:36:22.070742+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [372] of [1277] ============================= id=[908] ==
Q:  How do you find the documents for a source trap or for a feed?
questiontag_set : ['trapit', 'trapit_mom']
datetime_added  =[2015-04-03 15:18:12.246315+00:00]
datetime_updated=[2015-04-03 15:18:12.246345+00:00]
---------------------------------------------- id=[470] --
A:
    feed.documents

-or-

    trap.feed.documents

=== [373] of [1277] ============================= id=[907] ==
Q:  System-installed python packages don't get installed into virtualenv's.  [per Luke, 4/2/15]
questiontag_set : ['python']
datetime_added  =[2015-04-02 20:45:41.924148+00:00]
datetime_updated=[2015-04-02 20:45:41.924179+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [374] of [1277] ============================= id=[906] ==
Q:  There are two ways of dealing with python dependencies:

1. pin everything, and move a pin when needed and deal with all the issues at that point (which tends to be more difficult and not obvious)
1. unpin everything, and constantly get latest versions and deal with small problems as they arise [Luke's preference]
questiontag_set : ['python']
datetime_added  =[2015-04-02 20:45:17.514694+00:00]
datetime_updated=[2015-04-02 20:45:17.514735+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [375] of [1277] ============================= id=[905] ==
Q:  Cloudability - Portland company; "data-driven cloud cost management"; 718 SW Alder St
questiontag_set : ['portland companies']
datetime_added  =[2015-04-02 19:55:44.317173+00:00]
datetime_updated=[2015-04-02 19:55:44.317203+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [376] of [1277] ============================= id=[904] ==
Q:  [https://orchestrate.io/][1] - Portland company, service for databases; "database as a service"

Free - 50k API calls per month, 1 app  
$49/month - 500k API calls per month, 2 apps


  [1]: https://orchestrate.io/
questiontag_set : ['databases', 'web services']
datetime_added  =[2015-04-02 19:47:20.848515+00:00]
datetime_updated=[2015-04-02 19:50:02.332158+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [377] of [1277] ============================= id=[903] ==
Q:  Amazon adds email addresses that cause a hard bounce to a suppression list, and will not send emails to that address anymore.  To remove an address from the suppression list: [http://docs.aws.amazon.com/ses/latest/DeveloperGuide/remove-from-suppression-list.html][1]


  [1]: http://docs.aws.amazon.com/ses/latest/DeveloperGuide/remove-from-suppression-list.html
questiontag_set : ['aws']
datetime_added  =[2015-04-01 23:59:53.541295+00:00]
datetime_updated=[2015-04-01 23:59:53.541334+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [378] of [1277] ============================= id=[902] ==
Q:  Where do packages get installed in a virtual env? 
questiontag_set : ['python']
datetime_added  =[2015-04-01 23:56:19.001777+00:00]
datetime_updated=[2015-04-01 23:56:19.001808+00:00]
---------------------------------------------- id=[469] --
A:
Assuming the directory for the virtual environment is `.virt`, the packages will be here:

    .virt/local/lib/python2.7/site-packages

=== [379] of [1277] ============================= id=[901] ==
Q:  [http://repl.it/][1]


  [1]: http://repl.it/
questiontag_set : ['web pages to review', 'python']
datetime_added  =[2015-03-31 22:56:15.871072+00:00]
datetime_updated=[2015-03-31 22:56:15.871104+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [380] of [1277] ============================= id=[900] ==
Q:  [http://www.quora.com/What-startups-do-we-still-need][1]


  [1]: http://www.quora.com/What-startups-do-we-still-need
questiontag_set : ['ideas']
datetime_added  =[2015-03-31 16:59:32.832996+00:00]
datetime_updated=[2015-03-31 16:59:32.833027+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [381] of [1277] ============================= id=[899] ==
Q:  [https://www.upstart.com][1]
 - investing (only for accredited investors)

  [1]: https://www.upstart.com
questiontag_set : ['investing']
datetime_added  =[2015-03-31 16:56:48.456293+00:00]
datetime_updated=[2015-03-31 16:56:48.456324+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [382] of [1277] ============================= id=[898] ==
Q:  [http://www.quora.com/Can-you-buy-human-shares][1]


  [1]: http://www.quora.com/Can-you-buy-human-shares
questiontag_set : ['unassimilated']
datetime_added  =[2015-03-31 16:53:44.737175+00:00]
datetime_updated=[2015-03-31 16:53:44.737206+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [383] of [1277] ============================= id=[897] ==
Q:  https://kmikeym.com - K Michael Merrill - sold shares of himself in exchange for voting on what he does
questiontag_set : ['portland']
datetime_added  =[2015-03-31 16:53:09.545767+00:00]
datetime_updated=[2015-03-31 16:53:09.545798+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [384] of [1277] ============================= id=[896] ==
Q:  [http://www.quora.com/What-are-some-of-the-best-as-in-the-most-revealing-technical-interview-questions-for-a-generalist-software-engineer][1] - inteviewing questions


  [1]: http://www.quora.com/What-are-some-of-the-best-as-in-the-most-revealing-technical-interview-questions-for-a-generalist-software-engineer
questiontag_set : ['interviewing']
datetime_added  =[2015-03-31 16:36:52.767818+00:00]
datetime_updated=[2015-03-31 16:36:52.767849+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [385] of [1277] ============================= id=[895] ==
Q:  http://www.quora.com/How-do-software-companies-compensate-for-websites-like-CareerCup-and-Glassdoor - interviewing
questiontag_set : ['interviewing']
datetime_added  =[2015-03-31 16:36:16.863729+00:00]
datetime_updated=[2015-03-31 16:36:16.863760+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [386] of [1277] ============================= id=[894] ==
Q:  http://www.careercup.com/ - coding interview questions
questiontag_set : ['interviewing']
datetime_added  =[2015-03-31 16:34:21.059735+00:00]
datetime_updated=[2015-03-31 16:34:21.059767+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [387] of [1277] ============================= id=[893] ==
Q:  What linux program is like grep but can take into account file types?
questiontag_set : ['unix']
datetime_added  =[2015-03-30 23:03:16.098916+00:00]
datetime_updated=[2015-03-30 23:03:16.098947+00:00]
---------------------------------------------- id=[468] --
A:
ack

[http://linux.die.net/man/1/ack][1]


  [1]: http://linux.die.net/man/1/ack

=== [388] of [1277] ============================= id=[892] ==
Q:  [https://www.sparkfun.com/][1]
[http://www.adafruit.com/][2]


  [1]: https://www.sparkfun.com/
  [2]: http://www.adafruit.com/
questiontag_set : ['electronics']
datetime_added  =[2015-03-30 18:52:54.945929+00:00]
datetime_updated=[2015-03-30 18:52:54.945960+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [389] of [1277] ============================= id=[891] ==
Q:  [https://sesblog.amazon.com/post/TxJE1JNZ6T9JXK/Handling-Bounces-and-Complaints][1] - link that Luke gave me that describes how we get bounces and complaints from Amazon via SES, SNS, SQS


  [1]: https://sesblog.amazon.com/post/TxJE1JNZ6T9JXK/Handling-Bounces-and-Complaints
questiontag_set : ['email']
datetime_added  =[2015-03-30 18:18:31.658419+00:00]
datetime_updated=[2015-03-30 18:18:31.658450+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [390] of [1277] ============================= id=[890] ==
Q:  [http://portlandmaps.com/][1]


  [1]: http://portlandmaps.com/
questiontag_set : ['portland']
datetime_added  =[2015-03-30 17:36:52.092661+00:00]
datetime_updated=[2015-03-30 17:36:52.092692+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [391] of [1277] ============================= id=[889] ==
Q:  https://www.screenmailer.com/ - app for recording screencasts
questiontag_set : ['unassimilated']
datetime_added  =[2015-03-30 16:38:59.864184+00:00]
datetime_updated=[2015-03-30 16:38:59.864216+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [392] of [1277] ============================= id=[888] ==
Q:  If you were to go to a shaman / medicine person / holy person and complain of being disheartened / dispirited / depressed, they would ask one of four questions:

1. When did you stop singing?  (stopped bringing authentic voice forward)
1. When did you stop dancing (moving in our body)?  (lost connection to body wisdom)
1. When did you stop being enchanted by stories?  (in particular your own life story)  (lost connection to fire or heart)
1. When did you stop being comforted by the sweet territory of silence?  (began to mistrust mystery / unfamiliar / unknown; stopped being an explorer in reflection and contemplation)

Angeles Arrien [https://www.youtube.com/watch?t=32&v=HUJQlVeGZzY][1]


  [1]: https://www.youtube.com/watch?t=32&v=HUJQlVeGZzY
questiontag_set : ['spirituality']
datetime_added  =[2015-03-29 08:54:42.683752+00:00]
datetime_updated=[2015-03-29 08:58:48.788506+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [393] of [1277] ============================= id=[887] ==
Q:  In The Four-Fold Way, anthropologist Angeles Arrien identifies four basic human addictions. These are “life-negating” patterns that underlie all addictions, whether to drugs, food, work, sex, etc. These four basic addictions are:

 1. intensity / love  
The addiction to intensity. This shows up when love is lacking.

 2. perfection / excellence  
The addiction to perfection. This appears when true excellence is
    misunderstood and true power is unrealized.

 3. need-to-know / trust  
The addiction to knowledge. This is the opposite of wisdom.

 4. what's-not-working / what-is-working  
The addiction to focusing on what's not working rather than what is working. What’s missing here is seeing the big picture.

[http://www.therealcenter.org/TheFourUniversalAddictions.php][1]
[http://newconnexion.net/articles/index.cfm/1999/07/arrien.html][2]


  [1]: http://www.therealcenter.org/TheFourUniversalAddictions.php
  [2]: http://newconnexion.net/articles/index.cfm/1999/07/arrien.html
questiontag_set : ['unassimilated']
datetime_added  =[2015-03-29 08:48:49.705048+00:00]
datetime_updated=[2015-03-29 08:48:49.705077+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [394] of [1277] ============================= id=[886] ==
Q:  The four Ways reflect a pervasive belief that life will be simple if we practice four basic principles: 

 1. show up or choose to be present, 
 2. pay attention to what has heart and meaning, 
 3. tell the truth without blame or judgment, 
 4. be open, rather than attached to, the outcome.

Details:

1. The task of the warrior is to show up, to be visible and empower others through example and intention.  
 It is important to remember that when challenges present themselves, it is the warrior's way to embrace them with full-bodied presence rather than to constrict in fear.
2. The task of the healer is to pay attention to what has heart and meaning and to access the human resource of love.
3. The task of the visionary is to tell the truth without blame or judgment. 
4. The task of the teacher is to be open, rather than attached, to outcomes.

Angeles Arrien, "The Fourfold Way"
[http://www.spiritsound.com/arrien.html][1]


  [1]: http://www.spiritsound.com/arrien.html
questiontag_set : ['spirituality']
datetime_added  =[2015-03-29 08:48:31.111372+00:00]
datetime_updated=[2015-03-29 09:04:45.678191+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [395] of [1277] ============================= id=[885] ==
Q:  [http://newconnexion.net/articles/index.cfm/1999/07/arrien.html][1]


  [1]: http://newconnexion.net/articles/index.cfm/1999/07/arrien.html
questiontag_set : ['spirituality']
datetime_added  =[2015-03-29 08:09:11.819399+00:00]
datetime_updated=[2015-03-29 08:09:11.819430+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [396] of [1277] ============================= id=[884] ==
Q:  [https://playfab.com/blog/2015/03/17/how-prioritize-when-everything-pri-1][1]


  [1]: https://playfab.com/blog/2015/03/17/how-prioritize-when-everything-pri-1
questiontag_set : ['project management']
datetime_added  =[2015-03-28 21:41:32.548268+00:00]
datetime_updated=[2015-03-28 21:41:32.548299+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [397] of [1277] ============================= id=[883] ==
Q:  On Paypal, there is no fee if:

1. use bank account, or
1. use PayPal balance

for domestic transactions

>No fee if you use your PayPal balance or bank account for domestic transactions.
questiontag_set : ['unassimilated']
datetime_added  =[2015-03-28 17:36:44.052669+00:00]
datetime_updated=[2015-03-28 17:36:44.052700+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [398] of [1277] ============================= id=[882] ==
Q:  [http://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense][1]


  [1]: http://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense
questiontag_set : ['software engineering']
datetime_added  =[2015-03-27 22:23:52.241191+00:00]
datetime_updated=[2015-03-27 22:23:52.241222+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [399] of [1277] ============================= id=[881] ==
Q:  [http://www.quora.com/What-are-the-best-ways-to-improve-Django-performance][1]


  [1]: http://www.quora.com/What-are-the-best-ways-to-improve-Django-performance
questiontag_set : ['django']
datetime_added  =[2015-03-27 18:35:33.239177+00:00]
datetime_updated=[2015-03-27 18:35:33.239209+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [400] of [1277] ============================= id=[880] ==
Q:  > When the "Reply-To:" field is present, it
   indicates the address(es) to which the author of the message suggests
   that replies be sent.  In the absence of the "Reply-To:" field,
   replies SHOULD by default be sent to the mailbox(es) specified in the
   "From:" field unless otherwise specified by the person composing the
   reply.

[http://tools.ietf.org/html/rfc5322#section-3.6.2][1]


  [1]: http://tools.ietf.org/html/rfc5322#section-3.6.2
questiontag_set : ['unassimilated']
datetime_added  =[2015-03-27 18:08:53.348220+00:00]
datetime_updated=[2015-03-27 18:08:53.348249+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [401] of [1277] ============================= id=[879] ==
Q:  [https://github.com/ASKBOT/askbot-devel][1] -- stackoverflow clone; Django


  [1]: https://github.com/ASKBOT/askbot-devel
questiontag_set : ['web pages to review', 'review source code']
datetime_added  =[2015-03-27 14:33:43.237874+00:00]
datetime_updated=[2015-03-27 14:33:43.237905+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [402] of [1277] ============================= id=[878] ==
Q:  [http://www.hackster.io/teensy][1]


  [1]: http://www.hackster.io/teensy
questiontag_set : ['web pages to review']
datetime_added  =[2015-03-27 14:28:32.631122+00:00]
datetime_updated=[2015-03-27 14:28:32.631152+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [403] of [1277] ============================= id=[877] ==
Q:  [https://www.pjrc.com/teensy/][1]

Tom Marshall has one of these.  He mentioned it 3/26/15 in Flowdock.

  [1]: https://www.pjrc.com/teensy/
questiontag_set : ['web pages to review']
datetime_added  =[2015-03-27 14:20:01.833542+00:00]
datetime_updated=[2015-03-27 14:20:01.833581+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [404] of [1277] ============================= id=[876] ==
Q:  [http://www.intel.com/content/www/us/en/do-it-yourself/edison.html][1]

Tom Marshall has one of these.  He mentioned it in Flowdock 3/27/15.

  [1]: http://www.intel.com/content/www/us/en/do-it-yourself/edison.html
questiontag_set : ['web pages to review']
datetime_added  =[2015-03-27 14:19:16.561686+00:00]
datetime_updated=[2015-03-27 14:19:16.561717+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [405] of [1277] ============================= id=[875] ==
Q:  [https://github.com/wrobstory/pdxpython2015][1]


  [1]: https://github.com/wrobstory/pdxpython2015
questiontag_set : ['python']
datetime_added  =[2015-03-27 02:07:22.423581+00:00]
datetime_updated=[2015-03-27 02:07:22.423612+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [406] of [1277] ============================= id=[874] ==
Q:  Why do we sometimes see dependency issues with a Trapit package (e.g., mom) with the release that we don't see in our local virt when developing, and vice versa?
questiontag_set : ['trapit', 'python']
datetime_added  =[2015-03-20 17:48:54.767041+00:00]
datetime_updated=[2015-03-20 17:48:54.767072+00:00]
---------------------------------------------- id=[467] --
A:
Something about how setuptools enforces dependencies in the wrapper scripts sets this off.
Sadly, this is setuptools trying to protect us from dependency errors, but it does it too late to be of any help.
And everything might be fine anyway, if it wasn't trying to be so helpful :)

[per Luke, Flowdock, 3/20/15 9:55am]

=== [407] of [1277] ============================= id=[873] ==
Q:  [http://rhodesmill.org/brandon/2014/pycon-trivia-night/][1]


  [1]: http://rhodesmill.org/brandon/2014/pycon-trivia-night/
questiontag_set : ['python']
datetime_added  =[2015-03-20 16:35:14.765996+00:00]
datetime_updated=[2015-03-20 16:35:14.766035+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [408] of [1277] ============================= id=[872] ==
Q:  [http://www.quora.com/Is-Donald-Knuths-The-Art-of-Computer-Programming-worth-reading][1]


  [1]: http://www.quora.com/Is-Donald-Knuths-The-Art-of-Computer-Programming-worth-reading
questiontag_set : ['web pages to review']
datetime_added  =[2015-03-20 00:28:21.918948+00:00]
datetime_updated=[2015-03-20 00:28:21.918979+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [409] of [1277] ============================= id=[871] ==
Q:  [http://www.quora.com/What-are-some-good-coding-practices-a-developer-needs-to-follow][1]


  [1]: http://www.quora.com/What-are-some-good-coding-practices-a-developer-needs-to-follow
questiontag_set : ['web pages to review']
datetime_added  =[2015-03-20 00:27:10.243569+00:00]
datetime_updated=[2015-03-20 00:27:10.243608+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [410] of [1277] ============================= id=[870] ==
Q:  In Postgresql, how can you tell it to use a default value for a column?
questiontag_set : ['postgresql', 'sql']
datetime_added  =[2015-03-19 23:12:36.611139+00:00]
datetime_updated=[2015-03-19 23:12:36.611171+00:00]
---------------------------------------------- id=[466] --
A:
Use `DEFAULT` for the value, or DEFAULT VALUES instead of specifying columns, e.g.,


    INSERT INTO my_table DEFAULT VALUES;

    INSERT INTO my_table (id,id2) VALUES (DEFAULT,DEFAULT);

[http://www.postgresql.org/docs/9.4/static/sql-insert.html][1]


  [1]: http://www.postgresql.org/docs/9.4/static/sql-insert.html

=== [411] of [1277] ============================= id=[869] ==
Q:  [http://www.quora.com/How-do-recruiters-handle-salary-negotiations][1]


  [1]: http://www.quora.com/How-do-recruiters-handle-salary-negotiations
questiontag_set : ['web pages to review']
datetime_added  =[2015-03-19 22:29:08.259166+00:00]
datetime_updated=[2015-03-19 22:29:08.259197+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [412] of [1277] ============================= id=[868] ==
Q:  [http://www.quora.com/What-are-some-good-ways-to-figure-out-whether-you-deserve-a-salary-raise-as-a-programmer][1]


  [1]: http://www.quora.com/What-are-some-good-ways-to-figure-out-whether-you-deserve-a-salary-raise-as-a-programmer
questiontag_set : ['web pages to review']
datetime_added  =[2015-03-19 22:27:44.954759+00:00]
datetime_updated=[2015-03-19 22:27:44.954789+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [413] of [1277] ============================= id=[867] ==
Q:  What is the range of values for the Postgresql SERIAL data type?
questiontag_set : ['postgresql', 'sql']
datetime_added  =[2015-03-19 22:22:30.681881+00:00]
datetime_updated=[2015-03-19 22:22:30.681912+00:00]
---------------------------------------------- id=[465] --
A:
1 to 2,147,483,647 (2.1 billion)

[http://www.postgresql.org/docs/9.4/static/datatype-numeric.html][1]  


  [1]: http://www.postgresql.org/docs/9.4/static/datatype-numeric.html

=== [414] of [1277] ============================= id=[866] ==
Q:  Is UNIQUE or PRIMARY KEY needed when using the SERIAL datatype for a Postgresql column?
questiontag_set : ['postgresql', 'sql']
datetime_added  =[2015-03-19 22:20:45.106315+00:00]
datetime_updated=[2015-03-19 22:20:45.106346+00:00]
---------------------------------------------- id=[464] --
A:
Yes.  SERIAL does NOT imply these, so you need to add one or the other if you want the column to be unique.

[http://www.postgresql.org/docs/9.4/static/datatype-numeric.html][1]


  [1]: http://www.postgresql.org/docs/9.4/static/datatype-numeric.html

=== [415] of [1277] ============================= id=[865] ==
Q:  In Postgresql, what's the easiest way of creating an auto-incrementing column?
questiontag_set : ['postgresql', 'sql']
datetime_added  =[2015-03-19 22:18:34.618928+00:00]
datetime_updated=[2015-03-19 22:18:34.618960+00:00]
---------------------------------------------- id=[463] --
A:
Use a SERIAL column (SERIAL, SMALLSERIAL, or BIGSERIAL).

e.g., 

    CREATE TABLE my_table (
        my_column SERIAL
    );

[http://www.postgresql.org/docs/9.4/static/datatype-numeric.html][1]

Note that you also should specify either PRIMARY KEY or UNIQUE.

  [1]: http://www.postgresql.org/docs/9.4/static/datatype-numeric.html

=== [416] of [1277] ============================= id=[864] ==
Q:  Is `NOT NULL` needed for a `SERIAL` column?
questiontag_set : ['sql', 'postgresql']
datetime_added  =[2015-03-19 21:50:46.030602+00:00]
datetime_updated=[2015-03-19 21:50:46.030634+00:00]
---------------------------------------------- id=[462] --
A:
No, `NOT NULL` is not needed.  NULL is not allowed for a SERIAL column.


    CREATE TABLE tablename (
        colname SERIAL
    );

is equivalent to specifying:

    CREATE SEQUENCE tablename_colname_seq;
    CREATE TABLE tablename (
        colname integer NOT NULL DEFAULT nextval('tablename_colname_seq')
    );
    ALTER SEQUENCE tablename_colname_seq OWNED BY tablename.colname;

[http://www.postgresql.org/docs/9.4/static/datatype-numeric.html][1]


  [1]: http://www.postgresql.org/docs/9.4/static/datatype-numeric.html



=== [417] of [1277] ============================= id=[863] ==
Q:  [https://en.wikipedia.org/wiki/Script_kiddie][1]


  [1]: https://en.wikipedia.org/wiki/Script_kiddie
questiontag_set : ['security']
datetime_added  =[2015-03-19 21:44:58.362352+00:00]
datetime_updated=[2015-03-19 21:44:58.362391+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [418] of [1277] ============================= id=[862] ==
Q:  How do you show the logs for every branch in git?
questiontag_set : ['git']
datetime_added  =[2015-03-19 13:20:49.804671+00:00]
datetime_updated=[2015-03-19 13:20:49.804702+00:00]
---------------------------------------------- id=[461] --
A:
`git log --all`

=== [419] of [1277] ============================= id=[861] ==
Q:  [https://en.wikipedia.org/wiki/Hamming_weight][1]


  [1]: https://en.wikipedia.org/wiki/Hamming_weight
questiontag_set : ['computer science']
datetime_added  =[2015-03-18 18:58:49.045728+00:00]
datetime_updated=[2015-03-18 18:58:49.045761+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [420] of [1277] ============================= id=[860] ==
Q:  [https://en.wikipedia.org/wiki/Grace_(Christianity)][1]


  [1]: https://en.wikipedia.org/wiki/Grace_%28Christianity%29
questiontag_set : ['spirituality', 'vocabulary']
datetime_added  =[2015-03-18 15:10:27.636176+00:00]
datetime_updated=[2015-03-18 15:10:27.636207+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [421] of [1277] ============================= id=[859] ==
Q:  [https://en.wikipedia.org/wiki/Divine_grace][1]


  [1]: https://en.wikipedia.org/wiki/Divine_grace
questiontag_set : ['vocabulary', 'spirituality']
datetime_added  =[2015-03-18 15:09:41.636601+00:00]
datetime_updated=[2015-03-18 15:09:41.636633+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [422] of [1277] ============================= id=[858] ==
Q:  Here's what I did to get spacemacs / emacs-mac installed on my Mac on 3/17/15:

brew doctor
brew update
brew tap railwaycat/emacsmacport
brew install emacs-mac

reference: [https://github.com/syl20bnr/spacemacs][1]


  [1]: https://github.com/syl20bnr/spacemacs
questiontag_set : ['osx (OSX) (Mac)']
datetime_added  =[2015-03-17 18:11:59.786001+00:00]
datetime_updated=[2015-03-17 18:11:59.786044+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [423] of [1277] ============================= id=[857] ==
Q:  In SQLAlchemy, what do you call the alternative to the ORM of creating queries?
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-03-17 17:36:53.190989+00:00]
datetime_updated=[2015-03-17 17:36:53.191022+00:00]
---------------------------------------------- id=[460] --
A:
SQL Expression Language

[http://docs.sqlalchemy.org/en/latest/core/tutorial.html][1]


  [1]: http://docs.sqlalchemy.org/en/latest/core/tutorial.html

=== [424] of [1277] ============================= id=[856] ==
Q:  On 3/17/15 I tried installing twurl on my MacBook but could not get it to run (ruby version ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-darwin13.0]).  I then tried it on staging-1 and was able to use it successfully there (ruby version ruby 1.8.7 (2011-06-30 patchlevel 352) [x86_64-linux])
questiontag_set : ['ruby']
datetime_added  =[2015-03-17 08:04:21.481236+00:00]
datetime_updated=[2015-03-17 08:04:21.481266+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [425] of [1277] ============================= id=[855] ==
Q:  How did I resolve this issue when installing twurl:

    rob@Robs-MacBook-Pro twurl [master] % rake build
    rake aborted!
    cannot load such file -- bundler
    /Users/rob/local.git/twurl/Rakefile:3:in `<top (required)>'
    (See full trace by running task with --trace)
questiontag_set : ['ruby']
datetime_added  =[2015-03-17 07:46:39.861228+00:00]
datetime_updated=[2015-03-17 07:46:39.861258+00:00]
---------------------------------------------- id=[459] --
A:
    sudo gem install bundler


per [http://stackoverflow.com/questions/7483515/rake-aborted-no-such-file-to-load-bundler-setup-rails-3-1][1]


  [1]: http://stackoverflow.com/questions/7483515/rake-aborted-no-such-file-to-load-bundler-setup-rails-3-1

=== [426] of [1277] ============================= id=[854] ==
Q:  How do you add stdout to an existing logger?
questiontag_set : ['python']
datetime_added  =[2015-03-16 10:21:06.364420+00:00]
datetime_updated=[2015-03-16 10:21:06.364450+00:00]
---------------------------------------------- id=[458] --
A:
    import logging, sys
    stdoutHandler = logging.StreamHandler(sys.stdout)
    log = logging.getLogger('sqlalchemy.engine')
    log.setLevel(logging.DEBUG)  # INFO ==> log queries
    log.addHandler(stdoutHandler)

=== [427] of [1277] ============================= id=[853] ==
Q:  [https://docs.python.org/2/howto/unicode.html][1]


  [1]: https://docs.python.org/2/howto/unicode.html
questiontag_set : ['python', 'priority_high']
datetime_added  =[2015-03-16 08:34:19.566312+00:00]
datetime_updated=[2015-03-16 08:34:19.566354+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [428] of [1277] ============================= id=[852] ==
Q:  In iTerm, how do you change 2 panes to go from being split vertically to horizontally, or vice versa?
questiontag_set : ['osx (OSX) (Mac)']
datetime_added  =[2015-03-15 16:20:55.127295+00:00]
datetime_updated=[2015-03-15 16:20:55.127326+00:00]
---------------------------------------------- id=[457] --
A:
click on "down arrow" icon in to right-hand corner) > Move session to split pane > (move the mouse in the pane to where you want it, and iTerm will light up the screen and show where it will go as you move the mouse around)



=== [429] of [1277] ============================= id=[851] ==
Q:  [https://en.wikipedia.org/wiki/Contact_high][1]


  [1]: https://en.wikipedia.org/wiki/Contact_high
questiontag_set : ['vocabulary']
datetime_added  =[2015-03-15 04:57:40.500497+00:00]
datetime_updated=[2015-03-15 04:57:40.500541+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [430] of [1277] ============================= id=[850] ==
Q:  What does sqlalchemy's query.one() method do if there are no matching rows?
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-03-14 23:04:59.244711+00:00]
datetime_updated=[2015-03-14 23:04:59.244742+00:00]
---------------------------------------------- id=[456] --
A:
It raises sqlalchemy.orm.exc.NoResultFound if the query selects no rows. 

It raises sqlalchemy.orm.exc.MultipleResultsFound if multiple rows match.

=== [431] of [1277] ============================= id=[849] ==
Q:  What is the MANIFEST.in file used for when creating a package release?
questiontag_set : ['python']
datetime_added  =[2015-03-14 19:05:48.962545+00:00]
datetime_updated=[2015-03-14 19:05:48.962584+00:00]
---------------------------------------------- id=[455] --
A:
- [https://docs.python.org/2/distutils/sourcedist.html][1]
- [https://wiki.python.org/moin/Distutils/Tutorial][2]
- [http://stackoverflow.com/questions/24727709/i-dont-understand-python-manifest-in][3] 


  [1]: https://docs.python.org/2/distutils/sourcedist.html
  [2]: https://wiki.python.org/moin/Distutils/Tutorial
  [3]: http://stackoverflow.com/questions/24727709/i-dont-understand-python-manifest-in

=== [432] of [1277] ============================= id=[848] ==
Q:  phylogeny / phylogenesis
questiontag_set : ['vocabulary']
datetime_added  =[2015-03-14 18:15:48.966531+00:00]
datetime_updated=[2015-03-14 18:15:48.966561+00:00]
---------------------------------------------- id=[454] --
A:
- [https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=define+phylogenesis][1]
- [https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=define:phylogeny][2]


  [1]: https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=define%20phylogenesis
  [2]: https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=define:phylogeny

=== [433] of [1277] ============================= id=[847] ==
Q:  recapitulate
questiontag_set : ['vocabulary']
datetime_added  =[2015-03-14 18:13:48.960862+00:00]
datetime_updated=[2015-03-14 18:13:48.960892+00:00]
---------------------------------------------- id=[453] --
A:
[https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=define%3Arecapitulate][1]


  [1]: https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=define:recapitulate

=== [434] of [1277] ============================= id=[846] ==
Q:  In git, how do you see the diff of changes between staging and HEAD?
questiontag_set : ['git']
datetime_added  =[2015-03-14 16:17:40.796914+00:00]
datetime_updated=[2015-03-14 16:17:40.796943+00:00]
---------------------------------------------- id=[452] --
A:
    git diff --staged

=== [435] of [1277] ============================= id=[845] ==
Q:  - do things that aren't practical / no purpose
- start doing some writing every day
- soft focus
- guided movements every day (find a routine time)
- morning & afternoon meditation every day
- breathe & soften (find a routine)
- soften; loosen grip  (love is softening, fear is contracting)
- I choose love (not fear)
- believe in "more is possible"
- I choose to be responsible for my own resistance
- trust in what is around the corner (that I will have the tools to deal with it)
- "I am willing to cooperate" (with Spirit)
- Movement Center - Chod (Vajrayana practice)
- I am me, and you are you
- don't be afraid of suffering; turn to it
- give myself permission to feel my feelings; when I'm angry or scared, delve in and explore
- take up more of my own space
- desire and willingness go a long ways
- pray (in writing; speak out loud)
- ask Sara for help
- ask Cindy for empathy
- ask for help at work!
- Be aware of what I am thinking.  Where am I putting my energy?
- daily gratitude
- Be aware of when I'm feeling afraid of being criticized at work (e.g., spending a lot of time figuring something out to get it right instead of asking for help).  I choose to feel confident and open to ask questions.
- My desire: community building; social networking; one-on-one's
- My desire: relaxation, softening, (no worry, fear, or stress)
- My desire: quiz program
- My desire: self-education; quiz program
- My desire: strong relationship with Sara
- My desire: strong relationship with River
questiontag_set : ['rob_habits']
datetime_added  =[2015-03-14 14:56:16.913408+00:00]
datetime_updated=[2015-03-14 14:56:16.913440+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [436] of [1277] ============================= id=[844] ==
Q:  In git, how do you undo a `git add` (i.e., take a file out of staging and put it back in the working area)?
questiontag_set : ['git']
datetime_added  =[2015-03-13 23:15:50.329499+00:00]
datetime_updated=[2015-03-13 23:15:50.329531+00:00]
---------------------------------------------- id=[451] --
A:
git reset HEAD <file>...

This will unstage the files and put them back in the working area.  This command is displayed when you do `git status`

=== [437] of [1277] ============================= id=[843] ==
Q:  How do you see what groups a user belongs to (is a member of, not "is managed by")?
questiontag_set : ['trapit_mom']
datetime_added  =[2015-03-13 12:56:53.559071+00:00]
datetime_updated=[2015-03-13 12:56:53.559102+00:00]
---------------------------------------------- id=[450] --
A:
    user.groups  
(note that this shows all group types -- `team, role, ...`)

To see only the teams (groups of type=team) that a user belongs to:
  
    user.get_security()[1]

(whereas `user.get_teams()` are the teams that can manage the user)

=== [438] of [1277] ============================= id=[842] ==
Q:  How do you see what users a group (team, role, ...) has?
questiontag_set : ['trapit_mom']
datetime_added  =[2015-03-13 12:18:48.236449+00:00]
datetime_updated=[2015-03-13 12:18:48.236480+00:00]
---------------------------------------------- id=[449] --
A:
    team1 = org.group_by_name(name='team1', type='team')
    team1.users

=== [439] of [1277] ============================= id=[841] ==
Q:  What is the mom method to get a group for an org with a given name?
questiontag_set : ['trapit', 'trapit_mom']
datetime_added  =[2015-03-13 12:17:14.390123+00:00]
datetime_updated=[2015-03-13 12:17:14.390156+00:00]
---------------------------------------------- id=[448] --
A:
    group = org.group_by_name(name='foo', type='team')

=== [440] of [1277] ============================= id=[840] ==
Q:  How do you add an element to a set in python?
questiontag_set : ['python']
datetime_added  =[2015-03-13 10:58:33.748860+00:00]
datetime_updated=[2015-03-13 10:58:33.748894+00:00]
---------------------------------------------- id=[447] --
A:
    my_set = {1,2}
    my_set.add(3)

=== [441] of [1277] ============================= id=[839] ==
Q:  What does this return in sqlalchemy:
    
        query = session.query(MyTable.name).all()
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-03-13 10:42:09.112262+00:00]
datetime_updated=[2015-03-13 10:42:09.112292+00:00]
---------------------------------------------- id=[446] --
A:
It returns a list of tuples, e.g.,

    [('row-1',), ('row-2',)]

=== [442] of [1277] ============================= id=[838] ==
Q:  What is the term that means "the number of elements in the set" in mathematics?
questiontag_set : ['vocabulary', 'mathematics', 'priority_high']
datetime_added  =[2015-03-13 10:03:15.678415+00:00]
datetime_updated=[2015-03-13 10:03:33.813466+00:00]
---------------------------------------------- id=[445] --
A:
cardinality

[https://en.wikipedia.org/wiki/Cardinality][1]


  [1]: https://en.wikipedia.org/wiki/Cardinality

=== [443] of [1277] ============================= id=[837] ==
Q:  What is "cardinality"?
questiontag_set : ['vocabulary', 'priority_high']
datetime_added  =[2015-03-13 10:01:49.509043+00:00]
datetime_updated=[2015-03-13 10:03:52.974074+00:00]
---------------------------------------------- id=[444] --
A:
The number of elements of a set.

[https://en.wikipedia.org/wiki/Cardinality][1]


  [1]: https://en.wikipedia.org/wiki/Cardinality

=== [444] of [1277] ============================= id=[836] ==
Q:  Who is the Polish researcher and author of the spaced-repetition flashcard software SuperMemo?
questiontag_set : ['learning']
datetime_added  =[2015-03-12 20:55:42.705432+00:00]
datetime_updated=[2015-03-12 20:55:56.984849+00:00]
---------------------------------------------- id=[443] --
A:
Dr. Piotr Wozniak

[https://en.wikipedia.org/wiki/Piotr_Wo%C5%BAniak_(researcher)][1]


  [1]: https://en.wikipedia.org/wiki/Piotr_Wo%C5%BAniak_%28researcher%29

=== [445] of [1277] ============================= id=[835] ==
Q:  What are 3 popular software programs that use spaced repetition with flashcards?
questiontag_set : ['learning']
datetime_added  =[2015-03-12 20:54:35.123004+00:00]
datetime_updated=[2015-03-12 20:54:35.123046+00:00]
---------------------------------------------- id=[442] --
A:
1. Anki
2. Duolingo
3. Mnemosyne
4. SuperMemo

[https://en.wikipedia.org/wiki/Spaced_repetition][1]


  [1]: https://en.wikipedia.org/wiki/Spaced_repetition

=== [446] of [1277] ============================= id=[834] ==
Q:  What is the name of the technique for reviewing information frequently to learn it?
questiontag_set : ['learning']
datetime_added  =[2015-03-12 20:51:59.977392+00:00]
datetime_updated=[2015-03-12 20:51:59.977424+00:00]
---------------------------------------------- id=[441] --
A:
spaced repetition

[https://en.wikipedia.org/wiki/Spaced_repetition][1]


  [1]: https://en.wikipedia.org/wiki/Spaced_repetition

=== [447] of [1277] ============================= id=[833] ==
Q:  What does this evaluate to in python?

    filter(None, [0,1,True,False,None])
questiontag_set : ['python']
datetime_added  =[2015-03-12 10:24:37.020362+00:00]
datetime_updated=[2015-03-12 10:24:37.020393+00:00]
---------------------------------------------- id=[440] --
A:
[1, True]

(all elements that evaluate to False are removed)

> filter(function, iterable)  
Construct a list from those elements of iterable for which function returns true. iterable may be either a sequence, a container which supports iteration, or an iterator. If iterable is a string or a tuple, the result also has that type; otherwise it is always a list. If function is None, the identity function is assumed, that is, all elements of iterable that are false are removed.

> Note that filter(function, iterable) is equivalent to [item for item in iterable if function(item)] if function is not None and [item for item in iterable if item] if function is None.

[https://docs.python.org/2/library/functions.html#filter][1]


  [1]: https://docs.python.org/2/library/functions.html#filter

=== [448] of [1277] ============================= id=[832] ==
Q:  [http://blog.startupcompass.co/how-much-should-you-pay-your-engineers][1]


  [1]: http://blog.startupcompass.co/how-much-should-you-pay-your-engineers
questiontag_set : ['web pages to review']
datetime_added  =[2015-03-12 09:34:11.872215+00:00]
datetime_updated=[2015-03-12 09:34:11.872256+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [449] of [1277] ============================= id=[831] ==
Q:  In vim, how do you show all the marks that have been set?
questiontag_set : ['vim']
datetime_added  =[2015-03-11 22:16:12.876795+00:00]
datetime_updated=[2015-03-11 22:16:12.876826+00:00]
---------------------------------------------- id=[439] --
A:
    :marks

=== [450] of [1277] ============================= id=[830] ==
Q:  In vi, how do you delete up the column of a mark (not just the line itself)?
questiontag_set : ['vim']
datetime_added  =[2015-03-11 22:14:42.097731+00:00]
datetime_updated=[2015-03-11 22:14:42.097776+00:00]
---------------------------------------------- id=[438] --
A:
     d`a
(note that is the "backtick"; this means delete to the line and column position of the mark labeled "a")

    `a  
(jump to the line and column at the mark labeled "a")

=== [451] of [1277] ============================= id=[829] ==
Q:  [https://en.wikipedia.org/wiki/Snowclone][1]


  [1]: https://en.wikipedia.org/wiki/Snowclone
questiontag_set : ['vocabulary']
datetime_added  =[2015-03-11 20:59:26.361901+00:00]
datetime_updated=[2015-03-11 20:59:26.361933+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [452] of [1277] ============================= id=[828] ==
Q:  [http://blog.frontapp.com/company-culture-hacks-for-happy-employees-and-customers/][1]


  [1]: http://blog.frontapp.com/company-culture-hacks-for-happy-employees-and-customers/
questiontag_set : ['work_culture']
datetime_added  =[2015-03-11 20:41:05.363754+00:00]
datetime_updated=[2015-03-11 20:41:05.363786+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [453] of [1277] ============================= id=[827] ==
Q:  [https://medium.com/@iancorbin/better-understanding-your-employee-stock-options-9c4b147b5ded][1]


  [1]: https://medium.com/@iancorbin/better-understanding-your-employee-stock-options-9c4b147b5ded
questiontag_set : ['web pages to review']
datetime_added  =[2015-03-11 16:42:19.823649+00:00]
datetime_updated=[2015-03-11 16:42:19.823679+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [454] of [1277] ============================= id=[826] ==
Q:  Why is all the data required for a PUT?
questiontag_set : ['web development', 'priority_high']
datetime_added  =[2015-03-11 13:44:28.417083+00:00]
datetime_updated=[2015-03-11 13:44:28.417112+00:00]
---------------------------------------------- id=[437] --
A:
Because PUT's are idempotent.  What you specify is what is saved, and should always result in the same thing, regardless of the current state of the object.

=== [455] of [1277] ============================= id=[825] ==
Q:  [https://en.wikipedia.org/wiki/Service-oriented_architecture][1]


  [1]: https://en.wikipedia.org/wiki/Service-oriented_architecture
questiontag_set : ['computer science']
datetime_added  =[2015-03-11 00:24:51.782930+00:00]
datetime_updated=[2015-03-11 00:24:51.782971+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [456] of [1277] ============================= id=[824] ==
Q:  [http://staging.trap.it/penrose/help][1]


  [1]: http://staging.trap.it/penrose/help
questiontag_set : ['trapit', 'trapit_penrose']
datetime_added  =[2015-03-10 16:15:03.019016+00:00]
datetime_updated=[2015-03-10 16:15:03.019047+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [457] of [1277] ============================= id=[823] ==
Q:  What 10 candidates (4 offers, 2 accepted) have been interviewed for a Platform Engineer position at Trapit since I've been here?
questiontag_set : ['trapit']
datetime_added  =[2015-03-10 14:22:48.327116+00:00]
datetime_updated=[2015-06-29 22:44:03.198841+00:00]
---------------------------------------------- id=[436] --
A:
1. Don Welch 4/14/14
2. Zack Manning 6/10/14 (Jama; Urban Airship; Jive) (MS Computer Science PSU)
3. Tom Marshall 6/11/14
4. Josh Bode 6/20/14 (Australia)
5. Connor Williams 7/7/14 (Janrain; Laura's friend)
6. Nick Welch 10/15/14 (Parthenon Software)
7. Grant Kelly 11/12/14 (Reno, NV; Desert Research Institute)
8. Philip Weaver 3/9/15  (Rentrak; Janrain) (MS Computer Engineering)
9. Dan Lipert 4/22/15 (hired)
10. Nick Allen 4/23/15 (Narrative Science; journalism)

Offered and not accepted:

1. Zack Manning 6/10/14
2. Philip Weaver 3/9/15

Hired:

1. Tom Marshall 6/11/14
2. Dan Lipert 5/2015


=== [458] of [1277] ============================= id=[822] ==
Q:  [https://en.wikipedia.org/wiki/Subject%E2%80%93object_problem][1]


  [1]: https://en.wikipedia.org/wiki/Subject%E2%80%93object_problem
questiontag_set : ['philosophy']
datetime_added  =[2015-03-10 13:49:25.134929+00:00]
datetime_updated=[2015-03-10 13:49:25.134960+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [459] of [1277] ============================= id=[821] ==
Q:  Where is the configuration file for supervisor?
questiontag_set : ['trapit', 'supervisor']
datetime_added  =[2015-03-10 13:35:54.225103+00:00]
datetime_updated=[2015-03-10 13:35:54.225134+00:00]
---------------------------------------------- id=[435] --
A:
`/trapit/config/current/supervisord.conf`



=== [460] of [1277] ============================= id=[820] ==
Q:  [https://en.wikipedia.org/wiki/Sargable][1]


  [1]: https://en.wikipedia.org/wiki/Sargable
questiontag_set : ['databases']
datetime_added  =[2015-03-10 00:26:58.983547+00:00]
datetime_updated=[2015-03-10 00:26:58.983578+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [461] of [1277] ============================= id=[819] ==
Q:  [https://www.linkedin.com/pulse/20130606153931-15077789-the-1-thing-you-must-do-in-every-job-interview][1]


  [1]: https://www.linkedin.com/pulse/20130606153931-15077789-the-1-thing-you-must-do-in-every-job-interview
questiontag_set : ['interviewing']
datetime_added  =[2015-03-09 20:00:41.334875+00:00]
datetime_updated=[2015-03-09 20:00:41.334908+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [462] of [1277] ============================= id=[818] ==
Q:  [https://www.linkedin.com/pulse/1-most-impressive-job-interview-question-ask-dave-kerpen?trk=hp-feed-article-title][1]


  [1]: https://www.linkedin.com/pulse/1-most-impressive-job-interview-question-ask-dave-kerpen?trk=hp-feed-article-title
questiontag_set : ['interviewing']
datetime_added  =[2015-03-09 20:00:06.345282+00:00]
datetime_updated=[2015-03-09 20:00:06.345316+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [463] of [1277] ============================= id=[817] ==
Q:  How to make this deprecation warning go away for this code?

    /home/rbednark/repos/mom/tests/functional/test_model_user.py:244: DeprecationWarning: BaseException.message has been deprecated as of Python 2.6
      self.assertTrue(re.search(string=error.exception.message,
questiontag_set : ['python']
datetime_added  =[2015-03-09 19:56:22.547736+00:00]
datetime_updated=[2015-03-09 19:56:22.547767+00:00]
---------------------------------------------- id=[434] --
A:
either use:

    str(error.exception)

or:

    str(error.exception.args[0])


=== [464] of [1277] ============================= id=[816] ==
Q:  Why was Stephen getting this error when running `my_topic_trap.discover()`?

    ProtocolError: Server Error
questiontag_set : ['trapit', 'trapit_nibbler', 'priority_high']
datetime_added  =[2015-03-09 19:42:57.217610+00:00]
datetime_updated=[2015-03-09 19:43:08.577455+00:00]
---------------------------------------------- id=[433] --
A:
It was because many zoidberg processes were not running, one of which was the Redis server.  Once we started all the processes, then it worked.  3/9/15

=== [465] of [1277] ============================= id=[815] ==
Q:  How do you check all state of all the ports on a server (e.g., LISTEN, ESTABLISHED, CLOSED)?
questiontag_set : ['unix', 'priority_high']
datetime_added  =[2015-03-09 19:38:30.084662+00:00]
datetime_updated=[2015-03-09 19:38:30.084693+00:00]
---------------------------------------------- id=[432] --
A:
    netstat -na

=== [466] of [1277] ============================= id=[814] ==
Q:  How do you find and delete all the traps for a given category/section?
questiontag_set : ['trapit', 'trapit_mom']
datetime_added  =[2015-03-09 18:04:50.244832+00:00]
datetime_updated=[2015-03-09 18:04:50.244863+00:00]
---------------------------------------------- id=[431] --
A:
    category = session.query(Category).filter_by(name='Entertainment').one()
    [session.delete(trap) for trap in category.traps]
    session.commit()

=== [467] of [1277] ============================= id=[813] ==
Q:  On Google Sheets (Google Drive, Google Docs), how to you change it so that it doesn't change the formatting so that when I put the value "true" in a cell it doesn't change it to "TRUE"?
questiontag_set : ['medium_priority']
datetime_added  =[2015-03-09 14:36:03.417911+00:00]
datetime_updated=[2015-03-09 14:36:03.417942+00:00]
---------------------------------------------- id=[430] --
A:
Format > Number > Plain text

=== [468] of [1277] ============================= id=[812] ==
Q:  How to add line numbers to the output of a file, or certain lines in a file?
questiontag_set : ['unix']
datetime_added  =[2015-03-07 17:47:01.128576+00:00]
datetime_updated=[2015-03-07 17:47:01.128607+00:00]
---------------------------------------------- id=[429] --
A:
`nl`

e.g.,

    echo -n 'a\nb' | nl

In vim:

:4,10!nl

(add line numbers to lines 4-10)

However, this also adds leading whitespace and a tab after the number.  To eliminate those:

    echo -n 'a\nb' | nl | sed 's/^ *//'

(haven't figured out how to replace the tab's.  `s/\t/ /` doesn't work for some reason.

=== [469] of [1277] ============================= id=[811] ==
Q:  [https://en.wikipedia.org/wiki/Inductive_programming][1]


  [1]: https://en.wikipedia.org/wiki/Inductive_programming
questiontag_set : ['programming']
datetime_added  =[2015-03-06 21:00:17.983382+00:00]
datetime_updated=[2015-03-06 21:00:17.983414+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [470] of [1277] ============================= id=[810] ==
Q:  [https://en.wikipedia.org/wiki/Comparison_of_programming_paradigms][1]


  [1]: https://en.wikipedia.org/wiki/Comparison_of_programming_paradigms
questiontag_set : ['programming']
datetime_added  =[2015-03-06 20:45:14.741010+00:00]
datetime_updated=[2015-03-06 20:45:14.741040+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [471] of [1277] ============================= id=[809] ==
Q:  [https://en.wikipedia.org/wiki/Declarative_programming][1]


  [1]: https://en.wikipedia.org/wiki/Declarative_programming
questiontag_set : ['computer science']
datetime_added  =[2015-03-06 20:44:24.664744+00:00]
datetime_updated=[2015-03-06 20:44:24.664773+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [472] of [1277] ============================= id=[808] ==
Q:  [https://en.wikipedia.org/wiki/Transaction_processing][1]


  [1]: https://en.wikipedia.org/wiki/Transaction_processing
questiontag_set : ['databases']
datetime_added  =[2015-03-06 20:41:22.345900+00:00]
datetime_updated=[2015-03-06 20:41:22.345931+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [473] of [1277] ============================= id=[807] ==
Q:  [http://www.wikivs.com/wiki/Screen_vs_tmux][1]


  [1]: http://www.wikivs.com/wiki/Screen_vs_tmux
questiontag_set : ['tmux']
datetime_added  =[2015-03-06 20:39:58.308971+00:00]
datetime_updated=[2015-03-06 20:39:58.309024+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [474] of [1277] ============================= id=[806] ==
Q:  [http://www.wikivs.com/wiki/Main_Page][1]


  [1]: http://www.wikivs.com/wiki/Main_Page
questiontag_set : ['web pages to review']
datetime_added  =[2015-03-06 20:38:01.507156+00:00]
datetime_updated=[2015-03-06 20:38:01.507187+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [475] of [1277] ============================= id=[805] ==
Q:  [http://www.wikivs.com/wiki/MySQL_vs_PostgreSQL][1]


  [1]: http://www.wikivs.com/wiki/MySQL_vs_PostgreSQL
questiontag_set : ['databases', 'postgresql']
datetime_added  =[2015-03-06 20:37:40.670922+00:00]
datetime_updated=[2015-03-06 20:37:40.670952+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [476] of [1277] ============================= id=[804] ==
Q:  > PostgreSQL is a unified database server with a single storage engine. MySQL has two layers, an upper SQL layer and a set of storage engines. While MySQL 5.6 natively supports 9 storage engines, the most popular choices are InnoDB, MyISAM and NDB Cluster. Storage engines differ in both functionality and performance characteristics, so it is important to clarify which is being used in any comparisons.

[http://www.wikivs.com/wiki/MySQL_vs_PostgreSQL#Architecture][1]


  [1]: http://www.wikivs.com/wiki/MySQL_vs_PostgreSQL#Architecture
questiontag_set : ['databases', 'postgresql']
datetime_added  =[2015-03-06 20:36:03.593031+00:00]
datetime_updated=[2015-03-06 20:36:03.593063+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [477] of [1277] ============================= id=[803] ==
Q:  [https://en.wikipedia.org/wiki/InnoDB][1]


  [1]: https://en.wikipedia.org/wiki/InnoDB
questiontag_set : ['databases']
datetime_added  =[2015-03-06 20:34:04.072069+00:00]
datetime_updated=[2015-03-06 20:34:04.072100+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [478] of [1277] ============================= id=[802] ==
Q:  [https://en.wikipedia.org/wiki/Column_(data_store)][1]


  [1]: https://en.wikipedia.org/wiki/Column_%28data_store%29
questiontag_set : ['databases']
datetime_added  =[2015-03-06 20:30:19.298450+00:00]
datetime_updated=[2015-03-06 20:30:19.298481+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [479] of [1277] ============================= id=[801] ==
Q:  [https://en.wikipedia.org/wiki/Document-oriented_database][1]


  [1]: https://en.wikipedia.org/wiki/Document-oriented_database
questiontag_set : ['databases']
datetime_added  =[2015-03-06 20:29:51.405506+00:00]
datetime_updated=[2015-03-06 20:29:51.405536+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [480] of [1277] ============================= id=[800] ==
Q:  [https://en.wikipedia.org/wiki/Multi-model_database][1]


  [1]: https://en.wikipedia.org/wiki/Multi-model_database
questiontag_set : ['databases']
datetime_added  =[2015-03-06 20:29:03.786669+00:00]
datetime_updated=[2015-03-06 20:29:03.786701+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [481] of [1277] ============================= id=[798] ==
Q:  If an endpoint contains a `{user_id}`, how do you get the user?
questiontag_set : ['trapit', 'trapit_elzar']
datetime_added  =[2015-03-05 23:25:57.309808+00:00]
datetime_updated=[2015-03-05 23:25:57.309847+00:00]
---------------------------------------------- id=[428] --
A:
`self.load_user()`

`wsgi.Handler.load_user()` gets the {user_id} from the request and queries and gets the user.


    def load_user(sef, req):
        user = req.db.query(mom.User).filter(
            mom.User.primary_org_id == req.org.id,
            mom.User.uid == validate_uuid(req.vars['user_id'])
        ).first()
        if user is None:
            raise NotFound({'errors':
                            ['User "%s" not found.' % req.vars['user_id']]})
        return user

[https://github.com/Trapit/elzar/blob/master/elzar/wsgi.py#L376-L384][1]


  [1]: https://github.com/Trapit/elzar/blob/master/elzar/wsgi.py#L376-L384

=== [482] of [1277] ============================= id=[797] ==
Q:  In `tmux`, if you have two or more panes in one window, how do you move one of the panes to it's own window?
questiontag_set : ['tmux']
datetime_added  =[2015-03-05 22:10:13.991094+00:00]
datetime_updated=[2015-03-05 22:10:13.991125+00:00]
---------------------------------------------- id=[427] --
A:
`control-a !` ("break pane" command) (exclamation point / bang)

=== [483] of [1277] ============================= id=[796] ==
Q:  [https://en.wikipedia.org/wiki/Iptables][1]


  [1]: https://en.wikipedia.org/wiki/Iptables
questiontag_set : ['networking']
datetime_added  =[2015-03-05 18:46:33.516361+00:00]
datetime_updated=[2015-03-05 18:46:33.516392+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [484] of [1277] ============================= id=[795] ==
Q:  - [http://zacharyvoase.com/2009/07/03/http-post-put-diff/][1]
- [http://restcookbook.com/HTTP%20Methods/put-vs-post/][2]


  [1]: http://zacharyvoase.com/2009/07/03/http-post-put-diff/
  [2]: http://restcookbook.com/HTTP%20Methods/put-vs-post/
questiontag_set : ['web development']
datetime_added  =[2015-03-05 16:00:47.710488+00:00]
datetime_updated=[2015-03-05 16:00:47.710517+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [485] of [1277] ============================= id=[794] ==
Q:  [http://stackoverflow.com/questions/107390/whats-the-difference-between-a-post-and-a-put-http-request][1]


  [1]: http://stackoverflow.com/questions/107390/whats-the-difference-between-a-post-and-a-put-http-request
questiontag_set : ['web development']
datetime_added  =[2015-03-05 15:54:52.432727+00:00]
datetime_updated=[2015-03-05 15:54:52.432758+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [486] of [1277] ============================= id=[793] ==
Q:  [https://en.wikipedia.org/wiki/Resource-oriented_architecture][1]


  [1]: https://en.wikipedia.org/wiki/Resource-oriented_architecture
questiontag_set : ['web development']
datetime_added  =[2015-03-05 15:54:26.042223+00:00]
datetime_updated=[2015-03-05 15:54:26.042255+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [487] of [1277] ============================= id=[792] ==
Q:  Read the sample chapter from "The Effective Engineer" by Edmond Lau

open.the.effective.engineer (alias on my laptop)
questiontag_set : ['software engineering']
datetime_added  =[2015-03-04 19:08:16.491751+00:00]
datetime_updated=[2015-03-04 19:08:16.491783+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [488] of [1277] ============================= id=[791] ==
Q:  [https://en.wikipedia.org/wiki/Denormalization][1]


  [1]: https://en.wikipedia.org/wiki/Denormalization
questiontag_set : ['databases']
datetime_added  =[2015-03-04 18:59:26.808975+00:00]
datetime_updated=[2015-03-04 18:59:26.809007+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [489] of [1277] ============================= id=[790] ==
Q:  [https://en.wikipedia.org/wiki/Object-relational_database][1]


  [1]: https://en.wikipedia.org/wiki/Object-relational_database
questiontag_set : ['databases']
datetime_added  =[2015-03-04 18:58:57.314906+00:00]
datetime_updated=[2015-03-04 18:58:57.314936+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [490] of [1277] ============================= id=[789] ==
Q:  [https://en.wikipedia.org/wiki/Object_database][1]


  [1]: https://en.wikipedia.org/wiki/Object_database
questiontag_set : ['databases']
datetime_added  =[2015-03-04 18:57:11.279793+00:00]
datetime_updated=[2015-03-04 18:57:11.279824+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [491] of [1277] ============================= id=[788] ==
Q:  - [https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch][1]
- [http://en.wikipedia.org/wiki/Impedance_matching][2]
- [http://en.wikipedia.org/wiki/Electrical_impedance][3]
- [http://en.wikipedia.org/wiki/Acoustic_impedance][4]


  [1]: https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch
  [2]: http://en.wikipedia.org/wiki/Impedance_matching
  [3]: http://en.wikipedia.org/wiki/Electrical_impedance
  [4]: http://en.wikipedia.org/wiki/Acoustic_impedance
questiontag_set : ['databases']
datetime_added  =[2015-03-04 18:56:12.834806+00:00]
datetime_updated=[2015-05-13 14:00:12.349056+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [492] of [1277] ============================= id=[787] ==
Q:  [https://en.wikipedia.org/wiki/Declarative_Referential_Integrity][1]


  [1]: https://en.wikipedia.org/wiki/Declarative_Referential_Integrity
questiontag_set : ['databases']
datetime_added  =[2015-03-04 18:38:48.577637+00:00]
datetime_updated=[2015-03-04 18:38:48.577668+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [493] of [1277] ============================= id=[786] ==
Q:  [https://en.wikipedia.org/wiki/Domain/key_normal_form][1]


  [1]: https://en.wikipedia.org/wiki/Domain/key_normal_form
questiontag_set : ['databases']
datetime_added  =[2015-03-04 18:36:47.790925+00:00]
datetime_updated=[2015-03-04 18:36:47.790956+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [494] of [1277] ============================= id=[785] ==
Q:  [https://en.wikipedia.org/wiki/Declarative_Referential_Integrity][1]


  [1]: https://en.wikipedia.org/wiki/Declarative_Referential_Integrity
questiontag_set : ['databases']
datetime_added  =[2015-03-04 18:35:15.414070+00:00]
datetime_updated=[2015-03-04 18:35:15.414101+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [495] of [1277] ============================= id=[784] ==
Q:  How many endpoints does elzar have as of 3/4/15?
questiontag_set : ['trapit', 'trapit_elzar']
datetime_added  =[2015-03-04 16:02:10.184045+00:00]
datetime_updated=[2015-03-04 16:02:10.184076+00:00]
---------------------------------------------- id=[426] --
A:
144

grep -c '^/' api.urls

=== [496] of [1277] ============================= id=[783] ==
Q:  In elzar, where do you set a breakpoint to see why a 404 if being returned instead of matching a known url?
questiontag_set : ['trapit', 'trapit_elzar']
datetime_added  =[2015-03-04 15:57:53.244572+00:00]
datetime_updated=[2015-03-04 15:57:53.244602+00:00]
---------------------------------------------- id=[425] --
A:
in `selector.py`:

    class Selector
        def __call__()

To see where `selector` is:  

    python -c 'import selector; print selector.__file__'


=== [497] of [1277] ============================= id=[782] ==
Q:  In pudb, how do you see the full path of the file you are currently in?
questiontag_set : ['pudb', 'python']
datetime_added  =[2015-03-04 15:48:21.819140+00:00]
datetime_updated=[2015-03-04 15:48:21.819171+00:00]
---------------------------------------------- id=[424] --
A:
In the "command" window:

`>>> __file__`

=== [498] of [1277] ============================= id=[781] ==
Q:  What does elzar `client.APIClient.put_back()` do?
questiontag_set : ['trapit_elzar', 'trapit']
datetime_added  =[2015-03-04 04:29:32.838611+00:00]
datetime_updated=[2015-03-04 04:30:00.811363+00:00]
---------------------------------------------- id=[423] --
A:
Given a response from a previous API call, it makes a PUT call to that same endpoint with the response (which could have been modified), e.g.,

    resp1 = api.get_app(self.app_name)
    resp1['name'] = 'new_app_name'
    resp1['google_analytics_id'] = 'ABC'
    resp2 = api.put_back(resp1)

Note: most responses have a `url` field that contains a url for that item.  The `client.APIClient.put_back()` method uses that `url` field to determine the url to call.

=== [499] of [1277] ============================= id=[780] ==
Q:  [http://blog.cryptographyengineering.com/2013/09/on-nsa.html][1]


  [1]: http://blog.cryptographyengineering.com/2013/09/on-nsa.html
questiontag_set : ['security']
datetime_added  =[2015-03-04 04:23:00.051494+00:00]
datetime_updated=[2015-03-04 04:23:00.051528+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [500] of [1277] ============================= id=[779] ==
Q:  [http://blog.cryptographyengineering.com/2015/03/attack-of-week-freak-or-factoring-nsa.html][1]


  [1]: http://blog.cryptographyengineering.com/2015/03/attack-of-week-freak-or-factoring-nsa.html
questiontag_set : ['security']
datetime_added  =[2015-03-04 04:21:01.253269+00:00]
datetime_updated=[2015-03-04 04:21:01.253301+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [501] of [1277] ============================= id=[778] ==
Q:  >In an essay published in 2007, Tom Wolfe argued that the newspaper industry would stand a much better chance of survival if newspaper editors encouraged reporters to “provide the emotional reality of the news, for it is the emotions, not the facts, that most engage and excite readers and in the end are the heart of most stories.” He said there are exactly four technical devices needed to get to “the emotional core of the story.” They are the specific devices, he said, “that give fiction its absorbing or gripping quality, that make the reader feel present in the scene described and even inside the skin of a particular character.”

>The four: 1) constructing scenes; 2) dialogue — lots of it; 3) carefully noting social status details — “everything from dress and furniture to the infinite status clues of speech, how one talks to superiors or inferiors … and with what sort of accent and vocabulary”; and 4) point of view, “in the Henry Jamesian sense of putting the reader inside the mind of someone other than the writer.”

[http://writersalmanac.org/note/mar-2-birthday-tom-wolfe/][1]


  [1]: http://writersalmanac.org/note/mar-2-birthday-tom-wolfe/
questiontag_set : ['unassimilated']
datetime_added  =[2015-03-04 04:05:27.298322+00:00]
datetime_updated=[2015-03-04 04:05:27.298353+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [502] of [1277] ============================= id=[777] ==
Q:  https://en.wikipedia.org/wiki/First-order_logic[enter link description here][1]


  [1]: https://en.wikipedia.org/wiki/First-order_logic
questiontag_set : ['mathematics']
datetime_added  =[2015-03-03 23:48:02.533483+00:00]
datetime_updated=[2015-03-03 23:48:02.533514+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [503] of [1277] ============================= id=[776] ==
Q:  [https://en.wikipedia.org/wiki/Relational_model][1]


  [1]: https://en.wikipedia.org/wiki/Relational_model
questiontag_set : ['databases']
datetime_added  =[2015-03-03 23:46:14.845501+00:00]
datetime_updated=[2015-03-03 23:46:14.845531+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [504] of [1277] ============================= id=[775] ==
Q:  [https://en.wikipedia.org/wiki/Man-in-the-middle_attack][1]


  [1]: https://en.wikipedia.org/wiki/Man-in-the-middle_attack
questiontag_set : ['security']
datetime_added  =[2015-03-03 23:31:40.846996+00:00]
datetime_updated=[2015-03-03 23:31:40.847026+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [505] of [1277] ============================= id=[774] ==
Q:  In elzar, if you have a user, what do you use to set the `{user_id}` value for an endpoint (e.g., in the tests?), e.g., 

    /v3/{org}/users/{user_id}/
questiontag_set : ['trapit_elzar', 'trapit']
datetime_added  =[2015-03-03 18:41:30.343817+00:00]
datetime_updated=[2015-06-29 16:11:53.406845+00:00]
---------------------------------------------- id=[422] --
A:
    user.uid.hex

=== [506] of [1277] ============================= id=[773] ==
Q:  [https://en.wikipedia.org/wiki/CNAME_record][1]


  [1]: https://en.wikipedia.org/wiki/CNAME_record
questiontag_set : ['networking']
datetime_added  =[2015-03-03 18:15:28.477342+00:00]
datetime_updated=[2015-03-03 18:15:28.477371+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [507] of [1277] ============================= id=[772] ==
Q:  What is the probability of flipping a coin twice and getting 3 heads in a row?
questiontag_set : ['probability']
datetime_added  =[2015-03-03 00:26:58.454529+00:00]
datetime_updated=[2015-03-03 00:26:58.454560+00:00]
---------------------------------------------- id=[421] --
A:
1/2 * 1/2 * 1/2 = 1/8

(each flip has a 1/2 chance of getting heads; mutiply the probability of heads for each flip times the number of flips)

=== [508] of [1277] ============================= id=[771] ==
Q:  Who is the author of `node.js`?
questiontag_set : ['web development', 'people']
datetime_added  =[2015-03-02 19:05:07.818764+00:00]
datetime_updated=[2015-03-02 19:05:07.818794+00:00]
---------------------------------------------- id=[420] --
A:
Ryan Dahl (employee of Joyent at the time)

[https://en.wikipedia.org/wiki/Node.js][1]


  [1]: https://en.wikipedia.org/wiki/Node.js

=== [509] of [1277] ============================= id=[770] ==
Q:  [https://en.wikipedia.org/wiki/V8_(JavaScript_engine)][1]


  [1]: https://en.wikipedia.org/wiki/V8_%28JavaScript_engine%29
questiontag_set : ['web development']
datetime_added  =[2015-03-02 19:02:33.590051+00:00]
datetime_updated=[2015-03-02 19:02:33.590081+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [510] of [1277] ============================= id=[769] ==
Q:  [https://en.wikipedia.org/wiki/Brendan_Eich][1]


  [1]: https://en.wikipedia.org/wiki/Brendan_Eich
questiontag_set : ['people']
datetime_added  =[2015-03-02 19:01:33.414719+00:00]
datetime_updated=[2015-03-02 19:01:33.414753+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [511] of [1277] ============================= id=[768] ==
Q:  [https://en.wikipedia.org/wiki/Node.js][1]


  [1]: https://en.wikipedia.org/wiki/Node.js
questiontag_set : ['web development']
datetime_added  =[2015-03-02 19:00:18.140936+00:00]
datetime_updated=[2015-03-02 19:00:18.140976+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [512] of [1277] ============================= id=[767] ==
Q:  Is there a set comprehension in Python?
questiontag_set : ['python']
datetime_added  =[2015-03-02 15:29:35.116658+00:00]
datetime_updated=[2015-03-02 15:29:35.116688+00:00]
---------------------------------------------- id=[419] --
A:
Yes.  e.g.,

    assert { elem for elem in [1, 2] } == set([1, 2])

=== [513] of [1277] ============================= id=[766] ==
Q:  How to show a `git diff` and only show the names of the files without showing the lines that are different?
questiontag_set : ['git']
datetime_added  =[2015-03-02 15:04:28.920375+00:00]
datetime_updated=[2015-03-02 15:04:28.920406+00:00]
---------------------------------------------- id=[418] --
A:
`git diff --name-only`

=== [514] of [1277] ============================= id=[765] ==
Q:  [http://jeroenjanssens.com/2015/02/19/ibash-notebook.html][1]


  [1]: http://jeroenjanssens.com/2015/02/19/ibash-notebook.html
questiontag_set : ['python', 'ipython', 'ipython_notebook']
datetime_added  =[2015-03-02 14:50:24.248637+00:00]
datetime_updated=[2015-03-02 14:50:24.248666+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [515] of [1277] ============================= id=[764] ==
Q:  [https://en.wikipedia.org/wiki/Google_File_System][1]


  [1]: https://en.wikipedia.org/wiki/Google_File_System
questiontag_set : ['computer science']
datetime_added  =[2015-02-28 05:16:46.998719+00:00]
datetime_updated=[2015-02-28 05:16:46.998749+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [516] of [1277] ============================= id=[763] ==
Q:  [https://en.wikipedia.org/wiki/State_machine_replication][1]


  [1]: https://en.wikipedia.org/wiki/State_machine_replication
questiontag_set : ['computer science']
datetime_added  =[2015-02-28 05:15:15.343926+00:00]
datetime_updated=[2015-02-28 05:15:15.343957+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [517] of [1277] ============================= id=[762] ==
Q:  [http://en.wikipedia.org/wiki/Marshalling_(computer_science)][1]


  [1]: http://en.wikipedia.org/wiki/Marshalling_%28computer_science%29
questiontag_set : ['computer science']
datetime_added  =[2015-02-28 04:59:31.849653+00:00]
datetime_updated=[2015-02-28 04:59:31.849685+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [518] of [1277] ============================= id=[761] ==
Q:  In Python, what is the default behavior for the following if no default arg is specified:

    getattr(foo, 'bar')
    foo.get('bar')
questiontag_set : ['python']
datetime_added  =[2015-02-28 02:39:21.784910+00:00]
datetime_updated=[2015-07-08 13:34:17.762031+00:00]
---------------------------------------------- id=[417] --
A:
for `getattr()` the default is to raise an `AttributeError` exception.

for the dict `.get()` method the default value returned is `None`

=== [519] of [1277] ============================= id=[760] ==
Q:  [http://en.wikipedia.org/wiki/Virtual_inheritance][1]


  [1]: http://en.wikipedia.org/wiki/Virtual_inheritance
questiontag_set : ['computer science']
datetime_added  =[2015-02-28 02:27:07.765902+00:00]
datetime_updated=[2015-02-28 02:27:07.765933+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [520] of [1277] ============================= id=[759] ==
Q:  [http://en.wikipedia.org/wiki/Duck_typing][1]


  [1]: http://en.wikipedia.org/wiki/Duck_typing
questiontag_set : ['computer science']
datetime_added  =[2015-02-28 02:26:46.370596+00:00]
datetime_updated=[2015-02-28 02:26:46.370625+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [521] of [1277] ============================= id=[758] ==
Q:  [http://en.wikipedia.org/wiki/Interface_(computing)#Software_interfaces_in_object-oriented_languages][1]


  [1]: http://en.wikipedia.org/wiki/Interface_%28computing%29#Software_interfaces_in_object-oriented_languages
questiontag_set : ['computer science']
datetime_added  =[2015-02-28 02:24:17.176244+00:00]
datetime_updated=[2015-02-28 02:24:17.176275+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [522] of [1277] ============================= id=[757] ==
Q:  [http://en.wikipedia.org/wiki/Polymorphism_%28computer_science%29][1]


  [1]: http://en.wikipedia.org/wiki/Polymorphism_%28computer_science%29
questiontag_set : ['computer science']
datetime_added  =[2015-02-28 02:19:46.825693+00:00]
datetime_updated=[2015-02-28 02:19:46.825723+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [523] of [1277] ============================= id=[756] ==
Q:  How can I set a variable in one module that will be read in another module to determine whether to trigger a set_trace()?
questiontag_set : ['python', 'pudb', 'pdb']
datetime_added  =[2015-02-28 00:16:13.315232+00:00]
datetime_updated=[2015-02-28 00:16:13.315263+00:00]
---------------------------------------------- id=[416] --
A:
    '''
    A module variable can be used as a global variable.
    Just make sure to import the module, and *not* do:
        from module import foo
    because that creates a new copy in the local namespace.
    '''
    
    # in module_1:
    import some_module
    some_module.flag = True
    
    # in module_2:
    if some_module.flag:
        import pdb; pdb.set_trace()

An example in elzar/mom:

    # set the variable from the calling environment:
    import mom.db as mom_db
    mom_db.do_trace = True

    # look for the variable in the called environment:
    import mom.db as mom_db
    if getattr(mom_db, 'do_trace', False):
        import pudb; pudb.set_trace() 

Can just use a standard library, like pdb:

    import pdb
    pdb.do_trace = True

=== [524] of [1277] ============================= id=[755] ==
Q:  How do you change a part of a string for a column in a table in SQL?

e.g., change "foo" to "bar" for this table:

    name   
    -------
    foo one
    something
    two foo

so it looks like:

    name
    ---------
    bar one
    something
    two bar
questiontag_set : ['sql', 'postgresql']
datetime_added  =[2015-02-27 19:07:08.970050+00:00]
datetime_updated=[2015-02-27 19:07:08.970089+00:00]
---------------------------------------------- id=[415] --
A:
    UPDATE my_table
    SET name=replace(name, 'foo', 'bar');

=== [525] of [1277] ============================= id=[754] ==
Q:  Which 3 tables does an org-sync hit, and what read/write/update operations does it do to each?
questiontag_set : ['trapit', 'trapit_mom']
datetime_added  =[2015-02-27 14:44:03.303662+00:00]
datetime_updated=[2015-02-27 14:44:03.303694+00:00]
---------------------------------------------- id=[414] --
A:
    tags (ADD)
        - ADD new tags
    traps (ADD, UPDATE)
        - ADD new traps (only type='source'  active=true  banned=false)
        - UPDATE certain existing rows:
            SET active=false (WHERE feeds.banned=true AND...)
            SET name=coalesce(update_traps.name, traps.name)
            SET quality = update_traps.quality
            SET section = update_traps.section
    traps_to_tags (ADD, UPDATE, DELETE)
        - ADD new rows (only subscribed=true library=true)
        - UPDATE existing rows:
            SET active=true
        - DELETE certain rows

=== [526] of [1277] ============================= id=[753] ==
Q:  What change did I make to the org-sync regarding tags on 2/27/15?
questiontag_set : ['trapit', 'trapit_mom']
datetime_added  =[2015-02-27 14:28:13.400621+00:00]
datetime_updated=[2015-02-27 14:28:13.400651+00:00]
---------------------------------------------- id=[413] --
A:
`mgmt org-sync --tags='tag1;tag2'` is now a logical OR instead of a logical AND (match traps that have either tag, rather than match traps that have both tags).

=== [527] of [1277] ============================= id=[752] ==
Q:  [http://serverfault.com/questions/482281/how-to-calculate-max-connections-for-postgresql-and-default-pool-size-for-pgboun][1]



  [1]: http://serverfault.com/questions/482281/how-to-calculate-max-connections-for-postgresql-and-default-pool-size-for-pgboun
questiontag_set : ['postgresql']
datetime_added  =[2015-02-26 15:27:15.944457+00:00]
datetime_updated=[2015-02-26 15:27:15.944488+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [528] of [1277] ============================= id=[751] ==
Q:  [https://en.wikipedia.org/wiki/Multiversion_concurrency_control][1]


  [1]: https://en.wikipedia.org/wiki/Multiversion_concurrency_control
questiontag_set : ['postgresql', 'databases']
datetime_added  =[2015-02-26 15:12:18.973351+00:00]
datetime_updated=[2015-02-26 15:12:18.973384+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [529] of [1277] ============================= id=[750] ==
Q:  [http://en.wikipedia.org/wiki/Markov_chain][1]


  [1]: http://en.wikipedia.org/wiki/Markov_chain
questiontag_set : ['computer science']
datetime_added  =[2015-02-26 03:02:50.669437+00:00]
datetime_updated=[2015-02-26 03:02:50.669476+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [530] of [1277] ============================= id=[749] ==
Q:  [http://en.wikipedia.org/wiki/Bloom_filter][1]


  [1]: http://en.wikipedia.org/wiki/Bloom_filter
questiontag_set : ['computer science']
datetime_added  =[2015-02-26 02:57:22.940417+00:00]
datetime_updated=[2015-02-26 02:57:22.940448+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [531] of [1277] ============================= id=[748] ==
Q:  What kind of encoding is needed in url's?
questiontag_set : ['web development']
datetime_added  =[2015-02-25 19:17:07.994637+00:00]
datetime_updated=[2015-02-25 19:17:07.994685+00:00]
---------------------------------------------- id=[412] --
A:
Special symbols must sometimes be percent-encoded:
! * ' ( ) ; : @ & = + $ , / ? % # [ ]

- [http://tools.ietf.org/html/rfc3986#section-2.4][1]
- [http://en.wikipedia.org/wiki/Percent-encoding][2]
- [http://en.wikipedia.org/wiki/Uniform_resource_locator][3]


  [1]: http://tools.ietf.org/html/rfc3986#section-2.4
  [2]: http://en.wikipedia.org/wiki/Percent-encoding
  [3]: http://en.wikipedia.org/wiki/Uniform_resource_locator

=== [532] of [1277] ============================= id=[747] ==
Q:  What is an `octet`?
questiontag_set : ['computer science']
datetime_added  =[2015-02-25 19:15:05.387716+00:00]
datetime_updated=[2015-02-25 19:15:05.387756+00:00]
---------------------------------------------- id=[411] --
A:
[http://en.wikipedia.org/wiki/Octet_%28computing%29][1]


  [1]: http://en.wikipedia.org/wiki/Octet_%28computing%29

=== [533] of [1277] ============================= id=[746] ==
Q:  [http://en.wikipedia.org/wiki/Base64][1]


  [1]: http://en.wikipedia.org/wiki/Base64
questiontag_set : ['computer science']
datetime_added  =[2015-02-25 19:07:17.422306+00:00]
datetime_updated=[2015-02-25 19:07:17.422347+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [534] of [1277] ============================= id=[745] ==
Q:  [http://en.wikipedia.org/wiki/Instrumentation_%28computer_programming%29][1]


  [1]: http://en.wikipedia.org/wiki/Instrumentation_%28computer_programming%29
questiontag_set : ['computer science']
datetime_added  =[2015-02-25 18:37:05.841902+00:00]
datetime_updated=[2015-02-25 18:37:05.841974+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [535] of [1277] ============================= id=[744] ==
Q:  In pudb in the python interpreter (`>>>`), how do you browse back and forth in the command history?
questiontag_set : ['pudb', 'python']
datetime_added  =[2015-02-25 15:24:43.424330+00:00]
datetime_updated=[2015-02-25 15:24:43.424369+00:00]
---------------------------------------------- id=[410] --
A:
control-p (previous)  
control-n (next)

=== [536] of [1277] ============================= id=[743] ==
Q:  In `pudb`, what command is used to shift the focus to the code pane?
questiontag_set : ['python', 'pudb']
datetime_added  =[2015-02-25 15:12:27.903977+00:00]
datetime_updated=[2015-02-25 15:12:27.904020+00:00]
---------------------------------------------- id=[409] --
A:
`C` (uppercase "C")

=== [537] of [1277] ============================= id=[742] ==
Q:  In `pudb`, what command is used to expand/collapse the selected variable in the "Variables:" pane?
questiontag_set : ['pudb', 'python']
datetime_added  =[2015-02-25 15:10:10.821228+00:00]
datetime_updated=[2015-02-25 15:10:10.821266+00:00]
---------------------------------------------- id=[408] --
A:
`\` (backslash)

=== [538] of [1277] ============================= id=[741] ==
Q:  In pudb, what command is used to shift focus to the "Variables:" pane?
questiontag_set : ['pudb', 'python']
datetime_added  =[2015-02-25 15:09:05.035341+00:00]
datetime_updated=[2015-02-25 15:09:05.035393+00:00]
---------------------------------------------- id=[407] --
A:
`V`  (uppercase "V")

=== [539] of [1277] ============================= id=[740] ==
Q:  How to do a set_trace for pudb when running nosetests?
questiontag_set : ['python', 'pudb']
datetime_added  =[2015-02-25 15:00:41.428527+00:00]
datetime_updated=[2015-02-25 15:00:41.428583+00:00]
---------------------------------------------- id=[406] --
A:
import pudb; pudb.set_trace()

(I installed `pip install nose-pudb` but I don't know whether it is needed for the set_trace(); I doubt it)

=== [540] of [1277] ============================= id=[739] ==
Q:  What does zapper do?
questiontag_set : ['trapit_zapper', 'trapit']
datetime_added  =[2015-02-24 23:13:05.483735+00:00]
datetime_updated=[2015-02-24 23:13:05.483771+00:00]
---------------------------------------------- id=[405] --
A:
zapper takes new docs from Zoidberg and indexes them in Solr.

=== [541] of [1277] ============================= id=[738] ==
Q:  What does nibbler do?
questiontag_set : ['trapit', 'trapit_nibbler']
datetime_added  =[2015-02-24 23:11:51.667775+00:00]
datetime_updated=[2015-02-24 23:11:51.667804+00:00]
---------------------------------------------- id=[404] --
A:
nibbler uses Solr and the Cassandra trapqueue and creates discovery topic traps.  It is the machine learning portion.  It decides what documents are good fits for discovery topic traps, and populates the topic traps with those docs.  It handles Solr searches.

Nibbler runs in an infinite loop.

Nibbler is not used for "search" topic traps.

=== [542] of [1277] ============================= id=[737] ==
Q:  [http://en.wikipedia.org/wiki/Von_Neumann_architecture][1]


  [1]: http://en.wikipedia.org/wiki/Von_Neumann_architecture
questiontag_set : ['computer science']
datetime_added  =[2015-02-24 22:48:26.495612+00:00]
datetime_updated=[2015-02-24 22:48:26.495642+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [543] of [1277] ============================= id=[736] ==
Q:  [http://en.wikipedia.org/wiki/Church%E2%80%93Turing_thesis][1]


  [1]: http://en.wikipedia.org/wiki/Church%E2%80%93Turing_thesis
questiontag_set : ['computer science']
datetime_added  =[2015-02-24 22:48:04.527928+00:00]
datetime_updated=[2015-02-24 22:48:04.527974+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [544] of [1277] ============================= id=[735] ==
Q:  [http://en.wikipedia.org/wiki/Turing_completeness][1]


  [1]: http://en.wikipedia.org/wiki/Turing_completeness
questiontag_set : ['computer science']
datetime_added  =[2015-02-24 22:45:16.360735+00:00]
datetime_updated=[2015-02-24 22:45:16.360766+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [545] of [1277] ============================= id=[734] ==
Q:  [http://en.wikipedia.org/wiki/Turing_machine][1]


  [1]: http://en.wikipedia.org/wiki/Turing_machine
questiontag_set : ['computer science']
datetime_added  =[2015-02-24 22:45:00.825347+00:00]
datetime_updated=[2015-02-24 22:45:00.825378+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [546] of [1277] ============================= id=[733] ==
Q:  - [https://gist.github.com/hellerbarde/2843375][1]
- [http://www.eecs.berkeley.edu/~rcs/research/interactive_latency.html][2]
- [http://www.quora.com/What-are-the-numbers-that-every-computer-engineer-should-know-according-to-Jeff-Dean][3]


  [1]: https://gist.github.com/hellerbarde/2843375
  [2]: http://www.eecs.berkeley.edu/~rcs/research/interactive_latency.html
  [3]: http://www.quora.com/What-are-the-numbers-that-every-computer-engineer-should-know-according-to-Jeff-Dean
questiontag_set : ['computer science']
datetime_added  =[2015-02-24 22:43:45.243529+00:00]
datetime_updated=[2015-02-24 22:43:45.243585+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [547] of [1277] ============================= id=[732] ==
Q:  What is a picosecond (ps), and how does it compare to the other 4 main units?
questiontag_set : ['vocabulary', 'computer science']
datetime_added  =[2015-02-24 19:08:18.141561+00:00]
datetime_updated=[2015-02-24 19:08:18.141592+00:00]
---------------------------------------------- id=[403] --
A:
A picosecond is a trillionth of a second.

- 1000 picoseconds = 1 nanosecond
- 1 million picoseconds = 1 microsecond
- 1 billion picoseconds = 1 millisecond
- 1 trillion picoseconds = 1 second

[http://en.wikipedia.org/wiki/Picosecond][1]  
[http://en.wikipedia.org/wiki/Orders_of_magnitude_(time)][2]


  [1]: http://en.wikipedia.org/wiki/Picosecond
  [2]: http://en.wikipedia.org/wiki/Orders_of_magnitude_%28time%29

=== [548] of [1277] ============================= id=[731] ==
Q:  What is a `nanosecond`, and how does it compare to the other 4 main units?
questiontag_set : ['vocabulary', 'computer science']
datetime_added  =[2015-02-24 19:03:24.470702+00:00]
datetime_updated=[2015-02-24 19:09:45.786967+00:00]
---------------------------------------------- id=[402] --
A:
A nanosecond is a billionth of a second.

- 1/1000 nanosecond = 1 picosecond
- 1000 nanoseconds = 1 microsecond
- 1 million nanoseconds = 1 millisecond
- 1 billion nanoseconds = 1 second

[http://en.wikipedia.org/wiki/Nanosecond][1]  
[http://en.wikipedia.org/wiki/Orders_of_magnitude_(time)][2]


  [1]: http://en.wikipedia.org/wiki/Nanosecond
  [2]: http://en.wikipedia.org/wiki/Orders_of_magnitude_%28time%29

=== [549] of [1277] ============================= id=[730] ==
Q:  Insert a row into a table2 using values from table1 for the row with phone '971-276-8789' and use 'Rob' for the name.

    table1:
    phone  address
    -----  -------
    
    table2:
    name  phone  address
    -----  -----  -------
questiontag_set : ['sql', 'postgresql']
datetime_added  =[2015-02-24 16:03:42.415732+00:00]
datetime_updated=[2015-02-24 16:03:42.415763+00:00]
---------------------------------------------- id=[401] --
A:
    INSERT INTO table2 (name,  phone, address) 
        SELECT          'Rob', phone, address  FROM table1 WHERE phone = '971-276-8789';

=== [550] of [1277] ============================= id=[729] ==
Q:  Add a column with name "Last Name" and type TEXT to the table "my_table".
questiontag_set : ['sql', 'postgresql']
datetime_added  =[2015-02-24 15:56:59.831834+00:00]
datetime_updated=[2015-02-24 15:56:59.831874+00:00]
---------------------------------------------- id=[400] --
A:
    ALTER TABLE "my_table" ADD COLUMN "Last Name" TEXT;

=== [551] of [1277] ============================= id=[728] ==
Q:  Insert a row into a table1 using values from table2 for the person with name 'Rob'

    table1:
    phone  address
    -----  -------
    
    table2:
    name  phone  address
    -----  -----  -------
questiontag_set : ['sql', 'postgresql']
datetime_added  =[2015-02-24 15:53:51.194577+00:00]
datetime_updated=[2015-02-24 16:03:48.970813+00:00]
---------------------------------------------- id=[399] --
A:
    INSERT INTO table1 (address, phone) SELECT address, phone FROM table2 WHERE name = 'Rob';

=== [552] of [1277] ============================= id=[727] ==
Q:  Write a SQL statement to update the name from 'Rob' to 'Sara' for the following table row:

    table = 'people'
    
    name  state
    ----- ----
    Rob    Oregon
questiontag_set : ['sql', 'postgresql']
datetime_added  =[2015-02-24 15:51:29.739175+00:00]
datetime_updated=[2015-02-24 15:51:29.739206+00:00]
---------------------------------------------- id=[398] --
A:
    UPDATE people SET name='Sara' WHERE name='Rob' RETURNING *;

=== [553] of [1277] ============================= id=[726] ==
Q:  Create this table in SQL:

table name: "people"

    name    age
    -----   ---
    (text)    (integer)
questiontag_set : ['postgresql', 'sql']
datetime_added  =[2015-02-24 15:40:10.114845+00:00]
datetime_updated=[2015-02-24 15:40:10.114878+00:00]
---------------------------------------------- id=[397] --
A:
CREATE TABLE people (name TEXT, age INTEGER);

=== [554] of [1277] ============================= id=[725] ==
Q:  Which two different wsgi web application servers are used by Trapit, Atlatl, and Tixie?
questiontag_set : ['web development']
datetime_added  =[2015-02-24 04:06:14.637299+00:00]
datetime_updated=[2015-02-24 04:06:14.637336+00:00]
---------------------------------------------- id=[396] --
A:
gunicorn (Trapit and Tixie)  
uWSGI (Atlatl)

=== [555] of [1277] ============================= id=[724] ==
Q:  What are the two most common wsgi web application servers used with nginx?
questiontag_set : ['web development']
datetime_added  =[2015-02-24 04:05:02.725930+00:00]
datetime_updated=[2015-02-24 04:05:02.725960+00:00]
---------------------------------------------- id=[395] --
A:
gunicorn and uWSGI

=== [556] of [1277] ============================= id=[723] ==
Q:  How does the following code work in Elzar wsgi.py ?

    def application():
        """Build the final product."""
        return jsonize(
            error_and_status_handler(
                access_control(
                    sqla_middleware(
                        selector.Selector(
                            wrap=container,
                            mapfile=URLS_MAP,
                            prefix=env['elzar']['prefix'])))))


[https://github.com/Trapit/elzar/blob/master/elzar/wsgi.py#L500-L509][1]


  [1]: https://github.com/Trapit/elzar/blob/master/elzar/wsgi.py#L500-L509
questiontag_set : ['trapit', 'trapit_elzar']
datetime_added  =[2015-02-24 04:02:45.177124+00:00]
datetime_updated=[2015-02-24 04:02:45.177154+00:00]
---------------------------------------------- id=[394] --
A:
application() is the function called by wsgi (gunicorn is the wsgi server used by Trapit).

Each function is a layer of middleware, with the first one (`jsonize`) being the outermost layer and gets called first, and `container` being the innermost one that gets called last.  

Each layer takes an `app` argument, which is a callable, and it calls that callable along with two arguments: `environ` and `start_response`.  

Each layer can run code before the callable and then again after the callable (modify the response), which makes it middleware that can run code before and after.

Note that the innermost function call is called first, because the argument needs to be evaluated before the the next outermost function can be called.  (However, does each function call run to completion, or is a callable being returned that is called first before the entire function is executed?)

    def application():
        """Build the final product."""
        return jsonize(
            error_and_status_handler(
                access_control(
                    sqla_middleware(
                        selector.Selector(
                            wrap=container,
                            mapfile=URLS_MAP,
                            prefix=env['elzar']['prefix'])))))


[https://github.com/Trapit/elzar/blob/master/elzar/wsgi.py#L500-L509][1]


=== [557] of [1277] ============================= id=[722] ==
Q:  Per the WSGI spec, where are the client headers in the request?
questiontag_set : ['wsgi', 'python']
datetime_added  =[2015-02-24 01:23:14.192238+00:00]
datetime_updated=[2015-02-24 01:23:14.192268+00:00]
---------------------------------------------- id=[393] --
A:
The headers from the client are passed as HTTP_* environment variables.

>HTTP_ Variables  
Variables corresponding to the client-supplied HTTP request headers (i.e., variables whose names begin with "HTTP_" ). The presence or absence of these variables should correspond with the presence or absence of the appropriate HTTP header in the request.

[https://www.python.org/dev/peps/pep-0333/][1]


  [1]: https://www.python.org/dev/peps/pep-0333/

=== [558] of [1277] ============================= id=[721] ==
Q:  Where do you find the headers in a yaro request?
questiontag_set : ['yaro']
datetime_added  =[2015-02-24 00:53:10.751389+00:00]
datetime_updated=[2015-02-24 00:53:10.751419+00:00]
---------------------------------------------- id=[392] --
A:
    req.environ['HTTP_*']

e.g.,

    req.environ['HTTP_X_FORWARDED_FOR'] == '10.0.0.79'  # header "X-Forwarded-For"

=== [559] of [1277] ============================= id=[720] ==
Q:  How to grep through all git commits?
questiontag_set : ['git']
datetime_added  =[2015-02-23 20:27:33.818613+00:00]
datetime_updated=[2015-02-23 20:27:33.818644+00:00]
---------------------------------------------- id=[391] --
A:
    git rev-list --all | xargs git grep expression

=== [560] of [1277] ============================= id=[719] ==
Q:  What does `git rev-list --all` do?
questiontag_set : ['git']
datetime_added  =[2015-02-23 20:24:58.410675+00:00]
datetime_updated=[2015-02-23 20:24:58.410727+00:00]
---------------------------------------------- id=[390] --
A:
Lists commit objects in reverse chronological order.  

--all  
     Pretend as if all the refs in refs/ are listed on the command line as <commit>.

(Note that `git rev-list` with no options returns an error.)



=== [561] of [1277] ============================= id=[718] ==
Q:  [http://www.paulgraham.com/start.html][1]  (Paul Graham's essay "How to Start a Startup")


  [1]: http://www.paulgraham.com/start.html
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-23 19:53:51.124245+00:00]
datetime_updated=[2015-02-23 19:53:51.124277+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [562] of [1277] ============================= id=[717] ==
Q:  [https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks][1]


  [1]: https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks
questiontag_set : ['python']
datetime_added  =[2015-02-22 05:49:33.683477+00:00]
datetime_updated=[2015-02-22 05:49:33.683509+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [563] of [1277] ============================= id=[716] ==
Q:  How do you run python3 pip?
questiontag_set : ['python']
datetime_added  =[2015-02-22 05:29:05.861806+00:00]
datetime_updated=[2015-02-22 05:29:05.861837+00:00]
---------------------------------------------- id=[389] --
A:
    pip3

=== [564] of [1277] ============================= id=[715] ==
Q:  What is iPython Notebook?
questiontag_set : ['python']
datetime_added  =[2015-02-22 04:14:33.091097+00:00]
datetime_updated=[2015-02-22 04:14:33.091129+00:00]
---------------------------------------------- id=[388] --
A:
IPython Notebook is a web-based interactive computational environment for creating IPython notebooks. An IPython notebook is a JSON document containing an ordered list of input/output cells which can contain code, text, mathematics, plots and rich media.

IPython notebooks can be converted to a number of open standard output formats (HTML, HTML presentation slides, LaTeX, PDF, ReStructuredText, Markdown, Python) through 'Download As' in the web interface and 'ipython nbconvert' in a shell.

[http://en.wikipedia.org/wiki/IPython#Notebook][1]


  [1]: http://en.wikipedia.org/wiki/IPython#Notebook

=== [565] of [1277] ============================= id=[714] ==
Q:  [http://engineering.flipboard.com/2015/02/mobile-web/][1]  (Flipboard web app)


  [1]: http://engineering.flipboard.com/2015/02/mobile-web/
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-22 04:00:50.724336+00:00]
datetime_updated=[2015-02-22 04:00:50.724367+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [566] of [1277] ============================= id=[713] ==
Q:  [http://www.quora.com/What-free-books-are-there-for-a-newbie-to-programming-Where-can-I-get-them][1]


  [1]: http://www.quora.com/What-free-books-are-there-for-a-newbie-to-programming-Where-can-I-get-them
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-20 23:46:16.497218+00:00]
datetime_updated=[2015-02-20 23:46:16.497252+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [567] of [1277] ============================= id=[712] ==
Q:  - [http://en.wikipedia.org/wiki/SPOJ][1]
- [http://www.spoj.com/][2]


  [1]: http://en.wikipedia.org/wiki/SPOJ
  [2]: http://www.spoj.com/
questiontag_set : ['web pages to review', 'websites', 'programming']
datetime_added  =[2015-02-20 23:46:02.509488+00:00]
datetime_updated=[2015-02-20 23:46:02.509519+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [568] of [1277] ============================= id=[711] ==
Q:  [http://en.wikipedia.org/wiki/B-tree][1]


  [1]: http://en.wikipedia.org/wiki/B-tree
questiontag_set : ['databases', 'computer science']
datetime_added  =[2015-02-20 21:41:39.168131+00:00]
datetime_updated=[2015-02-20 21:41:39.168162+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [569] of [1277] ============================= id=[710] ==
Q:  [http://en.wikipedia.org/wiki/Reverse_index][1]


  [1]: http://en.wikipedia.org/wiki/Reverse_index
questiontag_set : ['databases', 'computer science']
datetime_added  =[2015-02-20 21:40:58.757673+00:00]
datetime_updated=[2015-02-20 21:40:58.757714+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [570] of [1277] ============================= id=[709] ==
Q:  [http://en.wikipedia.org/wiki/Inverted_index][1]


  [1]: http://en.wikipedia.org/wiki/Inverted_index
questiontag_set : ['databases', 'computer science']
datetime_added  =[2015-02-20 21:39:36.900653+00:00]
datetime_updated=[2015-02-20 21:39:36.900683+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [571] of [1277] ============================= id=[708] ==
Q:  Read through the entire Solr manual.

- locally: bash alias `open.solr.manual`
- [http://mirrors.koehn.com/apache/lucene/solr/ref-guide/apache-solr-ref-guide-4.10.pdf][1]  
[http://lucene.apache.org/solr/resources.html#documentation][2]

Current location/bookmark:

- Fri 2/20/15 11:09am not started


  [1]: http://mirrors.koehn.com/apache/lucene/solr/ref-guide/apache-solr-ref-guide-4.10.pdf
  [2]: http://lucene.apache.org/solr/resources.html#documentation
questiontag_set : ['to-do', 'solr']
datetime_added  =[2015-02-20 19:11:56.919913+00:00]
datetime_updated=[2015-02-20 19:11:56.919942+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [572] of [1277] ============================= id=[707] ==
Q:  Read through the entire SQLAlchemy manual.

- locally: bash alias `open.sqlalchemy.manual`
- [https://media.readthedocs.org/pdf/sqlalchemy/rel_0_9/sqlalchemy.pdf][1]

Current location/bookmark:

- Fri 2/20/15 11:06am not started


  [1]: https://media.readthedocs.org/pdf/sqlalchemy/rel_0_9/sqlalchemy.pdf
questiontag_set : ['sqlalchemy', 'to-do']
datetime_added  =[2015-02-20 19:06:35.177005+00:00]
datetime_updated=[2015-02-20 19:06:35.177036+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [573] of [1277] ============================= id=[706] ==
Q:  What is another way of writing an explicit INNER JOIN, e.g.,

    SELECT * FROM table1
    INNER JOIN table2 ON table1.t2_id = table2.id;
questiontag_set : ['postgresql', 'sql']
datetime_added  =[2015-02-20 19:04:52.232082+00:00]
datetime_updated=[2015-02-20 19:04:52.232111+00:00]
---------------------------------------------- id=[387] --
A:
omit the "INNER", e.g.,

    SELECT * FROM table1
    JOIN table2 ON table1.t2_id = table2.id;

Reference:
>The words INNER and OUTER are optional in all forms. INNER is the default; LEFT, RIGHT, and FULL imply an outer join.

>[http://www.postgresql.org/docs/9.4/static/queries-table-expressions.html#QUERIES-FROM][1]


  [1]: http://www.postgresql.org/docs/9.4/static/queries-table-expressions.html#QUERIES-FROM

=== [574] of [1277] ============================= id=[705] ==
Q:  Read through the entire Postgresql manual.

- locally: bash alias `open.postgresql.manual`
- [http://www.postgresql.org/files/documentation/pdf/9.4/postgresql-9.4-US.pdf][1]

Current location/bookmark:

- Fri 2/20/15 10:20am not started


  [1]: http://www.postgresql.org/files/documentation/pdf/9.4/postgresql-9.4-US.pdf
questiontag_set : ['to-do', 'postgresql']
datetime_added  =[2015-02-20 18:43:36.251260+00:00]
datetime_updated=[2015-02-20 19:06:46.713180+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [575] of [1277] ============================= id=[704] ==
Q:  [http://en.wikipedia.org/wiki/Public_key_certificate][1]


  [1]: http://en.wikipedia.org/wiki/Public_key_certificate
questiontag_set : ['computer security']
datetime_added  =[2015-02-20 14:56:20.887362+00:00]
datetime_updated=[2015-02-20 14:56:20.887392+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [576] of [1277] ============================= id=[703] ==
Q:  [http://en.wikipedia.org/wiki/Gateway_(telecommunications)][1]


  [1]: http://en.wikipedia.org/wiki/Gateway_%28telecommunications%29
questiontag_set : ['computer networking']
datetime_added  =[2015-02-20 14:55:59.105016+00:00]
datetime_updated=[2015-02-20 14:55:59.105046+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [577] of [1277] ============================= id=[702] ==
Q:  [http://en.wikipedia.org/wiki/Network_address_translation][1]


  [1]: http://en.wikipedia.org/wiki/Network_address_translation
questiontag_set : ['computer networking']
datetime_added  =[2015-02-20 14:54:53.941254+00:00]
datetime_updated=[2015-02-20 14:54:53.941286+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [578] of [1277] ============================= id=[701] ==
Q:  Lesson learned: do print debugging on Higgs with a single node.  Consider putting in conditional logging to check for a specific endpoint, user, org, etc. if it is at a low layer and causes a lot of logging.

This is useful if a problem is a Higgs-only issue (e.g., https images issue with atom feeds could not be resolved on staging because staging doesn't have an SSL cert)
questiontag_set : ['trapit', 'lessons learned']
datetime_added  =[2015-02-20 14:54:35.235881+00:00]
datetime_updated=[2015-07-22 01:19:36.552363+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [579] of [1277] ============================= id=[700] ==
Q:  [http://en.wikipedia.org/wiki/Multilayer_switch][1]


  [1]: http://en.wikipedia.org/wiki/Multilayer_switch
questiontag_set : ['computer networking']
datetime_added  =[2015-02-20 14:51:22.650744+00:00]
datetime_updated=[2015-02-20 14:51:22.650775+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [580] of [1277] ============================= id=[699] ==
Q:  [http://en.wikipedia.org/wiki/Denial-of-service_attack][1]


  [1]: http://en.wikipedia.org/wiki/Denial-of-service_attack
questiontag_set : ['computer security']
datetime_added  =[2015-02-20 14:50:42.031999+00:00]
datetime_updated=[2015-02-20 14:50:42.032039+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [581] of [1277] ============================= id=[698] ==
Q:  - [http://en.wikipedia.org/wiki/Reverse_proxy][1]
- [http://en.wikipedia.org/wiki/Proxy_server][2]


  [1]: http://en.wikipedia.org/wiki/Reverse_proxy
  [2]: http://en.wikipedia.org/wiki/Proxy_server
questiontag_set : ['computer networking']
datetime_added  =[2015-02-20 14:50:20.055440+00:00]
datetime_updated=[2015-02-20 14:50:20.055469+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [582] of [1277] ============================= id=[697] ==
Q:  [http://en.wikipedia.org/wiki/Slowloris_%28software%29][1]


  [1]: http://en.wikipedia.org/wiki/Slowloris_%28software%29
questiontag_set : ['web pages to review', 'computer security']
datetime_added  =[2015-02-20 14:46:18.497350+00:00]
datetime_updated=[2015-02-20 14:46:18.497380+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [583] of [1277] ============================= id=[696] ==
Q:  How to retrieve previous commands in the Python interpreter in pudb?
questiontag_set : ['python', 'pdb', 'pudb']
datetime_added  =[2015-02-20 01:44:23.517045+00:00]
datetime_updated=[2015-02-20 01:44:23.517084+00:00]
---------------------------------------------- id=[386] --
A:
control-p (because the "up arrow" is used for selecting lines)

=== [584] of [1277] ============================= id=[695] ==
Q:  How to do something like the following SQL in sqlalchemy?

    SELECT * FROM table WHERE column LIKE '%foo%';
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-02-19 23:44:16.814437+00:00]
datetime_updated=[2015-02-19 23:44:16.814467+00:00]
---------------------------------------------- id=[385] --
A:
    rows = session.query(Table).filter(Table.column.like('%foo%').all()

=== [585] of [1277] ============================= id=[694] ==
Q:  [https://github.com/arteria/django-hijack][1]  (lets a superuser login as someone else without knowing their credentials)


  [1]: https://github.com/arteria/django-hijack
questiontag_set : ['django']
datetime_added  =[2015-02-19 22:16:15.254878+00:00]
datetime_updated=[2015-02-19 22:16:15.254910+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [586] of [1277] ============================= id=[693] ==
Q:  Review code: [https://github.com/defunkt/pystache][1]


  [1]: https://github.com/defunkt/pystache
questiontag_set : ['review source code']
datetime_added  =[2015-02-19 19:39:45.930664+00:00]
datetime_updated=[2015-02-19 19:39:45.930694+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [587] of [1277] ============================= id=[692] ==
Q:  [http://en.wikipedia.org/wiki/Software_craftsmanship][1]


  [1]: http://en.wikipedia.org/wiki/Software_craftsmanship
questiontag_set : ['software engineering']
datetime_added  =[2015-02-19 18:57:40.547038+00:00]
datetime_updated=[2015-02-19 18:57:40.547069+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [588] of [1277] ============================= id=[691] ==
Q:  [http://en.wikipedia.org/wiki/Computer_science][1]


  [1]: http://en.wikipedia.org/wiki/Computer_science
questiontag_set : ['computer science']
datetime_added  =[2015-02-19 18:56:22.983581+00:00]
datetime_updated=[2015-02-19 18:56:22.983611+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [589] of [1277] ============================= id=[690] ==
Q:  [http://en.wikipedia.org/wiki/Software_engineering][1]


  [1]: http://en.wikipedia.org/wiki/Software_engineering
questiontag_set : ['software engineering']
datetime_added  =[2015-02-19 18:55:38.616819+00:00]
datetime_updated=[2015-02-19 18:55:38.616850+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [590] of [1277] ============================= id=[689] ==
Q:  [http://en.wikipedia.org/wiki/Outline_of_software_engineering][1]


  [1]: http://en.wikipedia.org/wiki/Outline_of_software_engineering
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-19 18:55:09.667235+00:00]
datetime_updated=[2015-02-19 18:55:09.667267+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [591] of [1277] ============================= id=[688] ==
Q:  [http://en.wikipedia.org/wiki/Engineering][1]


  [1]: http://en.wikipedia.org/wiki/Engineering
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-19 18:54:19.774643+00:00]
datetime_updated=[2015-02-19 18:54:19.774687+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [592] of [1277] ============================= id=[687] ==
Q:  [http://en.wikipedia.org/wiki/Jitter][1]  
specifically [http://en.wikipedia.org/wiki/Jitter#Packet_jitter_in_computer_networks][2]


  [1]: http://en.wikipedia.org/wiki/Jitter
  [2]: http://en.wikipedia.org/wiki/Jitter#Packet_jitter_in_computer_networks
questiontag_set : ['computer science']
datetime_added  =[2015-02-19 18:53:20.549216+00:00]
datetime_updated=[2015-02-19 18:53:20.549251+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [593] of [1277] ============================= id=[686] ==
Q:  In Elzar, what is `req.res`, and what are the 3 main attributes of `req.res`?
questiontag_set : ['trapit', 'trapit_elzar', 'yaro']
datetime_added  =[2015-02-19 18:46:57.213611+00:00]
datetime_updated=[2015-07-04 18:09:50.709522+00:00]
---------------------------------------------- id=[384] --
A:
`req` is the request from `yaro`, and `req.res` is a `yaro` `Response` object that is set by `yaro`.  Some of the `req.res` fields:

- `req.res.headers`
- `req.res.status`
- `req.res.body`

=== [594] of [1277] ============================= id=[685] ==
Q:  In Elzar, what is req and where does it come from?
questiontag_set : ['trapit_elzar', 'trapit']
datetime_added  =[2015-02-19 18:42:01.366420+00:00]
datetime_updated=[2015-02-19 18:42:01.366450+00:00]
---------------------------------------------- id=[383] --
A:
It is the request, and it comes from yaro.

In elzar/wsgi.py, yaro is called by container(), which is passed as an argument to Selector(), which is the innermost call of application():

    def container(handler):
       ...
       return yaro.Yaro(contained,
                         extra_props=[('vars', 'selector.vars'),
                                      ('quickcheck', 'trapit.quickcheck')])


    def application():
        """Build the final product."""
        return \
            proxy_safe(
                jsonize(
                    error_and_status_handler(
                        access_control(
                            sqla_middleware(
                                selector.Selector(
                                    wrap=container,
                                    mapfile=URLS_MAP,
                                    prefix=env['elzar']['prefix']))))))

=== [595] of [1277] ============================= id=[684] ==
Q:  [http://dirtsimple.org/][1]


  [1]: http://dirtsimple.org/
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-19 17:46:03.557753+00:00]
datetime_updated=[2015-02-19 17:46:03.557783+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [596] of [1277] ============================= id=[683] ==
Q:  Who is the author of the WSGI specification (PEP 333), and of python setuptools?
questiontag_set : ['python', 'people']
datetime_added  =[2015-02-19 17:43:49.682325+00:00]
datetime_updated=[2015-02-19 17:43:49.682354+00:00]
---------------------------------------------- id=[382] --
A:
Phillip Eby

- [https://www.python.org/dev/peps/pep-0333/][1]
- [http://en.wikipedia.org/wiki/Setuptools][2]
- [http://dirtsimple.org/][3]


  [1]: https://www.python.org/dev/peps/pep-0333/
  [2]: http://en.wikipedia.org/wiki/Setuptools
  [3]: http://dirtsimple.org/

=== [597] of [1277] ============================= id=[682] ==
Q:  Where can you view gmail security settings and revoke access to applications you've granted access to?
questiontag_set : ['unassimilated']
datetime_added  =[2015-02-19 15:27:53.616006+00:00]
datetime_updated=[2015-02-19 15:27:53.616037+00:00]
---------------------------------------------- id=[381] --
A:
gmail > settings > Accounts > Google Account Settings > Connected Apps and Services > View All

[https://security.google.com/settings/security/permissions?pli=1][1]


  [1]: https://security.google.com/settings/security/permissions?pli=1

=== [598] of [1277] ============================= id=[681] ==
Q:  In vim, how do you search for a line longer than 79 characters?

additional keywords: line length greater
questiontag_set : ['vim']
datetime_added  =[2015-02-19 14:22:15.391788+00:00]
datetime_updated=[2015-02-19 14:22:15.391829+00:00]
---------------------------------------------- id=[380] --
A:
`/\%>80v.\+`


=== [599] of [1277] ============================= id=[680] ==
Q:  [http://www.quora.com/What-are-the-best-examples-of-growing-pains-that-Google-is-now-facing-as-it-grows-into-a-100K+-employee-company-that-are-the-same-problems-Microsoft-faced-25-years-ago][1]


  [1]: http://www.quora.com/What-are-the-best-examples-of-growing-pains-that-Google-is-now-facing-as-it-grows-into-a-100K+-employee-company-that-are-the-same-problems-Microsoft-faced-25-years-ago
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-19 01:03:48.414922+00:00]
datetime_updated=[2015-02-19 01:03:48.414954+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [600] of [1277] ============================= id=[679] ==
Q:  [http://en.wikipedia.org/wiki/Thread_safety][1]


  [1]: http://en.wikipedia.org/wiki/Thread_safety
questiontag_set : ['computer science']
datetime_added  =[2015-02-18 22:27:42.652306+00:00]
datetime_updated=[2015-02-18 22:27:42.652338+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [601] of [1277] ============================= id=[678] ==
Q:  Go through my stackoverflow rejected edits.

I have done through Dec 5, 2014:  
    suggested rejected edit on Relevance of typename in namedtuple


[http://stackoverflow.com/users/875915/rob-bednark?tab=activities&sort=suggestions&page=2][1]


  [1]: http://stackoverflow.com/users/875915/rob-bednark?tab=activities&sort=suggestions&page=2
questiontag_set : ['to-do']
datetime_added  =[2015-02-18 18:44:13.846783+00:00]
datetime_updated=[2015-02-18 18:44:13.846814+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [602] of [1277] ============================= id=[677] ==
Q:  In SQLAlchemy, what do these do:

    doc = Document.one(item.doc_uid, session)
    schedule = TrapSchedule.one(uid, session, trap_id=self.id)
    Document.one(doc_uid, object_session(self))
    origin = Trap.one(document.origin_uid, session)
    doc = Document.one(doc_uid, session)
questiontag_set : ['trapit', 'trapit_mom', 'sqlalchemy']
datetime_added  =[2015-02-18 15:35:47.771985+00:00]
datetime_updated=[2015-02-18 15:35:47.772015+00:00]
---------------------------------------------- id=[379] --
A:
This is a Trapit method defined in mom/db.py:

    class Custom(object):

        @classmethod
        def one(cls, uid, session, **filters):
            return session.query(cls).filter_by(uid=uid, **filters).one()





=== [603] of [1277] ============================= id=[676] ==
Q:  Create a fake magazine cover:

- [http://funny.pho.to/magazine-covers/][1]
- [http://www.fakemagazinecover.com/][2]



  [1]: http://funny.pho.to/magazine-covers/
  [2]: http://www.fakemagazinecover.com/
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-18 00:55:02.257772+00:00]
datetime_updated=[2015-02-18 00:55:02.257804+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [604] of [1277] ============================= id=[675] ==
Q:  Is it ok to call chk() before get_resource()?
questiontag_set : ['trapit']
datetime_added  =[2015-02-17 23:18:05.207285+00:00]
datetime_updated=[2015-02-17 23:18:05.207316+00:00]
---------------------------------------------- id=[378] --
A:
It is tempting to call chk() first before get_resource(), to avoid an unnecessary db call if the user does not have permission.  However, this will result in a "permission denied" exception in the case of a resource that does not exist (e.g., a trap), which will be more confusing to the user.

=== [605] of [1277] ============================= id=[674] ==
Q:  [http://www.quora.com/I-am-currently-learning-Python-What-can-I-do-to-build-a-Python-resume][1]


  [1]: http://www.quora.com/I-am-currently-learning-Python-What-can-I-do-to-build-a-Python-resume
questiontag_set : ['python']
datetime_added  =[2015-02-17 22:13:33.151355+00:00]
datetime_updated=[2015-02-17 22:13:33.151386+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [606] of [1277] ============================= id=[673] ==
Q:  [http://www.quora.com/How-much-does-your-current-salary-affect-your-salary-down-the-line][1]


  [1]: http://www.quora.com/How-much-does-your-current-salary-affect-your-salary-down-the-line
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-17 22:13:09.712442+00:00]
datetime_updated=[2015-02-17 22:13:09.712472+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [607] of [1277] ============================= id=[672] ==
Q:  [http://en.wikipedia.org/wiki/Full_table_scan][1]


  [1]: http://en.wikipedia.org/wiki/Full_table_scan
questiontag_set : ['databases']
datetime_added  =[2015-02-17 20:17:25.815611+00:00]
datetime_updated=[2015-02-17 20:17:25.815640+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [608] of [1277] ============================= id=[671] ==
Q:  How does a github pull request get closed without explicitly closing it in the github web app?
questiontag_set : ['git']
datetime_added  =[2015-02-17 19:51:40.047267+00:00]
datetime_updated=[2015-02-17 19:51:40.047299+00:00]
---------------------------------------------- id=[377] --
A:
Merging the branch manually in git will automatically be seen by github, and github will implicitly close the pull request.

This has the advantage of a cleaner git log, because there won't be a merge commit if it's a fast-forward merge (whereas there is a merge commit if you merge it via the github web app).

=== [609] of [1277] ============================= id=[670] ==
Q:  [https://stephenattrapit.wordpress.com][1]


  [1]: https://stephenattrapit.wordpress.com
questiontag_set : ['trapit']
datetime_added  =[2015-02-17 19:24:44.905975+00:00]
datetime_updated=[2015-02-17 19:24:44.906015+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [610] of [1277] ============================= id=[669] ==
Q:  - [http://en.wikipedia.org/wiki/Out-of-band][1]
- [http://en.wiktionary.org/wiki/out-of-band][2]



  [1]: http://en.wikipedia.org/wiki/Out-of-band
  [2]: http://en.wiktionary.org/wiki/out-of-band
questiontag_set : ['vocabulary']
datetime_added  =[2015-02-17 19:19:59.600664+00:00]
datetime_updated=[2015-02-17 19:19:59.600707+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [611] of [1277] ============================= id=[668] ==
Q:  How to avoid a "merge" message when doing a merge and get a fast-forward merge instead?
questiontag_set : ['git']
datetime_added  =[2015-02-17 17:42:16.709598+00:00]
datetime_updated=[2015-02-17 17:42:16.709631+00:00]
---------------------------------------------- id=[376] --
A:
Rebase against the branch that you are merging into.

=== [612] of [1277] ============================= id=[667] ==
Q:  [http://en.wikipedia.org/wiki/Query_optimization][1]


  [1]: http://en.wikipedia.org/wiki/Query_optimization
questiontag_set : ['databases']
datetime_added  =[2015-02-17 15:43:17.077428+00:00]
datetime_updated=[2015-02-17 15:43:17.077458+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [613] of [1277] ============================= id=[666] ==
Q:  [http://en.wikipedia.org/wiki/Query_plan][1]


  [1]: http://en.wikipedia.org/wiki/Query_plan
questiontag_set : ['databases']
datetime_added  =[2015-02-17 15:42:40.713078+00:00]
datetime_updated=[2015-02-17 15:42:40.713108+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [614] of [1277] ============================= id=[665] ==
Q:  [http://en.wikipedia.org/wiki/Graph_database][1]


  [1]: http://en.wikipedia.org/wiki/Graph_database
questiontag_set : ['databases']
datetime_added  =[2015-02-17 15:42:13.348119+00:00]
datetime_updated=[2015-02-17 15:42:13.348149+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [615] of [1277] ============================= id=[664] ==
Q:  [http://en.wikipedia.org/wiki/NewSQL][1]


  [1]: http://en.wikipedia.org/wiki/NewSQL
questiontag_set : ['databases']
datetime_added  =[2015-02-17 15:41:40.091291+00:00]
datetime_updated=[2015-02-17 15:41:40.091321+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [616] of [1277] ============================= id=[663] ==
Q:  [http://en.wikipedia.org/wiki/NoSQL][1]


  [1]: http://en.wikipedia.org/wiki/NoSQL
questiontag_set : ['databases']
datetime_added  =[2015-02-17 15:40:49.326114+00:00]
datetime_updated=[2015-02-17 15:40:49.326153+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [617] of [1277] ============================= id=[662] ==
Q:  [http://en.wikipedia.org/wiki/Database][1]


  [1]: http://en.wikipedia.org/wiki/Database
questiontag_set : ['databases']
datetime_added  =[2015-02-17 15:38:55.820621+00:00]
datetime_updated=[2015-02-17 15:38:55.820650+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [618] of [1277] ============================= id=[661] ==
Q:  [http://en.wikipedia.org/wiki/Referential_integrity][1]


  [1]: http://en.wikipedia.org/wiki/Referential_integrity
questiontag_set : ['databases']
datetime_added  =[2015-02-17 15:34:15.737158+00:00]
datetime_updated=[2015-02-17 15:34:15.737197+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [619] of [1277] ============================= id=[660] ==
Q:  Where is the Postgresql documentation for the SQL `REFERENCES` keyword?
questiontag_set : ['sql']
datetime_added  =[2015-02-17 15:31:07.438043+00:00]
datetime_updated=[2015-03-04 18:32:30.157513+00:00]
---------------------------------------------- id=[375] --
A:
[http://www.postgresql.org/docs/9.4/static/sql-createtable.html][1]


  [1]: http://www.postgresql.org/docs/9.4/static/sql-createtable.html

=== [620] of [1277] ============================= id=[659] ==
Q:  [http://www.databasedev.co.uk/design_basics.html][1]


  [1]: http://www.databasedev.co.uk/design_basics.html
questiontag_set : ['databases']
datetime_added  =[2015-02-17 15:29:12.449925+00:00]
datetime_updated=[2015-02-17 15:29:12.449956+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [621] of [1277] ============================= id=[658] ==
Q:  [https://www.simple-talk.com/sql/database-administration/ten-common-database-design-mistakes/][1]


  [1]: https://www.simple-talk.com/sql/database-administration/ten-common-database-design-mistakes/
questiontag_set : ['databases']
datetime_added  =[2015-02-17 15:25:08.019975+00:00]
datetime_updated=[2015-02-17 15:25:08.020004+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [622] of [1277] ============================= id=[657] ==
Q:  [http://en.wikipedia.org/wiki/Database_normalization][1]


  [1]: http://en.wikipedia.org/wiki/Database_normalization
questiontag_set : ['databases']
datetime_added  =[2015-02-17 15:23:47.100540+00:00]
datetime_updated=[2015-02-17 15:23:47.100569+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [623] of [1277] ============================= id=[656] ==
Q:  [http://en.wikipedia.org/wiki/Relational_database][1]


  [1]: http://en.wikipedia.org/wiki/Relational_database
questiontag_set : ['databases']
datetime_added  =[2015-02-17 15:22:55.277111+00:00]
datetime_updated=[2015-02-17 15:22:55.277142+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [624] of [1277] ============================= id=[655] ==
Q:  **dirty read**
A transaction reads data written by a concurrent uncommitted transaction.

**nonrepeatable read**
A transaction re-reads data it has previously read and finds that data has been modified by another transaction (that committed since the initial read).

**phantom read**
A transaction re-executes a query returning a set of rows that satisfy a search condition and finds that the set of rows satisfying the condition has changed due to another recently-committed transaction.

[http://www.postgresql.org/docs/9.4/static/transaction-iso.html][1]


  [1]: http://www.postgresql.org/docs/9.4/static/transaction-iso.html
questiontag_set : ['databases']
datetime_added  =[2015-02-17 03:45:42.314694+00:00]
datetime_updated=[2015-02-17 03:45:42.314726+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [625] of [1277] ============================= id=[654] ==
Q:  In Postgresql,
> reading never blocks writing and writing never blocks reading

excerpted from:
> The main advantage of using the MVCC model of concurrency control rather than locking is that in MVCC locks acquired for querying (reading) data do not conflict with locks acquired for writing data, and so reading never blocks writing and writing never blocks reading. PostgreSQL maintains this guarantee even when providing the strictest level of transaction isolation through the use of an innovative Serializable Snapshot Isolation (SSI) level.

[http://www.postgresql.org/docs/9.4/static/mvcc-intro.html][1]


  [1]: http://www.postgresql.org/docs/9.4/static/mvcc-intro.html
questiontag_set : ['postgresql']
datetime_added  =[2015-02-17 03:42:46.730767+00:00]
datetime_updated=[2015-03-03 00:53:31.538547+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [626] of [1277] ============================= id=[653] ==
Q:  [http://www.infoq.com/presentations/Twitter-Timeline-Scalability][1]


  [1]: http://www.infoq.com/presentations/Twitter-Timeline-Scalability
questiontag_set : ['video']
datetime_added  =[2015-02-17 03:31:08.129509+00:00]
datetime_updated=[2015-02-17 03:31:08.129539+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [627] of [1277] ============================= id=[652] ==
Q:  [http://en.wikipedia.org/wiki/Queries_per_second][1]  (QPS)


  [1]: http://en.wikipedia.org/wiki/Queries_per_second
questiontag_set : ['databases']
datetime_added  =[2015-02-17 03:25:26.332526+00:00]
datetime_updated=[2015-02-17 03:25:26.332555+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [628] of [1277] ============================= id=[651] ==
Q:  [http://en.wikipedia.org/wiki/Rainbow_table][1]


  [1]: http://en.wikipedia.org/wiki/Rainbow_table
questiontag_set : ['web pages to review', 'computer science']
datetime_added  =[2015-02-17 03:20:59.951826+00:00]
datetime_updated=[2015-02-17 03:20:59.951856+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [629] of [1277] ============================= id=[650] ==
Q:  [http://en.wikipedia.org/wiki/Precomputation][1]


  [1]: http://en.wikipedia.org/wiki/Precomputation
questiontag_set : ['web pages to review', 'computer science']
datetime_added  =[2015-02-17 03:18:36.448116+00:00]
datetime_updated=[2015-02-17 03:18:36.448155+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [630] of [1277] ============================= id=[649] ==
Q:  [http://www.quora.com/As-a-senior-or-higher-min-10-15-years-experience-level-techie-what-are-the-5-most-important-things-you-wish-you-had-known-at-the-start-of-your-career][1]


  [1]: http://www.quora.com/As-a-senior-or-higher-min-10-15-years-experience-level-techie-what-are-the-5-most-important-things-you-wish-you-had-known-at-the-start-of-your-career
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-17 02:49:04.489141+00:00]
datetime_updated=[2015-02-17 02:49:04.489174+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [631] of [1277] ============================= id=[648] ==
Q:  Bruce Schneier and Edward Snowden talk at Harvard 1/23/15  [https://www.youtube.com/watch?v=7Ui3tLbzIgQ&feature=youtu.be][1]


  [1]: https://www.youtube.com/watch?v=7Ui3tLbzIgQ&feature=youtu.be
questiontag_set : ['video']
datetime_added  =[2015-02-15 16:39:09.168641+00:00]
datetime_updated=[2015-02-15 16:39:09.168672+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [632] of [1277] ============================= id=[647] ==
Q:  definition of "existential": [https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=existential][1]


  [1]: https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=existential
questiontag_set : ['vocabulary']
datetime_added  =[2015-02-15 16:34:45.957522+00:00]
datetime_updated=[2015-02-15 16:34:45.957555+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [633] of [1277] ============================= id=[646] ==
Q:  What language is Cassandra written in?
questiontag_set : ['databases']
datetime_added  =[2015-02-15 16:20:21.727083+00:00]
datetime_updated=[2015-02-15 16:20:21.727113+00:00]
---------------------------------------------- id=[374] --
A:
Java

[http://en.wikipedia.org/wiki/Apache_Cassandra][1]


  [1]: http://en.wikipedia.org/wiki/Apache_Cassandra

=== [634] of [1277] ============================= id=[645] ==
Q:  What language is Riak written in?
questiontag_set : ['databases']
datetime_added  =[2015-02-15 16:19:31.901203+00:00]
datetime_updated=[2015-02-15 16:19:31.901234+00:00]
---------------------------------------------- id=[373] --
A:
erlang

=== [635] of [1277] ============================= id=[644] ==
Q:  [http://en.wikipedia.org/wiki/Riak][1]


  [1]: http://en.wikipedia.org/wiki/Riak
questiontag_set : ['databases']
datetime_added  =[2015-02-15 16:19:10.095910+00:00]
datetime_updated=[2015-02-15 16:19:10.095940+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [636] of [1277] ============================= id=[643] ==
Q:  In what year was the initial release of MongoDB?
questiontag_set : ['databases']
datetime_added  =[2015-02-15 16:18:29.607084+00:00]
datetime_updated=[2015-02-15 16:18:29.607116+00:00]
---------------------------------------------- id=[372] --
A:
2009

[http://en.wikipedia.org/wiki/MongoDB][1]


  [1]: http://en.wikipedia.org/wiki/MongoDB

=== [637] of [1277] ============================= id=[642] ==
Q:  [http://en.wikipedia.org/wiki/MongoDB][1]


  [1]: http://en.wikipedia.org/wiki/MongoDB
questiontag_set : ['databases']
datetime_added  =[2015-02-15 16:17:26.679338+00:00]
datetime_updated=[2015-02-15 16:17:26.679379+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [638] of [1277] ============================= id=[641] ==
Q:  [http://en.wikipedia.org/wiki/Apache_Hadoop][1]


  [1]: http://en.wikipedia.org/wiki/Apache_Hadoop
questiontag_set : ['databases']
datetime_added  =[2015-02-15 16:16:54.281423+00:00]
datetime_updated=[2015-02-15 16:16:54.281463+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [639] of [1277] ============================= id=[640] ==
Q:  [http://en.wikipedia.org/wiki/BigTable][1]


  [1]: http://en.wikipedia.org/wiki/BigTable
questiontag_set : ['databases']
datetime_added  =[2015-02-15 16:16:25.161374+00:00]
datetime_updated=[2015-02-15 16:16:25.161405+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [640] of [1277] ============================= id=[638] ==
Q:  [http://en.wikipedia.org/wiki/Apache_HBase][1]


  [1]: http://en.wikipedia.org/wiki/Apache_HBase
questiontag_set : ['databases']
datetime_added  =[2015-02-15 16:15:21.725796+00:00]
datetime_updated=[2015-02-15 16:15:21.725828+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [641] of [1277] ============================= id=[637] ==
Q:  [http://en.wikipedia.org/wiki/MapReduce][1]


  [1]: http://en.wikipedia.org/wiki/MapReduce
questiontag_set : ['databases']
datetime_added  =[2015-02-15 16:12:48.907348+00:00]
datetime_updated=[2015-02-28 04:58:04.433229+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [642] of [1277] ============================= id=[636] ==
Q:  What 2 different SQL commands in Postgres can be used to kill a query?
questiontag_set : ['postgresql']
datetime_added  =[2015-02-15 16:07:30.544803+00:00]
datetime_updated=[2015-02-15 16:07:30.544834+00:00]
---------------------------------------------- id=[371] --
A:


    select pg_cancel_backend({prodpid});
    -- e.g.,
    select pg_cancel_backend(84026);

or

    select pg_terminate_backend({procpid});
    -- e.g.,
    select pg_terminate_backend(84026);



To get the process id:  
psql> select * from pg_stat_activity;

and look for the `procpid` column.

Documentation:
>pg_cancel_backend(pid int)  
> returns: boolean  
> Cancel a backend's current query. You can execute this against another backend that has exactly the same role as the user calling the function. In all other cases, you must be a superuser.  

>pg_terminate_backend(pid int)  
>returns: boolean  
> Terminate a backend. You can execute this against another backend that has exactly the same role as the user calling the function. In all other cases, you must be a superuser.

[http://www.postgresql.org/docs/9.2/static/functions-admin.html][1]

  [1]: http://www.postgresql.org/docs/9.2/static/functions-admin.html

=== [643] of [1277] ============================= id=[635] ==
Q:  What's another name for connection pooling, and what problem does it not solve?
questiontag_set : ['postgresql', 'databases']
datetime_added  =[2015-02-15 15:54:45.490211+00:00]
datetime_updated=[2015-02-15 15:54:45.490242+00:00]
---------------------------------------------- id=[370] --
A:
Another name is "connection caching".  It does not solve the problem of max number of simultaneous connections.  It only helps performance by not closing and reopening connections.

[Rob Bednark]

=== [644] of [1277] ============================= id=[634] ==
Q:  [http://en.wikipedia.org/wiki/Latency_%28engineering%29][1]


  [1]: http://en.wikipedia.org/wiki/Latency_%28engineering%29
questiontag_set : ['computer science', 'vocabulary']
datetime_added  =[2015-02-15 15:43:20.973461+00:00]
datetime_updated=[2015-02-15 15:43:20.973492+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [645] of [1277] ============================= id=[633] ==
Q:  >Postgres will usually complete the same 10,000 transactions faster by doing them 5, 10 or 20 at a time than by doing them 500 at a time. Determining exactly how many should be done at once varies by workload and requires tuning.

[https://wiki.postgresql.org/wiki/Number_Of_Database_Connections][1]


  [1]: https://wiki.postgresql.org/wiki/Number_Of_Database_Connections
questiontag_set : ['postgresql']
datetime_added  =[2015-02-15 15:42:15.915595+00:00]
datetime_updated=[2015-02-15 15:42:15.915635+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [646] of [1277] ============================= id=[632] ==
Q:  How can you reduce the number of connections required in Postgresql?
questiontag_set : ['postgresql']
datetime_added  =[2015-02-15 15:40:33.213248+00:00]
datetime_updated=[2015-02-15 15:40:33.213280+00:00]
---------------------------------------------- id=[369] --
A:
Use connection pooling.

[https://wiki.postgresql.org/wiki/Number_Of_Database_Connections][1]


  [1]: https://wiki.postgresql.org/wiki/Number_Of_Database_Connections

=== [647] of [1277] ============================= id=[631] ==
Q:  What are the 3 types of eager loading in SQLAlchemy?
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-02-15 15:36:43.287834+00:00]
datetime_updated=[2015-02-15 15:36:43.287865+00:00]
---------------------------------------------- id=[368] --
A:
1. Subquery Load
1. Joined Load
1. Explicit Join + Eager Load

[http://docs.sqlalchemy.org/en/latest/orm/tutorial.html#eager-loading][1]


  [1]: http://docs.sqlalchemy.org/en/latest/orm/tutorial.html#eager-loading

=== [648] of [1277] ============================= id=[630] ==
Q:  How do you write to stderr?
questiontag_set : ['python']
datetime_added  =[2015-02-14 01:32:08.696006+00:00]
datetime_updated=[2015-02-14 01:32:08.696037+00:00]
---------------------------------------------- id=[367] --
A:
    import sys
    sys.stdout.write('Hello world\n')

or

    import sys
    print >> sys.stderr, 'hello world'

or

    from __future__ import print_function
    import sys
    print('hello world', file=sys.stderr)

=== [649] of [1277] ============================= id=[629] ==
Q:  How to find files that have been modified in the last day?  
questiontag_set : ['bash']
datetime_added  =[2015-02-14 01:09:40.610902+00:00]
datetime_updated=[2015-02-14 01:09:40.610933+00:00]
---------------------------------------------- id=[366] --
A:
    find . -mtype 1 -ls

=== [650] of [1277] ============================= id=[628] ==
Q:  How do you make sure that the puppet server is seeing the latest archer changes in it's local clone of archer?
questiontag_set : ['trapit']
datetime_added  =[2015-02-14 01:00:08.457896+00:00]
datetime_updated=[2015-05-01 00:33:54.938815+00:00]
---------------------------------------------- id=[365] --
A:
    ssh puppet
    cd /etc/puppet
    sudo git pull

=== [651] of [1277] ============================= id=[627] ==
Q:  How do you tell curl to display the http headers returned (response code, etc.)?
questiontag_set : ['bash']
datetime_added  =[2015-02-14 00:58:42.400411+00:00]
datetime_updated=[2015-02-14 00:58:42.400441+00:00]
---------------------------------------------- id=[364] --
A:
    curl -i http://google.com

       -i, --include
              (HTTP)  Include  the HTTP-header in the output. The HTTP-header includes things like
              server-name, date of the document, HTTP-version and more...


=== [652] of [1277] ============================= id=[626] ==
Q:  How to show a topographical map in Google Maps?
questiontag_set : ['unassimilated']
datetime_added  =[2015-02-13 22:05:21.962341+00:00]
datetime_updated=[2015-02-13 22:05:21.962373+00:00]
---------------------------------------------- id=[363] --
A:
In the "Getting Around" section under the search box, click on "terrain".

=== [653] of [1277] ============================= id=[625] ==
Q:  How do you show processes sorted by the time they started?
questiontag_set : ['bash']
datetime_added  =[2015-02-13 19:30:23.190568+00:00]
datetime_updated=[2015-02-13 19:30:23.190599+00:00]
---------------------------------------------- id=[362] --
A:
    ps guaxww --sort start_time

=== [654] of [1277] ============================= id=[624] ==
Q:  [https://en.wikipedia.org/wiki/Serializability][1]


  [1]: https://en.wikipedia.org/wiki/Serializability
questiontag_set : ['web pages to review', 'databases']
datetime_added  =[2015-02-13 17:07:33.130359+00:00]
datetime_updated=[2015-02-13 17:07:33.130390+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [655] of [1277] ============================= id=[623] ==
Q:  [https://en.wikipedia.org/wiki/Two-phase_locking][1]


  [1]: https://en.wikipedia.org/wiki/Two-phase_locking
questiontag_set : ['web pages to review', 'databases']
datetime_added  =[2015-02-13 17:06:48.328106+00:00]
datetime_updated=[2015-02-13 17:06:48.328139+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [656] of [1277] ============================= id=[622] ==
Q:  [http://www.quora.com/What-is-some-good-general-career-advice][1]


  [1]: http://www.quora.com/What-is-some-good-general-career-advice
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-13 16:36:31.418626+00:00]
datetime_updated=[2015-02-13 16:36:31.418668+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [657] of [1277] ============================= id=[621] ==
Q:  Treat programming like writing.  Write sloppy code, and write different versions, and then choose the best and edit/refactor.  Don't try to write the best code the first time, or stop myself because I know there's a better way.  Just write!
questiontag_set : ['habit']
datetime_added  =[2015-02-13 16:12:53.322669+00:00]
datetime_updated=[2015-02-13 16:12:53.322703+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [658] of [1277] ============================= id=[620] ==
Q:  [http://www.quora.com/What-are-the-best-talks-lectures-related-to-big-data-algorithms-machine-learning][1]


  [1]: http://www.quora.com/What-are-the-best-talks-lectures-related-to-big-data-algorithms-machine-learning
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-13 16:05:58.190306+00:00]
datetime_updated=[2015-02-13 16:05:58.190338+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [659] of [1277] ============================= id=[619] ==
Q:  [http://www.quora.com/What-are-the-best-talks-lectures-related-to-big-data-algorithms-machine-learning][1]


  [1]: http://www.quora.com/What-are-the-best-talks-lectures-related-to-big-data-algorithms-machine-learning
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-13 16:04:39.985870+00:00]
datetime_updated=[2015-02-13 16:04:39.985901+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [660] of [1277] ============================= id=[618] ==
Q:  [http://www.quora.com/What-are-the-best-sites-which-provide-free-online-lectures-in-the-field-of-Computer-Science][1]


  [1]: http://www.quora.com/What-are-the-best-sites-which-provide-free-online-lectures-in-the-field-of-Computer-Science
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-13 16:04:11.119837+00:00]
datetime_updated=[2015-02-13 16:04:11.119868+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [661] of [1277] ============================= id=[617] ==
Q:  [http://www.quora.com/What-tech-talks-should-every-software-engineer-watch][1]


  [1]: http://www.quora.com/What-tech-talks-should-every-software-engineer-watch
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-13 15:57:48.610869+00:00]
datetime_updated=[2015-02-13 15:57:48.610902+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [662] of [1277] ============================= id=[616] ==
Q:  [http://www.quora.com/What-qualities-make-a-good-startup-engineer][1]


  [1]: http://www.quora.com/What-qualities-make-a-good-startup-engineer
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-13 15:54:06.083323+00:00]
datetime_updated=[2015-02-13 15:54:06.083354+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [663] of [1277] ============================= id=[615] ==
Q:  How do you show which files are being ignored in a git repo?
questiontag_set : ['git']
datetime_added  =[2015-02-13 07:16:32.818928+00:00]
datetime_updated=[2015-02-13 07:16:32.818959+00:00]
---------------------------------------------- id=[361] --
A:
    git status --ignored

=== [664] of [1277] ============================= id=[614] ==
Q:  [http://en.wikipedia.org/wiki/Percent-encoding][1]


  [1]: http://en.wikipedia.org/wiki/Percent-encoding
questiontag_set : ['web pages to review', 'web development']
datetime_added  =[2015-02-13 02:06:09.901468+00:00]
datetime_updated=[2015-02-13 02:06:09.901498+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [665] of [1277] ============================= id=[613] ==
Q:  [http://en.wikipedia.org/wiki/Query_string][1]


  [1]: http://en.wikipedia.org/wiki/Query_string
questiontag_set : ['web pages to review', 'web development']
datetime_added  =[2015-02-12 23:05:17.679231+00:00]
datetime_updated=[2015-02-12 23:05:17.679263+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [666] of [1277] ============================= id=[612] ==
Q:  How to make the panes switch in tmux?
questiontag_set : ['tmux']
datetime_added  =[2015-02-12 22:23:14.229402+00:00]
datetime_updated=[2015-02-12 22:23:14.229445+00:00]
---------------------------------------------- id=[360] --
A:
`control-a control-o`

(I often accidently do this when switching panes; I hit `control-a control-o` instead of `control-a o`

=== [667] of [1277] ============================= id=[611] ==
Q:  Can dashes be used in Python module names?
questiontag_set : ['python']
datetime_added  =[2015-02-12 09:19:30.884542+00:00]
datetime_updated=[2015-02-12 09:19:30.884584+00:00]
---------------------------------------------- id=[359] --
A:
Not easily.  `from package-name` is interpreted as "package minus name".  You would need to use
    
    package_name = __import__("package-name")

to import it.  PEP8 recommends using underscores for module names (but **NOT** for package names).

"Modules should have short, all-lowercase names. Underscores can be used in the module name if it improves readability. Python packages should also have short, all-lowercase names, although the use of underscores is discouraged.

- [http://stackoverflow.com/questions/761519/is-it-ok-to-use-dashes-in-python-files-when-trying-to-import-them][1]
- [http://stackoverflow.com/questions/8350853/how-to-import-python-module-when-module-name-has-a-dash-or-hyphen-in-it][2]
- [http://stackoverflow.com/questions/7583652/python-module-with-a-dash-or-hyphen-in-its-name][3]
- [https://www.python.org/dev/peps/pep-0008/][4]


  [1]: http://stackoverflow.com/questions/761519/is-it-ok-to-use-dashes-in-python-files-when-trying-to-import-them
  [2]: http://stackoverflow.com/questions/8350853/how-to-import-python-module-when-module-name-has-a-dash-or-hyphen-in-it
  [3]: http://stackoverflow.com/questions/7583652/python-module-with-a-dash-or-hyphen-in-its-name
  [4]: https://www.python.org/dev/peps/pep-0008/

=== [668] of [1277] ============================= id=[610] ==
Q:  [https://en.wikipedia.org/wiki/Commutative_property][1]


  [1]: https://en.wikipedia.org/wiki/Commutative_property
questiontag_set : ['mathematics']
datetime_added  =[2015-02-12 08:48:01.646075+00:00]
datetime_updated=[2015-02-12 08:48:01.646130+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [669] of [1277] ============================= id=[609] ==
Q:  [http://en.wikipedia.org/wiki/Apache_Hadoop][1]


  [1]: http://en.wikipedia.org/wiki/Apache_Hadoop
questiontag_set : ['web pages to review', 'databases']
datetime_added  =[2015-02-12 08:32:22.200514+00:00]
datetime_updated=[2015-02-12 08:32:22.200569+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [670] of [1277] ============================= id=[608] ==
Q:  [http://en.wikipedia.org/wiki/Apache_HBase][1]


  [1]: http://en.wikipedia.org/wiki/Apache_HBase
questiontag_set : ['web pages to review', 'databases']
datetime_added  =[2015-02-12 08:31:53.301712+00:00]
datetime_updated=[2015-02-12 08:31:53.301743+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [671] of [1277] ============================= id=[607] ==
Q:  [http://en.wikipedia.org/wiki/BigTable][1]


  [1]: http://en.wikipedia.org/wiki/BigTable
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-12 08:29:45.152893+00:00]
datetime_updated=[2015-02-12 08:29:45.152923+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [672] of [1277] ============================= id=[606] ==
Q:  [http://en.wikipedia.org/wiki/Spanner_(database)][1]


  [1]: http://en.wikipedia.org/wiki/Spanner_%28database%29
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-12 08:29:01.244256+00:00]
datetime_updated=[2015-02-12 08:29:01.244286+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [673] of [1277] ============================= id=[605] ==
Q:  [http://en.wikipedia.org/wiki/Paxos_(computer_science)][1]


  [1]: http://en.wikipedia.org/wiki/Paxos_%28computer_science%29
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-12 08:26:47.574950+00:00]
datetime_updated=[2015-02-12 08:26:47.574982+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [674] of [1277] ============================= id=[604] ==
Q:  [http://en.wikipedia.org/wiki/Two-phase_commit_protocol][1]


  [1]: http://en.wikipedia.org/wiki/Two-phase_commit_protocol
questiontag_set : ['web pages to review', 'databases']
datetime_added  =[2015-02-12 08:24:18.167692+00:00]
datetime_updated=[2015-02-12 08:24:18.167730+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [675] of [1277] ============================= id=[603] ==
Q:  What is the difference in Python between @classmethod and @staticmethod?
questiontag_set : ['python']
datetime_added  =[2015-02-12 02:57:43.075154+00:00]
datetime_updated=[2015-02-12 02:57:43.075191+00:00]
---------------------------------------------- id=[358] --
A:
@classmethod is bound to a class, and takes the class as the first argument (it is implicitly passed).  So you can access attributes of the class.

@staticmethod does not take the class as the first argument.  It can be called from an instance or from the class.

- [http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python][1]  
- [http://stackoverflow.com/questions/12179271/python-classmethod-and-staticmethod-for-beginner][2]


  [1]: http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python  
  [2]: http://stackoverflow.com/questions/12179271/python-classmethod-and-staticmethod-for-beginner

=== [676] of [1277] ============================= id=[602] ==
Q:  What does `multipart/alternative` mean in `MIME`?
questiontag_set : ['email']
datetime_added  =[2015-02-12 01:08:53.767116+00:00]
datetime_updated=[2015-02-12 01:08:53.767148+00:00]
---------------------------------------------- id=[357] --
A:
[http://en.wikipedia.org/wiki/MIME#Alternative][1]

> The multipart/alternative subtype indicates that each part is an
> "alternative" version of the same (or similar) content, each in a
> different format denoted by its "Content-Type" header. The order of
> the parts is significant. RFC1341 states that: In general, user agents
> that compose multipart/alternative entities should place the body
> parts in increasing order of preference, that is, with the preferred
> format last.. Systems can then choose the "best" representation
> they are capable of processing; in general, this will be the last part
> that the system can understand, although other factors may affect
> this. Since a client is unlikely to want to send a version that is
> less faithful than the plain text version, this structure places the
> plain text version (if present) first. This makes life easier for
> users of clients that do not understand multipart messages. Most
> commonly, multipart/alternative is used for email with two parts, one
> plain text (text/plain) and one HTML (text/html). The plain text part
> provides backwards compatibility while the HTML part allows use of
> formatting and hyperlinks. Most email clients offer a user option to
> prefer plain text over HTML; this is an example of how local factors
> may affect how an application chooses which "best" part of the message
> to display. While it is intended that each part of the message
> represent the same content, the standard does not require this to be
> enforced in any way. At one time, anti-spam filters would only examine
> the text/plain part of a message, because it is
> easier to parse than the text/html part. But spammers eventually took
> advantage of this, creating messages with an innocuous-looking
> text/plain part and advertising in the text/html part. Anti-spam
> software eventually caught up on this trick, penalizing messages with
> very different text in a multipart/alternative message.


  [1]: http://en.wikipedia.org/wiki/MIME#Alternative

=== [677] of [1277] ============================= id=[601] ==
Q:  [http://en.wikipedia.org/wiki/Internet_media_type][1]


  [1]: http://en.wikipedia.org/wiki/Internet_media_type
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-12 00:56:46.198927+00:00]
datetime_updated=[2015-02-12 00:56:46.198960+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [678] of [1277] ============================= id=[600] ==
Q:  [http://en.wikipedia.org/wiki/MIME][1]


  [1]: http://en.wikipedia.org/wiki/MIME
questiontag_set : ['web pages to review', 'email']
datetime_added  =[2015-02-12 00:55:00.789472+00:00]
datetime_updated=[2015-02-12 00:55:00.789502+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [679] of [1277] ============================= id=[599] ==
Q:  What is the purpose of the "boundary=..." setting in a MIME email message?
questiontag_set : ['email']
datetime_added  =[2015-02-12 00:54:39.074032+00:00]
datetime_updated=[2015-02-12 00:54:39.074076+00:00]
---------------------------------------------- id=[356] --
A:


>A MIME multipart message contains a boundary in the "Content-Type: " header; this boundary, which must not occur in any of the parts, is placed between the parts, and at the beginning and end of the body of the message.

>It is up to the sending mail client to choose a boundary string that doesn't clash with the body text. Typically this is done by inserting a long random string.
>The last boundary must have two hyphens at the end.

[http://en.wikipedia.org/wiki/MIME][1]


  [1]: http://en.wikipedia.org/wiki/MIME

=== [680] of [1277] ============================= id=[598] ==
Q:  [http://www.findingrover.com/][1]


  [1]: http://www.findingrover.com/
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-11 22:34:21.944061+00:00]
datetime_updated=[2015-02-11 22:34:21.944093+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [681] of [1277] ============================= id=[597] ==
Q:  For a SQLAlchemy relationship() or backref(), what is the `uselist=False` parameter used for?
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-02-11 21:38:57.745647+00:00]
datetime_updated=[2015-02-11 21:38:57.745677+00:00]
---------------------------------------------- id=[355] --
A:
It is used to specify a one-to-one relationship.

[http://docs.sqlalchemy.org/en/rel_0_9/orm/basic_relationships.html?highlight=uselist#one-to-one][1]


  [1]: http://docs.sqlalchemy.org/en/rel_0_9/orm/basic_relationships.html?highlight=uselist#one-to-one

=== [682] of [1277] ============================= id=[596] ==
Q:  https://room.co  (video sharing service via browser)
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-11 18:31:10.046773+00:00]
datetime_updated=[2015-02-11 18:31:10.046821+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [683] of [1277] ============================= id=[595] ==
Q:  [http://en.wikipedia.org/wiki/List_of_software_development_philosophies][1]


  [1]: http://en.wikipedia.org/wiki/List_of_software_development_philosophies
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-11 15:32:51.708865+00:00]
datetime_updated=[2015-02-11 15:32:51.708905+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [684] of [1277] ============================= id=[594] ==
Q:  [http://en.wikipedia.org/wiki/Unix_philosophy][1]


  [1]: http://en.wikipedia.org/wiki/Unix_philosophy
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-11 15:30:27.810502+00:00]
datetime_updated=[2015-02-11 15:30:27.810534+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [685] of [1277] ============================= id=[593] ==
Q:  How do you determine the command-line that was used to start a redis server?
questiontag_set : ['redis']
datetime_added  =[2015-02-10 22:42:03.505895+00:00]
datetime_updated=[2015-02-10 22:42:03.505925+00:00]
---------------------------------------------- id=[354] --
A:
    ps guaxww | grep -i redis
    fusion     874  0.7 89.5 16535600 15659140 ?   Sl    2014 3546:05 redis-server *:6379

=== [686] of [1277] ============================= id=[592] ==
Q:  How do you run the redis interface to run commands?
questiontag_set : ['redis']
datetime_added  =[2015-02-10 22:41:13.787641+00:00]
datetime_updated=[2015-02-10 22:41:13.787672+00:00]
---------------------------------------------- id=[353] --
A:
    redis-cli -p {port} -h {host}

e.g.,

    redis-cli -p 6379

=== [687] of [1277] ============================= id=[591] ==
Q:  Books to get that are coming out in Spring 2015:

Work Rules: Insights From Inside Google That Will Transform How You Live and Lead (by Laszlo Bock)
Google’s head of People Operations reveals the secrets that made the company a talent powerhouse and that can help you radically think how you recruit, hire, challenge, nudge, and inspire employees. (April) 
 
No One Understands You: And What To Do About It (by Heidi Grant Halvorson)
It’s a sad truth about human perception: Other people don’t see you objectively. Nor do they see you as you see yourself. Columbia social psychologist Halvorson tells us how to respond. (April) 
 
Are You Fully Charged?: The 3 Keys to Energizing Your Work and Life (By Tom Rath)
Rath’s books — which include StrengthsFinder 2.0 and Eat, Move, Sleep — have spent 300 (!) weeks on the Wall Street Journal bestseller lists. This one is arguably his best. (May)
 
No Sweat: How the Simple Science of Motivation Can Bring You a Lifetime of Fitness (by Michelle Segar)
Segar, head of the University of Michigan’s Sport, Health, and Activity Research and Policy Center, studies the science of healthy behavior. Her book’s key point: Start thinking of exercise less as a chore and more as a gift. (June)
 
How to Raise an Adult: Break Free of the Overparenting Trap and Prepare Your Kid for Success (by Julie Lythcott-Haims)
The former Dean of Freshmen at Stanford University trenchantly shows how helicopter parents and Tiger Moms are causing much more harm than good. Then she offers an array of tips and strategies for doing better by our kids. (June)

[from Daniel Pink email newsletter 10:03am Tue 2/10/2015]

questiontag_set : ['books']
datetime_added  =[2015-02-10 18:31:58.327720+00:00]
datetime_updated=[2015-02-10 18:31:58.327750+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [688] of [1277] ============================= id=[590] ==
Q:  Add a view to Google Views: [https://www.google.com/maps/views/u/0/home?gl=us][1]  
(I don't yet know how to add a panoramic view)


  [1]: https://www.google.com/maps/views/u/0/home?gl=us
questiontag_set : ['web pages to review', 'action']
datetime_added  =[2015-02-10 17:35:41.633054+00:00]
datetime_updated=[2015-02-10 17:35:41.633084+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [689] of [1277] ============================= id=[589] ==
Q:  Create maps in Google Maps: [https://www.google.com/maps/d/u/0/][1]


  [1]: https://www.google.com/maps/d/u/0/
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-10 17:29:12.501262+00:00]
datetime_updated=[2015-02-10 17:29:12.501296+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [690] of [1277] ============================= id=[588] ==
Q:  [https://www.google.com/intl/en-US/maps/about/contribute/photosphere/][1]  
[https://www.google.com/maps/views/u/0/home?gl=us][2]


  [1]: https://www.google.com/intl/en-US/maps/about/contribute/photosphere/
  [2]: https://www.google.com/maps/views/u/0/home?gl=us
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-10 17:25:23.462458+00:00]
datetime_updated=[2015-02-10 17:25:23.462498+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [691] of [1277] ============================= id=[587] ==
Q:  Conventions regarding naming endpoints singular vs plural:

[http://stackoverflow.com/questions/1690267/restful-posts-do-you-post-objects-to-the-singular-or-plural-uri][1]
[http://stackoverflow.com/questions/6845772/rest-uri-convention-singular-or-plural-name-of-resource-while-creating-it][2]


  [1]: http://stackoverflow.com/questions/1690267/restful-posts-do-you-post-objects-to-the-singular-or-plural-uri
  [2]: http://stackoverflow.com/questions/6845772/rest-uri-convention-singular-or-plural-name-of-resource-while-creating-it
questiontag_set : ['http']
datetime_added  =[2015-02-10 15:21:45.356574+00:00]
datetime_updated=[2015-02-10 15:21:45.356607+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [692] of [1277] ============================= id=[586] ==
Q:  How to pass an insecure username/password to the Trapit API?
questiontag_set : ['trapit', 'trapit_elzar']
datetime_added  =[2015-02-10 01:40:12.359745+00:00]
datetime_updated=[2015-02-10 01:40:12.359775+00:00]
---------------------------------------------- id=[352] --
A:
    $ curl -d '
    {"auth_id":"Trapzoro","auth_secret":"1334c8fc93684c548d99f57c4367c825"}
    ' https://ar.trap.it/api/v3/ar/auth/shared_secret/ --insecure

=== [693] of [1277] ============================= id=[585] ==
Q:  How do you use pudb with nosetests?
questiontag_set : ['nosetests', 'python']
datetime_added  =[2015-02-10 01:31:46.432775+00:00]
datetime_updated=[2015-02-10 01:31:46.432806+00:00]
---------------------------------------------- id=[351] --
A:
    pip install nose-pudb
    nosetests --pudb

Invokes pudb on a failure or error.  

To invoke pudb with a set_trace():

    import pudb; pudb.set_trace()

(or run nosetests with -s option)

=== [694] of [1277] ============================= id=[584] ==
Q:  Remember to take time to learn things.  Read the documentation (Django, SQLAlchemy, SQL, Postgres, vim, bash, Python, ...) and do tutorials.
questiontag_set : ['lessons learned']
datetime_added  =[2015-02-10 00:25:09.640883+00:00]
datetime_updated=[2015-02-10 00:25:09.640914+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [695] of [1277] ============================= id=[583] ==
Q:  [https://media.readthedocs.org/pdf/sqlalchemy/rel_0_9/sqlalchemy.pdf][1]


  [1]: https://media.readthedocs.org/pdf/sqlalchemy/rel_0_9/sqlalchemy.pdf
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-02-09 22:08:15.108671+00:00]
datetime_updated=[2015-02-09 22:08:15.108706+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [696] of [1277] ============================= id=[582] ==
Q:  Name the 5 sqlite storage classes.  (note that storage classes are "slightly more general than a datatype")

[http://www.sqlite.org/datatype3.html][1]


  [1]: http://www.sqlite.org/datatype3.html
questiontag_set : []
datetime_added  =[2015-02-09 20:28:53.305914+00:00]
datetime_updated=[2015-02-09 20:28:53.305954+00:00]
---------------------------------------------- id=[350] --
A:
NULL. The value is a NULL value.

INTEGER. The value is a signed integer, stored in 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of the value.

REAL. The value is a floating point value, stored as an 8-byte IEEE floating point number.

TEXT. The value is a text string, stored using the database encoding (UTF-8, UTF-16BE or UTF-16LE).

BLOB. The value is a blob of data, stored exactly as it was input.


[http://www.sqlite.org/datatype3.html][1]


  [1]: http://www.sqlite.org/datatype3.html

=== [697] of [1277] ============================= id=[581] ==
Q:  What is the long option for the `pip install -e` option?
questiontag_set : ['python', 'pip']
datetime_added  =[2015-02-09 20:23:57.573169+00:00]
datetime_updated=[2015-02-09 20:23:57.573199+00:00]
---------------------------------------------- id=[349] --
A:
`pip install --editable`

=== [698] of [1277] ============================= id=[580] ==
Q:  How do you determine whether to include data in the endpoint or in the data?
questiontag_set : ['web development', 'http']
datetime_added  =[2015-02-09 19:36:05.470313+00:00]
datetime_updated=[2015-02-09 19:36:05.470346+00:00]
---------------------------------------------- id=[348] --
A:
The endpoint should identify a resource.  It should not pass data.

Additionally, the data should not identify the resource; the endpoint should.  So if returning a 404, it should be because of the endpoint, not because of the data.

Because the endpoint identifies a resource, it name of the endpoint should be a noun, not a verb.

=== [699] of [1277] ============================= id=[579] ==
Q:  How does Solr index documents?
questiontag_set : ['solr']
datetime_added  =[2015-02-09 19:14:00.823459+00:00]
datetime_updated=[2015-02-09 19:14:00.823488+00:00]
---------------------------------------------- id=[347] --
A:
Every # of docs or unit of time, it starts process to create another `searcher`.  It will build multiple searcher's in parallel.  The searcher that is used is always the most recent one completed.

=== [700] of [1277] ============================= id=[578] ==
Q:  What are two issues with the zoidberg pipeline that we have?
questiontag_set : ['trapit']
datetime_added  =[2015-02-09 19:12:27.968017+00:00]
datetime_updated=[2015-02-09 19:12:27.968049+00:00]
---------------------------------------------- id=[346] --
A:
1.  need to manage the pipelines (issue 2/6/15 where docwriter queue was 200k docs, so added more workers which caused solr to run out of resources for building searches, and also causes all of postgres db connections to get used up)
1.  cannot wrap everything in a transaction; if something fails in the middle of the pipeline, it's partially done

=== [701] of [1277] ============================= id=[577] ==
Q:  How do you flexmock a function?
questiontag_set : ['python', 'flexmock']
datetime_added  =[2015-02-09 19:00:17.323963+00:00]
datetime_updated=[2015-02-09 19:00:17.323994+00:00]
---------------------------------------------- id=[345] --
A:
    flexmock(my_module).should_receive('my_function').and_return('my returned value')

=== [702] of [1277] ============================= id=[576] ==
Q:  How do you create an api object in the Elzar tests for an unauthenticated user?
questiontag_set : ['trapit', 'trapit_elzar']
datetime_added  =[2015-02-09 18:57:51.660532+00:00]
datetime_updated=[2015-02-09 18:57:51.660562+00:00]
---------------------------------------------- id=[344] --
A:
api = self.get_api(user=None)

=== [703] of [1277] ============================= id=[575] ==
Q:  Create a datetime object for 11:30am July 4, 2014.
questiontag_set : ['python']
datetime_added  =[2015-02-09 18:41:48.102258+00:00]
datetime_updated=[2015-02-09 18:41:48.102288+00:00]
---------------------------------------------- id=[343] --
A:
from datetime import datetime
my_date = datetime(2014, 7, 4, 11, 30)

=== [704] of [1277] ============================= id=[574] ==
Q:  [https://medium.com/backchannel/how-a-lone-hacker-shredded-the-myth-of-crowdsourcing-d9d0534f1731][1]


  [1]: https://medium.com/backchannel/how-a-lone-hacker-shredded-the-myth-of-crowdsourcing-d9d0534f1731
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-09 18:23:56.265261+00:00]
datetime_updated=[2015-02-09 18:23:56.265292+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [705] of [1277] ============================= id=[573] ==
Q:  [http://netforbeginners.about.com/od/weirdwebculture/tp/The-Best-Internet-Memes.htm][1]


  [1]: http://netforbeginners.about.com/od/weirdwebculture/tp/The-Best-Internet-Memes.htm
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-09 17:37:35.264107+00:00]
datetime_updated=[2015-02-09 17:37:35.264139+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [706] of [1277] ============================= id=[572] ==
Q:  What is `basestring` in Python?
questiontag_set : ['python']
datetime_added  =[2015-02-09 15:44:13.972264+00:00]
datetime_updated=[2015-02-09 15:44:13.972307+00:00]
---------------------------------------------- id=[342] --
A:
`basestring()` is a builtin function that can be used to see if an object is either a str or unicode.

>basestring()  
This abstract type is the superclass for str and unicode. It cannot be called or instantiated, but it can be used to test whether an object is an instance of str or unicode. isinstance(obj, basestring) is equivalent to isinstance(obj, (str, unicode)).
>
New in version 2.3.

[https://docs.python.org/2/library/functions.html#basestring][1]


  [1]: https://docs.python.org/2/library/functions.html#basestring

=== [707] of [1277] ============================= id=[571] ==
Q:  What does the `lsof` command do? (name 8 variations)
questiontag_set : ['bash']
datetime_added  =[2015-02-08 20:32:21.654208+00:00]
datetime_updated=[2015-02-09 15:05:54.763393+00:00]
---------------------------------------------- id=[341] --
A:
list open files

1) ` lsof` without any options will list all open files belonging to all active processes:

    # lsof
    
    COMMAND  PID       USER   FD      TYPE     DEVICE  SIZE/OFF       NODE NAME
    init       1       root  cwd       DIR        8,1      4096          2 /
    init       1       root  txt       REG        8,1    124704     917562 /sbin/init
    init       1       root    0u      CHR        1,3       0t0       4369 /dev/null
    init       1       root    1u      CHR        1,3       0t0       4369 /dev/null
    init       1       root    2u      CHR        1,3       0t0       4369 /dev/null
    init       1       root    3r     FIFO        0,8       0t0       6323 pipe


2) `lsof [file]` lists processes which opened [file]:


    # lsof /var/log/syslog
    
    COMMAND  PID   USER   FD   TYPE DEVICE SIZE/OFF   NODE NAME
    rsyslogd 488 syslog    1w   REG    8,1     1151 268940 /var/log/syslog


3) List opened files under a directory

You can list the processes which opened files under a specified directory using ‘+D’ option. +D will recurse the sub directories also. If you don’t want lsof to recurse, then use ‘+d’ option.

    # lsof +D /var/log/
    
    COMMAND   PID   USER  FD   TYPE DEVICE SIZE/OFF   NODE NAME
    rsyslogd  488 syslog   1w   REG    8,1     1151 268940 /var/log/syslog
    rsyslogd  488 syslog   2w   REG    8,1     2405 269616 /var/log/auth.log
    console-k 144   root   9w   REG    8,1    10871 269369 /var/log/ConsoleKit/history

[http://www.thegeekstuff.com/2012/08/lsof-command-examples/][1]

4)  List files opened by a specific user

In order to find the list of files opened by a specific users, use ‘-u’ option.

    # lsof -u lakshmanan
    
    COMMAND    PID       USER   FD   TYPE     DEVICE SIZE/OFF       NODE NAME
    update-no 1892 lakshmanan   20r  FIFO        0,8      0t0      14536 pipe
    update-no 1892 lakshmanan   21w  FIFO        0,8      0t0      14536 pipe
    bash      1995 lakshmanan  cwd    DIR        8,1     4096     393218 /home/lakshmanan

Sometimes you may want to list files opened by all users, expect some 1 or 2. In that case you can use the ‘^’ to exclude only the particular user as follows

    # lsof -u ^lakshmanan
    
    COMMAND    PID       USER   FD      TYPE     DEVICE  SIZE/OFF       NODE NAME
    rtkit-dae 1380      rtkit    7u     0000        0,9         0       4360 anon_inode
    udisks-da 1584       root  cwd       DIR        8,1      4096          2 /

The above command listed all the files opened by all users, expect user ‘lakshmanan’.

5) List all open files by a specific process

You can list all the files opened by a specific process using ‘-p’ option. It will be helpful sometimes to get more information about a specific process.

    # lsof -p 1753
    
    COMMAND  PID       USER   FD   TYPE DEVICE SIZE/OFF    NODE NAME
    bash    1753 lakshmanan  cwd    DIR    8,1     4096  393571 /home/lakshmanan/test.txt
    bash    1753 lakshmanan  rtd    DIR    8,1     4096       2 /
    bash    1753 lakshmanan  255u   CHR  136,0      0t0       3 /dev/pts/0
    ...

6) List all network connections

You can list all the network connections opened by using ‘-i’ option.

    # lsof -i
    
    COMMAND    PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
    avahi-dae  515 avahi   13u  IPv4   6848      0t0  UDP *:mdns
    avahi-dae  515 avahi   16u  IPv6   6851      0t0  UDP *:52060
    cupsd     1075  root    5u  IPv6  22512      0t0  TCP ip6-localhost:ipp (LISTEN)


7) List processes which are listening on a particular port

You can list the processes which are listening on a particular port by using ‘-i’ with ‘:’ as follows

    # lsof -i :25
    
    COMMAND  PID        USER   FD   TYPE DEVICE SIZE NODE NAME
    exim4   2541 Debian-exim    3u  IPv4   8677       TCP localhost:smtp (LISTEN)

8)  List all TCP or UDP connections

You can list all the TCP or UDP connections by specifying the protocol using ‘-i’.

    # lsof -i tcp; lsof -i udp;

  [1]: http://www.thegeekstuff.com/2012/08/lsof-command-examples/






=== [708] of [1277] ============================= id=[570] ==
Q:  What does the `-v` option do for `pkill`?
questiontag_set : ['bash']
datetime_added  =[2015-02-08 19:41:02.224606+00:00]
datetime_updated=[2015-02-08 19:41:02.224638+00:00]
---------------------------------------------- id=[340] --
A:
It is **not** verbose!!  It negates the matching!!!

=== [709] of [1277] ============================= id=[569] ==
Q:  Where is the documentation for the `disown` command?
questiontag_set : ['bash']
datetime_added  =[2015-02-08 18:14:57.106727+00:00]
datetime_updated=[2015-02-08 18:14:57.106761+00:00]
---------------------------------------------- id=[339] --
A:
`bash(1)`

    man bash

=== [710] of [1277] ============================= id=[568] ==
Q:  How to search for apt packages matching "foo"?
questiontag_set : ['bash']
datetime_added  =[2015-02-08 17:23:10.876495+00:00]
datetime_updated=[2015-02-08 17:23:10.876528+00:00]
---------------------------------------------- id=[338] --
A:
    apt-cache search foo

=== [711] of [1277] ============================= id=[567] ==
Q:  Exercise: modify a web page (e.g., [Google](http://google.com) or [Google News](http://news.google.com)) using [Mozilla Webmaker X-Ray Googles](https://goggles.webmaker.org/) and then share it with someone else.

(e.g., put replace photos, add photos, replace text)
questiontag_set : ['javascript', 'css', 'html']
datetime_added  =[2015-02-07 20:29:31.029642+00:00]
datetime_updated=[2015-02-07 20:29:31.029673+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [712] of [1277] ============================= id=[566] ==
Q:  [http://www.quirksmode.org/dom/intro.html][1]  (good intro to the DOM)


  [1]: http://www.quirksmode.org/dom/intro.html
questiontag_set : ['javascript', 'dom/DOM']
datetime_added  =[2015-02-07 20:15:47.493764+00:00]
datetime_updated=[2015-02-07 20:15:47.493798+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [713] of [1277] ============================= id=[565] ==
Q:   [http://www.quirksmode.org/js/contents.html][1]  (introduction to JavaScript)


  [1]: http://www.quirksmode.org/js/contents.html
questiontag_set : ['javascript']
datetime_added  =[2015-02-07 20:13:35.298822+00:00]
datetime_updated=[2015-02-07 20:13:35.298854+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [714] of [1277] ============================= id=[564] ==
Q:  [http://www.sprymedia.co.uk/article/Visual+Event][1]  (a JavaScript bookmarklet that shows JavaScript events for DOM nodes on a web page)

[http://www.sprymedia.co.uk/dataTables/demo_events.html][2]  (a demo of VisualEvent showing the JavaScript events connected to DOM nodes)


  [1]: http://www.sprymedia.co.uk/article/Visual+Event
  [2]: http://www.sprymedia.co.uk/dataTables/demo_events.html
questiontag_set : ['javascript']
datetime_added  =[2015-02-07 20:11:16.570095+00:00]
datetime_updated=[2015-02-07 20:11:16.570126+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [715] of [1277] ============================= id=[563] ==
Q:  [http://monkeylearn.com/][1]


  [1]: http://monkeylearn.com/
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-06 21:47:56.452465+00:00]
datetime_updated=[2015-02-06 21:47:56.452505+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [716] of [1277] ============================= id=[562] ==
Q:  How do you find the working directory of a running process?
questiontag_set : ['bash']
datetime_added  =[2015-02-06 04:19:14.515763+00:00]
datetime_updated=[2015-02-06 04:19:14.515803+00:00]
---------------------------------------------- id=[337] --
A:
    pwdx {pid}

-or-

    ls -l /proc/{pid}/cwd

-or-

    lsof -p <PID> | grep cwd

[http://unix.stackexchange.com/questions/94357/find-out-current-working-directory-of-a-running-process][1]


  [1]: http://unix.stackexchange.com/questions/94357/find-out-current-working-directory-of-a-running-process

=== [717] of [1277] ============================= id=[561] ==
Q:  [http://www.quora.com/Michael-O-Church/answers][1]


  [1]: http://www.quora.com/Michael-O-Church/answers
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-05 22:35:42.774785+00:00]
datetime_updated=[2015-02-05 22:35:42.774816+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [718] of [1277] ============================= id=[560] ==
Q:  Describe what `ON DELETE CASCADE` means.
questiontag_set : ['postgresql']
datetime_added  =[2015-02-05 17:21:06.253704+00:00]
datetime_updated=[2015-02-05 17:21:06.253736+00:00]
---------------------------------------------- id=[336] --
A:
In the follow example, the `blacklist` table has a foreign-key constraint on blacklisted, which means that if a row in blacklisted is deleted, and that row references a row in blacklist, then the delete will cascade to the corresponding row in blacklist and delete the blacklist row too.

Note that the "Referenced by:" listings mean that the other tables mentioned reference this table.  In the case of traps, all the "Referenced by" tables with `ON DELETE CASCADE` mean that if a trap is deleted, the corresponding row in those tables will be deleted.

    zoidberg@10:5432/trapit> \d traps
    ...
    Foreign-key constraints:
        "traps_feed_id_fkey" FOREIGN KEY (feed_id) REFERENCES feeds(id) ON DELETE CASCADE
        "traps_forked_from_id_fkey" FOREIGN KEY (forked_from_id) REFERENCES traps(id) ON DELETE SET NULL
        "traps_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE CASCADE
        "traps_template_id_fkey" FOREIGN KEY (template_id) REFERENCES templates(id) ON DELETE SET NULL
    Referenced by:
        TABLE "blacklist" CONSTRAINT "blacklist_blacklisted_fkey" FOREIGN KEY (blacklisted) REFERENCES traps(id) ON DELETE CASCADE
        TABLE "blacklist" CONSTRAINT "blacklist_blacklister_fkey" FOREIGN KEY (blacklister) REFERENCES traps(id) ON DELETE CASCADE
    ...
    
    
    zoidberg@10:5432/trapit> \d blacklist
         Table "public.blacklist"
       Column    |  Type   | Modifiers
    -------------+---------+-----------
     blacklister | integer | not null
     blacklisted | integer | not null
    Indexes:
        "blacklist_pkey" PRIMARY KEY, btree (blacklister, blacklisted)
        "ix_blacklist_blacklisted" btree (blacklisted)
        "ix_blacklist_blacklister" btree (blacklister)
    Foreign-key constraints:
        "blacklist_blacklisted_fkey" FOREIGN KEY (blacklisted) REFERENCES traps(id) ON DELETE CASCADE
        "blacklist_blacklister_fkey" FOREIGN KEY (blacklister) REFERENCES traps(id) ON DELETE CASCADE

=== [719] of [1277] ============================= id=[559] ==
Q:  What is a significant part of being REST-ful?
questiontag_set : ['web development']
datetime_added  =[2015-02-04 21:26:09.131926+00:00]
datetime_updated=[2015-02-04 21:26:09.131957+00:00]
---------------------------------------------- id=[335] --
A:
There is no state.  Regardless of which user calls it, it will always return the same thing.

=== [720] of [1277] ============================= id=[558] ==
Q:  Testing considerations:

1. how long it takes tests to run
1. brittleness of tests (how often have to change tests)
1. confidence that a new change doesn't break anything
1. confidence that functionality works
questiontag_set : ['testing']
datetime_added  =[2015-02-03 23:52:12.953425+00:00]
datetime_updated=[2015-02-03 23:52:12.953457+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [721] of [1277] ============================= id=[557] ==
Q:  [http://stackoverflow.com/questions/1515324/history-of-djangos-popularity][1]


  [1]: http://stackoverflow.com/questions/1515324/history-of-djangos-popularity
questiontag_set : ['django']
datetime_added  =[2015-02-03 23:23:04.563244+00:00]
datetime_updated=[2015-02-03 23:23:04.563275+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [722] of [1277] ============================= id=[556] ==
Q:  [http://stackoverflow.com/questions/18830540/sqlalchemy-session-refresh-does-not-refresh-object][1]


  [1]: http://stackoverflow.com/questions/18830540/sqlalchemy-session-refresh-does-not-refresh-object
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-02-03 18:55:23.132709+00:00]
datetime_updated=[2015-02-03 18:55:23.132738+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [723] of [1277] ============================= id=[555] ==
Q:  In SQLAlchemy, how do you re-query an object?
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-02-03 18:54:50.525165+00:00]
datetime_updated=[2015-02-03 18:54:50.525209+00:00]
---------------------------------------------- id=[334] --
A:
Use either `session.refresh(my_object)` to re-query or `session.expire(my_object)` to expire the object and the re-query it with a new query.

[http://docs.sqlalchemy.org/en/rel_0_9/orm/session_state_management.html#refreshing-expiring][1]


  [1]: http://docs.sqlalchemy.org/en/rel_0_9/orm/session_state_management.html#refreshing-expiring

=== [724] of [1277] ============================= id=[554] ==
Q:  [http://docs.sqlalchemy.org/en/rel_0_9/orm/session_state_management.html#refreshing-expiring][1]


  [1]: http://docs.sqlalchemy.org/en/rel_0_9/orm/session_state_management.html#refreshing-expiring
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-02-03 18:38:24.449676+00:00]
datetime_updated=[2015-02-03 18:38:24.449706+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [725] of [1277] ============================= id=[553] ==
Q:  [http://pyvideo.org/video/880/stop-writing-classes][1]


  [1]: http://pyvideo.org/video/880/stop-writing-classes
questiontag_set : ['python', 'video']
datetime_added  =[2015-02-03 17:33:23.076605+00:00]
datetime_updated=[2015-02-03 17:33:23.076637+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [726] of [1277] ============================= id=[552] ==
Q:  How do you tell make to keep going, even if there are errors?
questiontag_set : ['bash']
datetime_added  =[2015-02-02 22:20:33.909351+00:00]
datetime_updated=[2015-02-08 19:39:13.099352+00:00]
---------------------------------------------- id=[333] --
A:
`make -i, --ignore-errors`

=== [727] of [1277] ============================= id=[551] ==
Q:  Which `method` does `curl` use by default if `-X, --request <command>` is not used?
questiontag_set : ['bash']
datetime_added  =[2015-02-02 16:01:27.028445+00:00]
datetime_updated=[2015-02-02 16:01:27.028477+00:00]
---------------------------------------------- id=[332] --
A:
`GET` is used by default.  

`POST` is used by default if `--data` or `--form` is specified.

`PUT` is used by default if `-T, --upload-file <file>` is specified.

=== [728] of [1277] ============================= id=[550] ==
Q:  How do you rename a virtualenv?
questiontag_set : ['python']
datetime_added  =[2015-02-02 15:37:09.843569+00:00]
datetime_updated=[2015-02-02 15:37:09.843600+00:00]
---------------------------------------------- id=[331] --
A:
    cpvirtualenv oldenv newenv
    rmvirtualenv oldenv


=== [729] of [1277] ============================= id=[549] ==
Q:  Who created MongoDB?
questiontag_set : ['people']
datetime_added  =[2015-02-02 06:11:55.892188+00:00]
datetime_updated=[2015-02-02 06:11:55.892230+00:00]
---------------------------------------------- id=[330] --
A:
Eliot Horowitz

[http://en.wikipedia.org/wiki/MongoDB][1]


  [1]: http://en.wikipedia.org/wiki/MongoDB

=== [730] of [1277] ============================= id=[548] ==
Q:  [http://squarespace.com/home/overview][1]


  [1]: http://squarespace.com/home/overview
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-02 00:51:47.428679+00:00]
datetime_updated=[2015-02-02 00:51:47.428711+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [731] of [1277] ============================= id=[547] ==
Q:  [https://www.youtube.com/watch?v=LxLokrATgIw][1]  (Muhammed Ali speech)


  [1]: https://www.youtube.com/watch?v=LxLokrATgIw
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-02 00:48:37.597265+00:00]
datetime_updated=[2015-02-02 00:48:37.597296+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [732] of [1277] ============================= id=[546] ==
Q:  [http://en.wikiquote.org/wiki/Muhammad_Ali][1]


  [1]: http://en.wikiquote.org/wiki/Muhammad_Ali
questiontag_set : ['web pages to review']
datetime_added  =[2015-02-02 00:47:14.053912+00:00]
datetime_updated=[2015-02-02 00:47:14.053954+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [733] of [1277] ============================= id=[545] ==
Q:  
- [http://lifehacker.com/what-i-wish-i-knew-when-i-started-my-career-as-a-softwa-1681002791][2]  
- [http://www.quora.com/What-do-software-developers-age-30-and-over-know-now-that-they-wish-they-had-known-in-their-20s/answer/Michael-O-Church][3]
- [http://blog.salsitasoft.com/what-i-wish-i-knew-when-starting-out-as-a-software-developer-slow-the-fuck-down/][1]  

  [1]: http://blog.salsitasoft.com/what-i-wish-i-knew-when-starting-out-as-a-software-developer-slow-the-fuck-down/?imm_mid=0cbe3f&cmp=em-prog-na-na-newsltr_20150131
  [2]: http://lifehacker.com/what-i-wish-i-knew-when-i-started-my-career-as-a-softwa-1681002791
  [3]: http://www.quora.com/What-do-software-developers-age-30-and-over-know-now-that-they-wish-they-had-known-in-their-20s/answer/Michael-O-Church
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-31 16:45:57.372532+00:00]
datetime_updated=[2015-01-31 16:45:57.372565+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [734] of [1277] ============================= id=[544] ==
Q:  In sqlalchemy, what is the difference between `filter` and `filter_by`?
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-01-31 15:31:18.907849+00:00]
datetime_updated=[2015-01-31 15:31:18.907880+00:00]
---------------------------------------------- id=[329] --
A:
[http://stackoverflow.com/questions/2128505/whats-the-difference-between-filter-and-filter-by-in-sqlalchemy][1]


  [1]: http://stackoverflow.com/questions/2128505/whats-the-difference-between-filter-and-filter-by-in-sqlalchemy

=== [735] of [1277] ============================= id=[543] ==
Q:  [http://en.wikipedia.org/wiki/Hellbanning][1]


  [1]: http://en.wikipedia.org/wiki/Hellbanning
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-31 15:06:56.052172+00:00]
datetime_updated=[2015-01-31 15:06:56.052204+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [736] of [1277] ============================= id=[542] ==
Q:  [http://en.wikipedia.org/wiki/Eternal_September][1]


  [1]: http://en.wikipedia.org/wiki/Eternal_September
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-31 15:06:24.644205+00:00]
datetime_updated=[2015-01-31 15:06:24.644267+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [737] of [1277] ============================= id=[541] ==
Q:  review:

- [http://en.wikipedia.org/wiki/Hacker_News][1]
- [https://news.ycombinator.com/][2]


  [1]: http://en.wikipedia.org/wiki/Hacker_News
  [2]: https://news.ycombinator.com/
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-31 15:04:12.448035+00:00]
datetime_updated=[2015-01-31 15:04:12.448068+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [738] of [1277] ============================= id=[540] ==
Q:  What is a function defined within another function in Python called?  

e.g., what is `funcB` called in this example:

    def funcA():
      def funcB():
          pass
      pass
questiontag_set : ['python', 'closure']
datetime_added  =[2015-01-31 14:24:49.274400+00:00]
datetime_updated=[2015-01-31 14:24:59.062522+00:00]
---------------------------------------------- id=[328] --
A:
It is called a nested function.  It can also be called a closure if it meets the criteria of a closure:

A closure occurs when a function has access to a local variable from an enclosing scope that has finished its execution.

criteria:

1. access variables that are local to enclosing scopes
1. do so when they are executed outside of that scope

[http://stackoverflow.com/questions/4020419/why-arent-python-nested-functions-called-closures][1]


  [1]: http://stackoverflow.com/questions/4020419/why-arent-python-nested-functions-called-closures

=== [739] of [1277] ============================= id=[539] ==
Q:  review [http://www.shutupandship.com/2012/01/python-closures-explained.html][1]


  [1]: http://www.shutupandship.com/2012/01/python-closures-explained.html
questiontag_set : ['python', 'closure']
datetime_added  =[2015-01-31 14:21:18.889356+00:00]
datetime_updated=[2015-01-31 14:21:30.220210+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [740] of [1277] ============================= id=[538] ==
Q:  review [http://docs.python-guide.org/en/latest/writing/gotchas/][1]


  [1]: http://docs.python-guide.org/en/latest/writing/gotchas/
questiontag_set : ['python']
datetime_added  =[2015-01-31 14:20:53.561311+00:00]
datetime_updated=[2015-01-31 14:20:53.561344+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [741] of [1277] ============================= id=[537] ==
Q:  review: [http://stackoverflow.com/questions/4020419/closures-in-python][1]


  [1]: http://stackoverflow.com/questions/4020419/closures-in-python
questiontag_set : ['python', 'closure']
datetime_added  =[2015-01-31 14:20:41.287473+00:00]
datetime_updated=[2015-01-31 14:20:41.287504+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [742] of [1277] ============================= id=[536] ==
Q:  What is the canonical form of a UUID?  (num digits, types of digits, num groups, interpretation of sequences)

questiontag_set : ['computer science']
datetime_added  =[2015-01-31 13:41:49.861825+00:00]
datetime_updated=[2015-01-31 13:41:49.861862+00:00]
---------------------------------------------- id=[327] --
A:
In its canonical form, a UUID is represented by 32 lowercase hexadecimal digits, displayed in five groups separated by hyphens, in the form 8-4-4-4-12 for a total of 36 characters (32 alphanumeric characters and four hyphens). For example:
123e4567-e89b-12d3-a456-426655440000

The first 3 sequences are interpreted as complete hexadecimal numbers, while the final 2 as a plain sequence of bytes.

[http://en.wikipedia.org/wiki/Universally_unique_identifier][1]


  [1]: http://en.wikipedia.org/wiki/Universally_unique_identifier

=== [743] of [1277] ============================= id=[535] ==
Q:  How many possible UUID's are there?
questiontag_set : []
datetime_added  =[2015-01-31 13:37:48.076423+00:00]
datetime_updated=[2015-01-31 13:37:48.076463+00:00]
---------------------------------------------- id=[326] --
A:
10^38 (340 undecillion)

This is 2^128 because there are 128-bits / 16 bytes in a UUID.

For comparison there are an estimated 1080 atoms in the observable universe.

http://en.wikipedia.org/wiki/Universally_unique_identifier

=== [744] of [1277] ============================= id=[534] ==
Q:  What does uuid / uid stand for?
questiontag_set : []
datetime_added  =[2015-01-31 13:31:21.859790+00:00]
datetime_updated=[2015-01-31 13:31:21.859828+00:00]
---------------------------------------------- id=[325] --
A:
uuid = universally unique identifier

I assume that uid = unique identifier

[http://en.wikipedia.org/wiki/Universally_unique_identifier][1]


  [1]: http://en.wikipedia.org/wiki/Universally_unique_identifier

=== [745] of [1277] ============================= id=[533] ==
Q:  Where can I find the url in elzar in the `req`?
questiontag_set : ['trapit', 'trapit_elzar']
datetime_added  =[2015-01-31 01:54:46.169004+00:00]
datetime_updated=[2015-01-31 01:54:46.169036+00:00]
---------------------------------------------- id=[324] --
A:
`req.uri.script`

=== [746] of [1277] ============================= id=[532] ==
Q:  [http://memegenerator.net/][1] (for creating images with text)


  [1]: http://memegenerator.net/
questiontag_set : ['humor']
datetime_added  =[2015-01-31 01:02:53.389401+00:00]
datetime_updated=[2015-01-31 01:02:53.389438+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [747] of [1277] ============================= id=[531] ==
Q:  meme generator: [https://imgflip.com/memegenerator/Y-U-No][1] (for "y u no...")


  [1]: https://imgflip.com/memegenerator/Y-U-No
questiontag_set : ['humor']
datetime_added  =[2015-01-31 01:00:32.505890+00:00]
datetime_updated=[2015-01-31 01:00:32.505922+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [748] of [1277] ============================= id=[530] ==
Q:  How are the username and password passed in Basic access authentication via http?
questiontag_set : ['security']
datetime_added  =[2015-01-31 00:48:31.799561+00:00]
datetime_updated=[2015-01-31 00:48:31.799598+00:00]
---------------------------------------------- id=[323] --
A:
When the user agent wants to send the server authentication credentials it may use the Authorization header.  
The Authorization header is constructed as follows:  
Username and password are combined into a string "username:password"  
The resulting string is then encoded using the RFC2045-MIME variant of Base64, except not limited to 76 char/line  
The authorization method and a space i.e. "Basic " is then put before the encoded string.  
For example, if the user agent uses 'Aladdin' as the username and 'open sesame' as the password then the header is formed as follows:  
 
    Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

[http://en.wikipedia.org/wiki/Basic_access_authentication][1]


  [1]: http://en.wikipedia.org/wiki/Basic_access_authentication

=== [749] of [1277] ============================= id=[529] ==
Q:  review [http://en.wikipedia.org/wiki/Basic_access_authentication][1]  (this describes the http "Authorization: Basic" header that is used with at Trapit with the API.


  [1]: http://en.wikipedia.org/wiki/Basic_access_authentication
questiontag_set : ['web pages to review', 'security']
datetime_added  =[2015-01-31 00:46:01.230723+00:00]
datetime_updated=[2015-01-31 00:46:01.230764+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [750] of [1277] ============================= id=[528] ==
Q:  "as useful as..."  ???
questiontag_set : ['humor']
datetime_added  =[2015-01-31 00:31:33.732425+00:00]
datetime_updated=[2015-01-31 00:31:33.732455+00:00]
---------------------------------------------- id=[322] --
A:
Anne Frank's drum kit

=== [751] of [1277] ============================= id=[527] ==
Q:  Review unicode and utf-8 pages:

1. [http://stackoverflow.com/questions/10229156/how-many-characters-are-there-in-utf-8][1] (good answers)
1. [http://www.utf-8.com/][2]
1. [http://www.joelonsoftware.com/articles/Unicode.html][3]
1. [http://en.wikipedia.org/wiki/UTF-8][4]
1. [http://www.icu-project.org/docs/papers/forms_of_unicode/][5]
1. [http://en.wikipedia.org/wiki/Unicode][6]
1. [https://en.wikipedia.org/wiki/Universal_Coded_Character_Set][7]
1. [https://en.wikipedia.org/wiki/Universal_Character_Set_characters][8]
1. [https://en.wikipedia.org/wiki/8-bit_clean][9]
1. [https://en.wikipedia.org/wiki/Uuencoding][10]
1. [https://en.wikipedia.org/wiki/Comparison_of_Unicode_encodings][11]
1. [https://en.wikipedia.org/wiki/Code_point][12]
1. [https://en.wikipedia.org/wiki/Combining_character][13]
1. [https://en.wikipedia.org/wiki/Internationalization_and_localization][14]
1. [https://en.wikipedia.org/wiki/Locale][15]
1. [https://en.wikipedia.org/wiki/Character_encoding][16]
1. [https://codepoints.net/][17]
1. [https://en.wikipedia.org/wiki/Octet_(computing)][18]
1. [http://unicode.org/charts/][19]
1. [https://docs.python.org/2/howto/unicode.html][20]
1. [https://pythonhosted.org/kitchen/unicode-frustrations.html][21]

Binary-to-text:

1. [https://en.wikipedia.org/wiki/Binary-to-text_encoding][22]
1. [https://en.wikipedia.org/wiki/BinHex][23]
1. [https://en.wikipedia.org/wiki/Base64][24]
1. [https://en.wikipedia.org/wiki/MIME#Content-Transfer-Encoding][25]
1. [https://en.wikipedia.org/wiki/Quoted-printable][26]


  [1]: http://stackoverflow.com/questions/10229156/how-many-characters-are-there-in-utf-8
  [2]: http://www.utf-8.com/
  [3]: http://www.joelonsoftware.com/articles/Unicode.html
  [4]: http://en.wikipedia.org/wiki/UTF-8
  [5]: http://www.icu-project.org/docs/papers/forms_of_unicode/
  [6]: http://en.wikipedia.org/wiki/Unicode
  [7]: https://en.wikipedia.org/wiki/Universal_Coded_Character_Set
  [8]: https://en.wikipedia.org/wiki/Universal_Character_Set_characters
  [9]: https://en.wikipedia.org/wiki/8-bit_clean
  [10]: https://en.wikipedia.org/wiki/Uuencoding
  [11]: https://en.wikipedia.org/wiki/Comparison_of_Unicode_encodings
  [12]: https://en.wikipedia.org/wiki/Code_point
  [13]: https://en.wikipedia.org/wiki/Combining_character
  [14]: https://en.wikipedia.org/wiki/Internationalization_and_localization
  [15]: https://en.wikipedia.org/wiki/Locale
  [16]: https://en.wikipedia.org/wiki/Character_encoding
  [17]: https://codepoints.net/
  [18]: https://en.wikipedia.org/wiki/Octet_%28computing%29
  [19]: http://unicode.org/charts/
  [20]: https://docs.python.org/2/howto/unicode.html
  [21]: https://pythonhosted.org/kitchen/unicode-frustrations.html
  [22]: https://en.wikipedia.org/wiki/Binary-to-text_encoding
  [23]: https://en.wikipedia.org/wiki/BinHex
  [24]: https://en.wikipedia.org/wiki/Base64
  [25]: https://en.wikipedia.org/wiki/MIME#Content-Transfer-Encoding
  [26]: https://en.wikipedia.org/wiki/Quoted-printable
questiontag_set : ['unicode', 'character-encoding']
datetime_added  =[2015-01-30 20:40:27.169877+00:00]
datetime_updated=[2015-06-22 20:20:54.180845+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [752] of [1277] ============================= id=[526] ==
Q:  review

1. [http://www.isthisthingon.org/unicode/allchars1.php][1] (all unicode characters on a single web page! can copy-and-paste them; takes a while to load)
1. [http://en.wikipedia.org/wiki/List_of_Unicode_characters][2]
1. [http://babelstone.blogspot.com/2005/11/how-many-unicode-characters-are-there.html][3] (number of unicode characters)
1. [http://www.babelstone.co.uk/Unicode/whatisit.html][4] (show details for a particular unicode character)
1. 


  [1]: http://www.isthisthingon.org/unicode/allchars1.php
  [2]: http://en.wikipedia.org/wiki/List_of_Unicode_characters
  [3]: http://babelstone.blogspot.com/2005/11/how-many-unicode-characters-are-there.html
  [4]: http://www.babelstone.co.uk/Unicode/whatisit.html
questiontag_set : ['unicode']
datetime_added  =[2015-01-30 20:35:50.054685+00:00]
datetime_updated=[2015-01-30 20:35:50.054716+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [753] of [1277] ============================= id=[525] ==
Q:  Who did the music for the Wes Anderson 2009 movie "Fantastic Mr. Fox"?
questiontag_set : ['people']
datetime_added  =[2015-01-30 20:34:15.927256+00:00]
datetime_updated=[2015-01-30 20:34:15.927287+00:00]
---------------------------------------------- id=[321] --
A:
Alexandre Desplat

=== [754] of [1277] ============================= id=[524] ==
Q:  review: [https://www.pythonanywhere.com/][1]  (good for River!)


  [1]: https://www.pythonanywhere.com/
questiontag_set : ['python', 'web pages to review']
datetime_added  =[2015-01-30 15:11:56.000015+00:00]
datetime_updated=[2015-01-30 15:11:56.000047+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [755] of [1277] ============================= id=[523] ==
Q:  review: [http://pythonfiddle.com/][1]  (good for River!)


  [1]: http://pythonfiddle.com/
questiontag_set : ['python']
datetime_added  =[2015-01-30 15:11:05.110729+00:00]
datetime_updated=[2015-01-30 15:11:05.110772+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [756] of [1277] ============================= id=[522] ==
Q:  What are Python property's used for?
questiontag_set : ['python']
datetime_added  =[2015-01-29 22:28:37.984120+00:00]
datetime_updated=[2015-01-29 22:28:37.984152+00:00]
---------------------------------------------- id=[320] --
A:
The @property and getter/setter methods are useful for setting/getting values that need to access another data structure.

=== [757] of [1277] ============================= id=[521] ==
Q:  Who created pudb?
questiontag_set : ['people', 'python']
datetime_added  =[2015-01-29 22:27:11.306277+00:00]
datetime_updated=[2015-01-29 22:27:11.306309+00:00]
---------------------------------------------- id=[319] --
A:
Andreas Koeckner (inducer)  [https://github.com/inducer/pudb][1]


  [1]: https://github.com/inducer/pudb

=== [758] of [1277] ============================= id=[520] ==
Q:  review source code for pudb: [https://github.com/inducer/pudb][1]


  [1]: https://github.com/inducer/pudb
questiontag_set : ['python']
datetime_added  =[2015-01-29 22:25:58.699325+00:00]
datetime_updated=[2015-01-29 22:25:58.699360+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [759] of [1277] ============================= id=[519] ==
Q:  review [https://github.com/trending?l=python&since=monthly][1]  (github monthly trending python projects)


  [1]: https://github.com/trending?l=python&since=monthly
questiontag_set : ['python']
datetime_added  =[2015-01-29 22:24:29.771786+00:00]
datetime_updated=[2015-01-29 22:24:29.771828+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [760] of [1277] ============================= id=[518] ==
Q:  review [http://pythonhackers.com/open-source/][1] (github python projects with most stars)


  [1]: http://pythonhackers.com/open-source/
questiontag_set : ['python']
datetime_added  =[2015-01-29 22:23:17.756531+00:00]
datetime_updated=[2015-01-29 22:23:17.756563+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [761] of [1277] ============================= id=[517] ==
Q:  review https://github.com/inducer?tab=repositories  (inducer = Andreas Kloeckner, creator of pudb)
questiontag_set : ['python']
datetime_added  =[2015-01-29 22:14:23.906916+00:00]
datetime_updated=[2015-01-29 22:14:23.906947+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [762] of [1277] ============================= id=[516] ==
Q:  Use the `nosetests --pdb` to drop into the debugger on failures or errors.

Use the nose-pudb plugin to use pudb instead of pdb.
questiontag_set : ['python', 'pdb']
datetime_added  =[2015-01-29 15:48:50.955797+00:00]
datetime_updated=[2015-01-29 15:48:50.955828+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [763] of [1277] ============================= id=[515] ==
Q:  learn pytest: [http://pytest.org/latest/][1]


  [1]: http://pytest.org/latest/
questiontag_set : ['python']
datetime_added  =[2015-01-29 15:46:10.246685+00:00]
datetime_updated=[2015-01-29 15:46:10.246715+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [764] of [1277] ============================= id=[514] ==
Q:  note this tool in ipdb:

            with launch_ipdb_on_exception():
questiontag_set : ['python']
datetime_added  =[2015-01-29 15:42:55.531944+00:00]
datetime_updated=[2015-01-29 15:42:55.531974+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [765] of [1277] ============================= id=[513] ==
Q:  review [http://stackoverflow.com/questions/101268/hidden-features-of-python][1]


  [1]: http://stackoverflow.com/questions/101268/hidden-features-of-python
questiontag_set : ['python', 'web pages to review']
datetime_added  =[2015-01-29 15:32:31.032350+00:00]
datetime_updated=[2015-01-29 15:32:31.032381+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [766] of [1277] ============================= id=[512] ==
Q:  How do you show the result of the last executed statement in an interactive python interpreter session?
questiontag_set : ['python']
datetime_added  =[2015-01-29 15:32:00.141497+00:00]
datetime_updated=[2015-01-29 15:32:00.141535+00:00]
---------------------------------------------- id=[318] --
A:
Use the single underscore: `_`

=== [767] of [1277] ============================= id=[511] ==
Q:  review [http://www.huffingtonpost.com/johann-hari/the-real-cause-of-addicti_b_6506936.html][1]


  [1]: http://www.huffingtonpost.com/johann-hari/the-real-cause-of-addicti_b_6506936.html
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-29 15:12:34.093136+00:00]
datetime_updated=[2015-01-29 15:12:34.093169+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [768] of [1277] ============================= id=[510] ==
Q:  review: [https://python3wos.appspot.com/][1]  (Python 3 wall of superpowers -- shows most popular PyPI packages and which are python3 compatible)


  [1]: https://python3wos.appspot.com/
questiontag_set : ['python', 'web pages to review']
datetime_added  =[2015-01-29 14:59:08.213124+00:00]
datetime_updated=[2015-01-29 14:59:08.213157+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [769] of [1277] ============================= id=[509] ==
Q:  Try `pudb`!!   

`pip install pudb`

shows multiple lines of text
questiontag_set : ['python']
datetime_added  =[2015-01-29 03:43:57.710050+00:00]
datetime_updated=[2015-01-29 03:43:57.710081+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [770] of [1277] ============================= id=[508] ==
Q:  What does it mean when running tests and a test says:

    AssertionError: Test left uncommitted changes!
questiontag_set : ['trapit_elzar', 'trapit']
datetime_added  =[2015-01-28 23:35:36.221473+00:00]
datetime_updated=[2015-01-28 23:35:36.221504+00:00]
---------------------------------------------- id=[317] --
A:
In elzar.tests.__init__.ElzarTestCase.tearDown() there is a check to see if there is any sqlalchemy uncommited data.  If there is, then it fails with this message.

    self.assertTrue(
                self.session._is_clean(), "Test left uncommitted changes!")

=== [771] of [1277] ============================= id=[507] ==
Q:  Where is the code that manages the documents stored in Cassandra for Trapit?
questiontag_set : ['cassandra', 'trapit']
datetime_added  =[2015-01-28 22:36:29.973761+00:00]
datetime_updated=[2015-01-28 22:36:29.973793+00:00]
---------------------------------------------- id=[316] --
A:
It is in the `queuestore` repository.

=== [772] of [1277] ============================= id=[506] ==
Q:  [http://en.wikipedia.org/wiki/Neologism][1]


  [1]: http://en.wikipedia.org/wiki/Neologism
questiontag_set : ['vocabulary']
datetime_added  =[2015-01-28 19:22:20.870194+00:00]
datetime_updated=[2015-01-28 19:22:20.870225+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [773] of [1277] ============================= id=[505] ==
Q:  review [https://dl.dropboxusercontent.com/u/209/zxcvbn/test/index.html][1]


  [1]: https://dl.dropboxusercontent.com/u/209/zxcvbn/test/index.html
questiontag_set : ['security']
datetime_added  =[2015-01-27 18:29:33.971180+00:00]
datetime_updated=[2015-01-27 18:29:33.971209+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [774] of [1277] ============================= id=[504] ==
Q:  review [http://en.wikipedia.org/wiki/Password_strength#Guidelines_for_strong_passwords][1]


  [1]: http://en.wikipedia.org/wiki/Password_strength#Guidelines_for_strong_passwords
questiontag_set : ['security']
datetime_added  =[2015-01-27 18:25:52.410421+00:00]
datetime_updated=[2015-01-27 18:25:52.410452+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [775] of [1277] ============================= id=[503] ==
Q:  review [http://en.wikipedia.org/wiki/Vulnerability_(computing)][1]


  [1]: http://en.wikipedia.org/wiki/Vulnerability_%28computing%29
questiontag_set : ['security']
datetime_added  =[2015-01-27 18:25:05.311550+00:00]
datetime_updated=[2015-01-27 18:25:05.311579+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [776] of [1277] ============================= id=[502] ==
Q:  review [http://en.wikipedia.org/wiki/Threat_(computer)][1]


  [1]: http://en.wikipedia.org/wiki/Threat_%28computer%29
questiontag_set : ['security']
datetime_added  =[2015-01-27 18:24:42.541406+00:00]
datetime_updated=[2015-01-27 18:24:42.541436+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [777] of [1277] ============================= id=[501] ==
Q:  review [http://en.wikipedia.org/wiki/Threat_model][1]


  [1]: http://en.wikipedia.org/wiki/Threat_model
questiontag_set : ['security']
datetime_added  =[2015-01-27 18:23:50.658913+00:00]
datetime_updated=[2015-01-27 18:23:50.658944+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [778] of [1277] ============================= id=[500] ==
Q:  review [http://en.wikipedia.org/wiki/Password_strength#Entropy_as_a_measure_of_password_strength][1]


  [1]: http://en.wikipedia.org/wiki/Password_strength#Entropy_as_a_measure_of_password_strength
questiontag_set : ['security']
datetime_added  =[2015-01-27 18:21:33.236291+00:00]
datetime_updated=[2015-01-27 18:21:33.236320+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [779] of [1277] ============================= id=[499] ==
Q:  review [http://en.wikipedia.org/wiki/Rainbow_table][1]


  [1]: http://en.wikipedia.org/wiki/Rainbow_table
questiontag_set : ['security']
datetime_added  =[2015-01-27 18:19:36.192532+00:00]
datetime_updated=[2015-01-27 18:19:36.192561+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [780] of [1277] ============================= id=[498] ==
Q:  review [https://blogs.dropbox.com/tech/2012/04/zxcvbn-realistic-password-strength-estimation/][1]


  [1]: https://blogs.dropbox.com/tech/2012/04/zxcvbn-realistic-password-strength-estimation/
questiontag_set : ['security']
datetime_added  =[2015-01-27 18:16:24.770378+00:00]
datetime_updated=[2015-01-27 18:16:24.770408+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [781] of [1277] ============================= id=[497] ==
Q:  review [http://www.quora.com/What-is-the-difference-between-a-message-queue-and-a-task-queue-Why-would-a-task-queue-require-a-message-broker-like-RabbitMQ-Redis-Celery-or-IronMQ-to-function][1]


  [1]: http://www.quora.com/What-is-the-difference-between-a-message-queue-and-a-task-queue-Why-would-a-task-queue-require-a-message-broker-like-RabbitMQ-Redis-Celery-or-IronMQ-to-function
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-27 16:09:29.695107+00:00]
datetime_updated=[2015-01-27 16:09:29.695137+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [782] of [1277] ============================= id=[496] ==
Q:  review [http://www.noexcuselist.com/][1]


  [1]: http://www.noexcuselist.com/
questiontag_set : ['web pages to review', 'learning']
datetime_added  =[2015-01-27 16:06:41.426558+00:00]
datetime_updated=[2015-01-27 16:06:41.426589+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [783] of [1277] ============================= id=[495] ==
Q:  review: [http://www.quora.com/Besides-Quora-what-are-the-best-web-sites-to-learn-new-things][1]


  [1]: http://www.quora.com/Besides-Quora-what-are-the-best-web-sites-to-learn-new-things
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-27 16:06:10.042450+00:00]
datetime_updated=[2015-01-27 16:06:10.042482+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [784] of [1277] ============================= id=[494] ==
Q:  review: [http://www.quora.com/What-are-the-most-interesting-HTML-JS-DOM-CSS-hacks-that-most-web-developers-dont-know-about][1]


  [1]: http://www.quora.com/What-are-the-most-interesting-HTML-JS-DOM-CSS-hacks-that-most-web-developers-dont-know-about
questiontag_set : ['html', 'javascript', 'css']
datetime_added  =[2015-01-27 16:04:45.886899+00:00]
datetime_updated=[2015-01-27 16:04:45.886930+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [785] of [1277] ============================= id=[493] ==
Q:  Review: [http://www.quora.com/Whats-the-best-way-to-learn-something][1]


  [1]: http://www.quora.com/Whats-the-best-way-to-learn-something
questiontag_set : ['web pages to review', 'learning']
datetime_added  =[2015-01-27 15:35:04.174531+00:00]
datetime_updated=[2015-01-27 15:35:04.174563+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [786] of [1277] ============================= id=[492] ==
Q:  Review: [https://archive.org/details/softwarelibrary_msdos_games][1]

(MS-DOS games running in JavaScript in a browser using EM-DOSBOX emulator: [https://github.com/dreamlayers/em-dosbox][2] )

Also see: 

1. [https://github.com/kripken/emscripten][3]
1. [http://en.wikipedia.org/wiki/Emscripten][4]
1. http://en.wikipedia.org/wiki/LLVM


  [1]: https://archive.org/details/softwarelibrary_msdos_games
  [2]: https://github.com/dreamlayers/em-dosbox
  [3]: https://github.com/kripken/emscripten
  [4]: http://en.wikipedia.org/wiki/Emscripten
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-26 22:30:42.267321+00:00]
datetime_updated=[2015-01-26 22:30:42.267350+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [787] of [1277] ============================= id=[491] ==
Q:  Review:

[http://www.globalrichlist.com/][1]  
[http://www.leastof.org/worldwealthcalculator][2]  
[https://www.hopevault.org/rank.php][3] 


  [1]: http://www.globalrichlist.com/
  [2]: http://www.leastof.org/worldwealthcalculator
  [3]: https://www.hopevault.org/rank.php
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-26 18:39:16.139911+00:00]
datetime_updated=[2015-01-26 18:39:16.139941+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [788] of [1277] ============================= id=[490] ==
Q:  Review: [http://www.sqlfiddle.com/][1]


  [1]: http://www.sqlfiddle.com/
questiontag_set : ['sql', 'postgresql', 'web pages to review']
datetime_added  =[2015-01-26 16:04:38.764229+00:00]
datetime_updated=[2015-01-26 16:04:38.764260+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [789] of [1277] ============================= id=[489] ==
Q:  Review: [http://www.weotta.com/][1]


  [1]: http://www.weotta.com/
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-26 15:12:01.894048+00:00]
datetime_updated=[2015-01-26 15:12:01.894079+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [790] of [1277] ============================= id=[488] ==
Q:  In `vim` how do you search for a a sequence of characters, not including commas?  e.g.,

    blah blah, foo bar
    ^^^^^^^

Furthermore, how do you match the last 3 elements of a line in a comma-separated list?  e.g.,

    (5, 'foo', None, False, False, True, True),
                                     ^^^^^^^^^^^^^^
questiontag_set : ['vim']
datetime_added  =[2015-01-23 23:44:22.134690+00:00]
datetime_updated=[2015-01-23 23:44:22.134725+00:00]
---------------------------------------------- id=[315] --
A:
    [^,]\+
(matches 1 or more non-comma characters)

    /[^,]\+, [^,]\+, [^,]\+,$
(matches one or more non-comma characters, and does this 2 more times, then end-of-line)                                                                                                                                                               

=== [791] of [1277] ============================= id=[487] ==
Q:  In bash, how do you create a loop to iterate a certain number of times?
questiontag_set : ['bash']
datetime_added  =[2015-01-23 22:24:41.100420+00:00]
datetime_updated=[2015-01-23 22:24:41.100451+00:00]
---------------------------------------------- id=[314] --
A:
    : run the loop 5 times (1..5)
    for x in $(seq 1 5); do
        echo $x
    done

or

    for (( x=1; x<=5; x++ )); do
      echo $x
    done


>for (( expr1 ; expr2 ; expr3 )) ; do list ; done  
> First, the arithmetic expression expr1 is evaluated according to the
> rules described below  under  ARITHMETIC EVALUATION.  The arithmetic
> expression expr2 is then evalu‐ ated repeatedly until it evaluates to
> zero.  Each time expr2 evaluates to a non-zero value,  list  is 
> executed and the arithmetic expression expr3 is evaluated.  If any
> expression is omitted, it behaves as if it evaluates to 1.  The return
> value is  the exit  status  of  the  last command in list that is
> executed, or false if any of the expressions is invalid.

[bash(1) -- see section "SHELL GRAMMAR" and sub-section "Compound Commands"]

[http://www.cyberciti.biz/faq/bash-for-loop/][1]


  [1]: http://www.cyberciti.biz/faq/bash-for-loop/

=== [792] of [1277] ============================= id=[486] ==
Q:  How can I run the same test multiple times with `nosetests`?
questiontag_set : ['python', 'nosetests']
datetime_added  =[2015-01-23 22:15:26.987186+00:00]
datetime_updated=[2015-01-23 22:15:26.987218+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [793] of [1277] ============================= id=[485] ==
Q:  In Flowdock, how do you bring up a menu of emoji/emoticons?
questiontag_set : []
datetime_added  =[2015-01-23 20:10:47.536415+00:00]
datetime_updated=[2015-01-23 20:10:47.536457+00:00]
---------------------------------------------- id=[313] --
A:
cmd-control-space

=== [794] of [1277] ============================= id=[484] ==
Q:  Review: [http://www.urbandictionary.com/define.php?term=bye+felicia][1]


  [1]: http://www.urbandictionary.com/define.php?term=bye%20felicia
questiontag_set : ['vocabulary']
datetime_added  =[2015-01-23 17:00:46.595550+00:00]
datetime_updated=[2015-01-23 17:00:46.595586+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [795] of [1277] ============================= id=[483] ==
Q:  Review: [https://www.careerdean.com/][1]


  [1]: https://www.careerdean.com/
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-23 00:11:55.184806+00:00]
datetime_updated=[2015-01-23 00:11:55.184848+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [796] of [1277] ============================= id=[482] ==
Q:  For iOS Notes that are linked to a gmail account, where can they be viewed in gmail?
questiontag_set : ['iOS']
datetime_added  =[2015-01-22 18:45:02.217527+00:00]
datetime_updated=[2015-01-22 18:45:02.217557+00:00]
---------------------------------------------- id=[312] --
A:
Under the "Notes" label.  e.g., in the search box: label:notes

=== [797] of [1277] ============================= id=[481] ==
Q:  How can I tell vimdiff to apply the diff from one file to the other to bring them in sync?
questiontag_set : ['vim']
datetime_added  =[2015-01-21 22:46:47.769103+00:00]
datetime_updated=[2015-01-21 22:46:47.769135+00:00]
---------------------------------------------- id=[311] --
A:
Put the cursor on the change, and then type the command `dp` (for `:diffput` to put the diff into the other file).

Or, to get the change from the other file, use `do` (for `:diffget` to get the diff from the other file; the `o` stands for `obtain`)

=== [798] of [1277] ============================= id=[480] ==
Q:  Review: [http://hyperboleandahalf.blogspot.com/][1]  
[https://en.wikipedia.org/wiki/Hyperbole_and_a_Half][2]


  [1]: http://hyperboleandahalf.blogspot.com/
  [2]: https://en.wikipedia.org/wiki/Hyperbole_and_a_Half
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-21 16:16:31.719328+00:00]
datetime_updated=[2015-01-21 16:17:01.831915+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [799] of [1277] ============================= id=[479] ==
Q:  When running nosetests with an `import pdb; pdb.set_trace()`, and it hangs and does not show the breakpoint, what is likely the reason?  (and what are 2 different solutions?)
questiontag_set : ['python', 'nosetests']
datetime_added  =[2015-01-21 15:50:39.165932+00:00]
datetime_updated=[2015-05-29 13:10:56.436044+00:00]
---------------------------------------------- id=[310] --
A:
Either use `import nose; nose.tools.set_trace()` or run with `nosetests --nocapture`

=== [800] of [1277] ============================= id=[478] ==
Q:  Name all the employees of Trapit in the Portland office.
questiontag_set : ['trapit', 'people']
datetime_added  =[2015-01-20 22:42:02.323221+00:00]
datetime_updated=[2015-01-20 22:42:02.323252+00:00]
---------------------------------------------- id=[309] --
A:
1. Customer Support: Bill Siebert
1. Customer Support Ethan Siegel
1. Customer Support Kristin Doyle
1. Customer Support Cyd Anderson

1. Sales: Emily Kellett
1. Sales: Russell Morgan

1. Platform: Dan Lipert
1. Platform: Luke Arno
1. Platform: Rob Bednark
1. Platform: Tom Marshall


1. DevOps: Dave Setchell
1. DevOps: David Mercer

1. Manager: Tommy Ziemer
1. Product Manager: Becky Kluth

1. iOS: Ryley Herrington

1. Machine Learning: Stephen Wu
1. Machine Learning: Allison Sliter

1. Content Curation: Geoff Ziemer

=== [801] of [1277] ============================= id=[477] ==
Q:  What company was Gary Griffiths president of products and technical operations at, which was eventually acquired by Cisco?
questiontag_set : ['trapit']
datetime_added  =[2015-01-20 19:03:33.590917+00:00]
datetime_updated=[2015-01-20 19:03:33.590947+00:00]
---------------------------------------------- id=[308] --
A:
WebEx

=== [802] of [1277] ============================= id=[476] ==
Q:  What company was Gary Griffiths CEO of that was founded in 1998 and acquired by Dell in 2007?
questiontag_set : ['trapit']
datetime_added  =[2015-01-20 18:59:53.365227+00:00]
datetime_updated=[2015-01-20 18:59:53.365259+00:00]
---------------------------------------------- id=[307] --
A:
Everdream

Everdream is a digital content agency providing on-demand personal computer and desktop management software services.   
[https://www.crunchbase.com/organization/everdream][1]


  [1]: https://www.crunchbase.com/organization/everdream

=== [803] of [1277] ============================= id=[475] ==
Q:  In the Mac desktop, what is the UI element called that is typically at the bottom of the screen and has icons for apps that can be opened or are already opened?
questiontag_set : ['osx (OSX) (Mac)']
datetime_added  =[2015-01-20 18:50:17.649504+00:00]
datetime_updated=[2015-01-20 18:50:17.649538+00:00]
---------------------------------------------- id=[306] --
A:
`dock`

=== [804] of [1277] ============================= id=[474] ==
Q:  In `vim`, how do you apply a macro to a series of multiple lines?
questiontag_set : ['vim']
datetime_added  =[2015-01-20 15:23:09.403759+00:00]
datetime_updated=[2015-01-20 15:23:09.403800+00:00]
---------------------------------------------- id=[305] --
A:
Specify the range, followed by `norm! ` followed by the macro register.  
  e.g., to apply macro `a` to lines 5-10:

    :5,10norm! @a

To apply it to all lines:

    :%norm! @a

To apply it to only the lines that contain `foo`:

    :g/foo/normal! @a


=== [805] of [1277] ============================= id=[473] ==
Q:  Focus on your strengths (not your weaknesses).
questiontag_set : ['remind myself', 'habit']
datetime_added  =[2015-01-19 05:59:56.111730+00:00]
datetime_updated=[2015-01-19 06:00:13.363270+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [806] of [1277] ============================= id=[472] ==
Q:  In Django, how can you explicitly add a subquery to a query?
questiontag_set : ['django']
datetime_added  =[2015-01-17 15:58:17.912782+00:00]
datetime_updated=[2015-01-17 15:58:17.912815+00:00]
---------------------------------------------- id=[304] --
A:
Use the `extra` method, e.g.,

    Entry.objects.extra(select={'is_recent': "pub_date > '2006-01-01'"})
which results in the following SQL code:

    SELECT blog_entry.*, (pub_date > '2006-01-01') AS is_recent
FROM blog_entry;

[https://docs.djangoproject.com/en/1.7/ref/models/querysets/#extra][1]


  [1]:https://docs.djangoproject.com/en/1.7/ref/models/querysets/#extra

=== [807] of [1277] ============================= id=[471] ==
Q:  Review: [https://github.com/mattrobenolt?tab=repositories][1]


  [1]: https://github.com/mattrobenolt?tab=repositories
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-17 15:48:52.507824+00:00]
datetime_updated=[2015-01-17 15:48:52.507854+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [808] of [1277] ============================= id=[470] ==
Q:  Review: [https://mattrobenolt.com/][1]


  [1]: https://mattrobenolt.com/
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-17 15:46:58.266057+00:00]
datetime_updated=[2015-01-17 15:46:58.266088+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [809] of [1277] ============================= id=[469] ==
Q:  What do you call an SQL query that is inside another query, e.g.,

    SELECT * FROM my_table WHERE id=(SELECT id FROM other_table);

(3 different terms, one of which is the most common)
questiontag_set : ['sql', 'terminology']
datetime_added  =[2015-01-17 15:40:37.807349+00:00]
datetime_updated=[2015-02-22 06:33:40.482660+00:00]
---------------------------------------------- id=[303] --
A:
- `subquery` (most common)
- `nested query`
- `embedded query`

[https://en.wikipedia.org/wiki/SQL#Subqueries][1]


  [1]: https://en.wikipedia.org/wiki/SQL#Subqueries

=== [810] of [1277] ============================= id=[468] ==
Q:  Review: [http://googleonlinesecurity.blogspot.com/][1]


  [1]: http://googleonlinesecurity.blogspot.com/
questiontag_set : ['security']
datetime_added  =[2015-01-17 07:52:24.419811+00:00]
datetime_updated=[2015-01-17 07:52:24.419842+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [811] of [1277] ============================= id=[467] ==
Q:  [http://googleprojectzero.blogspot.com/][1]


  [1]: http://googleprojectzero.blogspot.com/
questiontag_set : ['security']
datetime_added  =[2015-01-17 07:51:55.776317+00:00]
datetime_updated=[2015-01-17 07:51:55.776348+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [812] of [1277] ============================= id=[466] ==
Q:  Review: [https://en.wikipedia.org/wiki/Project_Zero_(Google)][1]


  [1]: https://en.wikipedia.org/wiki/Project_Zero_%28Google%29
questiontag_set : ['security']
datetime_added  =[2015-01-17 07:51:13.676649+00:00]
datetime_updated=[2015-01-17 07:51:13.676686+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [813] of [1277] ============================= id=[465] ==
Q:  Review: [https://code.google.com/p/google-security-research/issues/list?can=1][1]


  [1]: https://code.google.com/p/google-security-research/issues/list?can=1
questiontag_set : ['security']
datetime_added  =[2015-01-17 07:50:21.917360+00:00]
datetime_updated=[2015-01-17 07:50:21.917401+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [814] of [1277] ============================= id=[464] ==
Q:  Review: [https://en.wikipedia.org/wiki/Zero-day_attack][1]


  [1]: https://en.wikipedia.org/wiki/Zero-day_attack
questiontag_set : ['security']
datetime_added  =[2015-01-17 07:49:52.347813+00:00]
datetime_updated=[2015-01-17 07:49:52.347847+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [815] of [1277] ============================= id=[463] ==
Q:  Review vim documentation:

all help in a single html page:  [http://vimdoc.sourceforge.net/vimum.html][1]

 (all help in a single pdf doc):  [http://www.eandem.co.uk/mrw/vim/usr_doc/ltrs_bm.pdf][2]


  [1]: http://vimdoc.sourceforge.net/vimum.html
  [2]: http://www.eandem.co.uk/mrw/vim/usr_doc/ltrs_bm.pdf
questiontag_set : ['web pages to review', 'vim']
datetime_added  =[2015-01-17 01:37:44.496881+00:00]
datetime_updated=[2015-01-17 01:37:44.496913+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [816] of [1277] ============================= id=[462] ==
Q:  In vimdiff, how do you:

1.  navigate to next/previous diff?
1.  quit all windows at once?
1.  make all windows equal width?
questiontag_set : ['vim']
datetime_added  =[2015-01-17 00:07:41.547871+00:00]
datetime_updated=[2015-01-17 00:07:41.547902+00:00]
---------------------------------------------- id=[302] --
A:
    ]c ==> next change
    [c ==> prev change
    ctl-w = - make all windows equal width
    :qa ==> quit all windows at once (instead of one at a time)

=== [817] of [1277] ============================= id=[461] ==
Q:  Given a feed_id, how do you find the name of that feed?
questiontag_set : ['trapit', 'sqlalchemy']
datetime_added  =[2015-01-16 22:47:02.834494+00:00]
datetime_updated=[2015-01-16 22:47:02.834534+00:00]
---------------------------------------------- id=[301] --
A:
    feed = session.query(Feed.name).filter(Feed.id == id).one()

(I have not tested this yet)

=== [818] of [1277] ============================= id=[460] ==
Q:  In git, how do you take one particular commit from another branch and apply it to the current branch?
questiontag_set : ['git']
datetime_added  =[2015-01-16 22:44:26.316400+00:00]
datetime_updated=[2015-01-16 22:44:26.316432+00:00]
---------------------------------------------- id=[300] --
A:
    git checkout branch-I-want-to-copy-the-commit-to
    git cherry-pick <commit-hash>

This will copy the commit to the current branch and commit it.

Here are some useful options:

       -n, --no-commit
       -e, --edit
           With this option, git cherry-pick will let you edit the commit message prior to
           committing.

=== [819] of [1277] ============================= id=[459] ==
Q:  Review: [http://www.danvk.org/2015/01/09/extracting-text-from-an-image-using-ocropus.html][1]


  [1]: http://www.danvk.org/2015/01/09/extracting-text-from-an-image-using-ocropus.html?utm_source=Python%20Weekly%20Newsletter&utm_campaign=5b2cdb02e2-Python_Weekly_Issue_174_January_15_2015&utm_medium=email&utm_term=0_9e26887fc5-5b2cdb02e2-312682901
questiontag_set : ['web pages to review', 'python']
datetime_added  =[2015-01-16 20:37:25.707480+00:00]
datetime_updated=[2015-01-16 20:37:25.707512+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [820] of [1277] ============================= id=[458] ==
Q:  Review: [http://charlesleifer.com/blog/walrus-lightweight-python-utilities-for-working-with-redis/][1]


  [1]: http://charlesleifer.com/blog/walrus-lightweight-python-utilities-for-working-with-redis/
questiontag_set : ['redis', 'python']
datetime_added  =[2015-01-16 20:31:55.723190+00:00]
datetime_updated=[2015-01-16 20:31:55.723221+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [821] of [1277] ============================= id=[457] ==
Q:  Review: [http://charlesleifer.com/][1]


  [1]: http://charlesleifer.com/
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-16 20:31:23.142156+00:00]
datetime_updated=[2015-01-16 20:31:23.142188+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [822] of [1277] ============================= id=[456] ==
Q:  In git, what do you call the files that have been added with "git add" but not committed yet?
questiontag_set : ['git']
datetime_added  =[2015-01-15 23:53:44.186756+00:00]
datetime_updated=[2015-01-15 23:53:44.186787+00:00]
---------------------------------------------- id=[299] --
A:
`staging area` or `index`

[http://git-scm.com/book/en/v2/Getting-Started-Git-Basics][1]


  [1]: http://git-scm.com/book/en/v2/Getting-Started-Git-Basics

=== [823] of [1277] ============================= id=[455] ==
Q:  In git, what do you call the changes you've made but have not added to the staging area?
questiontag_set : ['git']
datetime_added  =[2015-01-15 23:52:03.211891+00:00]
datetime_updated=[2015-01-15 23:52:03.211930+00:00]
---------------------------------------------- id=[298] --
A:
`working directory`

[http://git-scm.com/book/en/v2/Getting-Started-Git-Basics][1]


  [1]: http://git-scm.com/book/en/v2/Getting-Started-Git-Basics

=== [824] of [1277] ============================= id=[454] ==
Q:  Assuming the following git scenario:

    git add my_new_file
    git rm some_file
    git commit

At this point, how can you easily get back `some_file`?

questiontag_set : ['git']
datetime_added  =[2015-01-15 23:51:06.208665+00:00]
datetime_updated=[2015-01-15 23:51:06.208697+00:00]
---------------------------------------------- id=[297] --
A:
Find the sha for the last commit (e.g., `git log`).  Assume it's `1234abc`  
Then:

    git checkout 1234abc some_file

This will bring back `some_file` into your working directory, where you can then modify them or commit them.

=== [825] of [1277] ============================= id=[453] ==
Q:  Review: [https://en.wikipedia.org/wiki/Social_Selling][1]


  [1]: https://en.wikipedia.org/wiki/Social_Selling
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-15 20:30:10.272071+00:00]
datetime_updated=[2015-01-15 20:30:10.272102+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [826] of [1277] ============================= id=[452] ==
Q:  What does this do in Python?

    x = {1}
questiontag_set : ['python']
datetime_added  =[2015-01-15 17:01:37.779810+00:00]
datetime_updated=[2015-01-15 17:01:37.779852+00:00]
---------------------------------------------- id=[296] --
A:
It sets `x` to a set with one element, the integer `1`.  It is equivalent to:

    x = set([1])

=== [827] of [1277] ============================= id=[451] ==
Q:  Review: [https://en.wikipedia.org/wiki/Content_management][1]


  [1]: https://en.wikipedia.org/wiki/Content_management
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-14 22:38:32.739707+00:00]
datetime_updated=[2015-01-14 22:38:32.739737+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [828] of [1277] ============================= id=[450] ==
Q:  Review: [https://en.wikipedia.org/wiki/Content_strategy][1]


  [1]: https://en.wikipedia.org/wiki/Content_strategy
questiontag_set : ['web pages to review', 'trapit']
datetime_added  =[2015-01-14 22:37:53.882806+00:00]
datetime_updated=[2015-01-14 22:37:53.882840+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [829] of [1277] ============================= id=[449] ==
Q:  Review: [https://en.wikipedia.org/wiki/Content_marketing][1]


  [1]: https://en.wikipedia.org/wiki/Content_marketing
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-14 22:36:44.738214+00:00]
datetime_updated=[2015-01-14 22:36:44.738243+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [830] of [1277] ============================= id=[448] ==
Q:  Terms associated with Trapit's business:

1. content analytics (get click statistics on shares)
1. content distribution (sharing on social media)
1. content marketing (marketing by providing content that people want to read/see)  ("Content marketing is any marketing that involves the creation and sharing of media and publishing content in order to acquire and retain customers. " -wikipedia)
1. curation (selecting and choosing)
1. discovery (content discovery) (discovering new content)
1. employee advocacy (every employee becomes an extension of the marketing team)
1. machine learning / Artificial Intelligence
questiontag_set : ['trapit']
datetime_added  =[2015-01-14 22:35:01.749256+00:00]
datetime_updated=[2015-01-14 22:35:01.749288+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [831] of [1277] ============================= id=[447] ==
Q:  In Postgres, what does this do:
  DELETE FROM my_table;

(and what advantage does it have over the alternative?)
questiontag_set : ['sql', 'postgresql']
datetime_added  =[2015-01-14 15:16:40.894162+00:00]
datetime_updated=[2015-02-22 06:18:12.856658+00:00]
---------------------------------------------- id=[295] --
A:
It deletes **all** the data from the table.

[http://www.postgresql.org/docs/9.2/static/dml-delete.html][1]

Also, note that:

> For small tables DELETE is often faster and needs less aggressive
> locking (for heavy concurrent load):
> 
> `DELETE FROM my_table;` With no WHERE condition.
> 
> For medium or bigger tables, go with `TRUNCATE my_table`

[http://stackoverflow.com/questions/13223820/postgresql-delete-all-content][2]


  [1]: http://www.postgresql.org/docs/9.2/static/dml-delete.html
  [2]: http://stackoverflow.com/questions/13223820/postgresql-delete-all-content

=== [832] of [1277] ============================= id=[446] ==
Q:  What does this SQL do in Postgresql?

    ALTER TABLE my_table
        ALTER COLUMN id DROP DEFAULT;
questiontag_set : ['postgresql', 'sql']
datetime_added  =[2015-01-14 14:53:52.532472+00:00]
datetime_updated=[2015-01-14 14:53:52.532502+00:00]
---------------------------------------------- id=[294] --
A:
> SET/DROP DEFAULT These forms set or remove the default value for a
> column. The default values only apply to subsequent INSERT commands;
> they do not cause rows already in the table to change.

[http://www.postgresql.org/docs/9.2/static/sql-altertable.html][1]


  [1]: http://www.postgresql.org/docs/9.2/static/sql-altertable.html

=== [833] of [1277] ============================= id=[445] ==
Q:  In Postgresql, how do you give a user superuser permission?
questiontag_set : ['postgresql', 'sql']
datetime_added  =[2015-01-14 14:37:31.617890+00:00]
datetime_updated=[2015-01-14 14:37:31.617927+00:00]
---------------------------------------------- id=[293] --
A:
ALTER ROLE my_user WITH superuser;

=== [834] of [1277] ============================= id=[444] ==
Q:  How to login to Postgres as a different user?
questiontag_set : ['postgresql']
datetime_added  =[2015-01-14 01:03:31.665458+00:00]
datetime_updated=[2015-01-14 01:03:31.665488+00:00]
---------------------------------------------- id=[292] --
A:
1. CREATE USER myuser;
2. ALTER USER myuser WITH password 'mypassword';
3. echo 'localhost:5432:mydbname:myuser:mypassword' >> ~/.pgpass  # only needed if you don't want to be prompted for a password
4. chmod go-rwx ~/.pgpass
5. `psql -h localhost --dbname=mydbname --username myusername`  
    (note that the -h localhost part is important: it tells the psql client to connect using a TCP connection (which is configured to use password authentication), and not by a PEER connection (which does not care about the password))
    http://stackoverflow.com/questions/2942485/psql-fatal-ident-authentication-failed-for-user-postgres

=== [835] of [1277] ============================= id=[443] ==
Q:  How to add a new user in Postgres with psql?
questiontag_set : ['sql', 'postgresql']
datetime_added  =[2015-01-14 00:58:09.206623+00:00]
datetime_updated=[2015-01-14 00:58:09.206663+00:00]
---------------------------------------------- id=[291] --
A:
CREATE USER my_user;

=== [836] of [1277] ============================= id=[442] ==
Q:  In `git`, I accidently put a commit on the wrong branch.  How do I move it to another branch?
questiontag_set : ['git']
datetime_added  =[2015-01-13 18:59:17.072248+00:00]
datetime_updated=[2015-01-13 18:59:17.072283+00:00]
---------------------------------------------- id=[290] --
A:
Assuming you put it on master:

    git checkout master
    git branch my-new-branch  # create a new branch off of this commit
    git reset --hard HEAD~1  # set master back to the commit before

=== [837] of [1277] ============================= id=[441] ==
Q:  How to change vimdiff so that lines that changed are not given a color, and only the diffs within the line are given a color?

    :highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red

questiontag_set : ['vim']
datetime_added  =[2015-01-13 16:52:09.032140+00:00]
datetime_updated=[2015-01-13 16:52:09.032172+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [838] of [1277] ============================= id=[440] ==
Q:  Note that `vimdiff` can show side-by-side differences of not just 2 files but 3 or 4 as well.
questiontag_set : ['vim']
datetime_added  =[2015-01-13 16:14:10.852649+00:00]
datetime_updated=[2015-01-13 16:14:10.852693+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [839] of [1277] ============================= id=[439] ==
Q:  How do you tell `git` to use vimdiff for a diff?  (note that vimdiff has color side-by-side diffs)
questiontag_set : ['git', 'vim']
datetime_added  =[2015-01-13 16:13:05.913460+00:00]
datetime_updated=[2015-01-13 16:13:05.913493+00:00]
---------------------------------------------- id=[289] --
A:
    git difftool --no-prompt --tool=vimdiff

=== [840] of [1277] ============================= id=[438] ==
Q:  How to find Unicode characters to copy-and-paste to a chat, etc.?
questiontag_set : ['osx (OSX) (Mac)']
datetime_added  =[2015-01-13 01:45:58.945192+00:00]
datetime_updated=[2015-01-13 01:45:58.945223+00:00]
---------------------------------------------- id=[288] --
A:

- go to the Character Viewer (accessible via the "Input Sources" on the toolbar, the American flag icon, then click on "Show Character Viewer")

- or go to [http://copypastecharacter.com/][1]


  [1]: http://copypastecharacter.com/

=== [841] of [1277] ============================= id=[437] ==
Q:  How to do a smart replace in vim that takes into account case?
questiontag_set : ['vim']
datetime_added  =[2015-01-13 00:20:32.497659+00:00]
datetime_updated=[2015-01-13 00:20:32.497689+00:00]
---------------------------------------------- id=[287] --
A:
Install the `vim-abolish` plugin:  

1. edit .vimrc:  
Bundle 'tpope/vim-abolish'
1. vim  
:BundleInstall

e.g., how to convert:

      foo=>bar
      Foo=>Bar
      FOO=>BAR
      foo_zzz=>bar_zzz
      aaa_foo_zzz=>aaa_bar_zzz

e.g.,

    :%Subvert/foo/bar/g



=== [842] of [1277] ============================= id=[436] ==
Q:  What does this Python code do:

    my_set = set([1,2])
    my_set.update([4])
    print my_set
questiontag_set : ['python']
datetime_added  =[2015-01-12 19:23:07.082831+00:00]
datetime_updated=[2015-01-12 19:23:07.082861+00:00]
---------------------------------------------- id=[286] --
A:
    set([1, 2, 4])

> operation: s.update(t)  
> equivalent to: s |= t  
> result: return set s with elements added from t

[https://docs.python.org/2/library/sets.html#set-objects][1]


  [1]: https://docs.python.org/2/library/sets.html#set-objects

=== [843] of [1277] ============================= id=[435] ==
Q:  Review: [http://www.scotthyoung.com/blog/2014/12/22/degrees-of-freedom/][1]


  [1]: http://www.scotthyoung.com/blog/2014/12/22/degrees-of-freedom/
questiontag_set : ['web pages to review', 'productivity']
datetime_added  =[2015-01-12 18:54:04.697072+00:00]
datetime_updated=[2015-01-12 18:54:04.697113+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [844] of [1277] ============================= id=[434] ==
Q:  Review: [http://www.scotthyoung.com/blog/][1]


  [1]: http://www.scotthyoung.com/blog/
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-12 18:51:22.306064+00:00]
datetime_updated=[2015-01-12 18:51:22.306095+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [845] of [1277] ============================= id=[433] ==
Q:  Review: [https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures][1]


  [1]: https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures
questiontag_set : ['web pages to review', 'security']
datetime_added  =[2015-01-12 18:46:25.916063+00:00]
datetime_updated=[2015-01-12 18:46:25.916095+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [846] of [1277] ============================= id=[432] ==
Q:  Review: [http://www.quora.com/What-are-the-best-examples-of-crowdsourcing][1]


  [1]: http://www.quora.com/What-are-the-best-examples-of-crowdsourcing
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-12 03:57:54.083775+00:00]
datetime_updated=[2015-01-12 03:57:54.083804+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [847] of [1277] ============================= id=[431] ==
Q:  Review: [http://www.quora.com/What-are-some-QA-crowdsourcing-sites][1]


  [1]: http://www.quora.com/What-are-some-QA-crowdsourcing-sites
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-12 03:55:15.293567+00:00]
datetime_updated=[2015-01-12 03:55:15.293601+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [848] of [1277] ============================= id=[430] ==
Q:  Review: [https://www.quirky.com][1]


  [1]: https://www.quirky.com
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-12 03:52:06.941016+00:00]
datetime_updated=[2015-01-12 03:52:06.941058+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [849] of [1277] ============================= id=[429] ==
Q:  Review: [https://assembly.com/][1]


  [1]: https://assembly.com/
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-12 03:49:42.672894+00:00]
datetime_updated=[2015-01-12 03:49:42.672925+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [850] of [1277] ============================= id=[428] ==
Q:  Review: [http://programmers.stackexchange.com/questions/152745/learn-programming-backwards-or-so-i-failed-the-fizzbuzz-test-now-what][1] -- lots of good info for learning programming and improving skills


  [1]: http://programmers.stackexchange.com/questions/152745/learn-programming-backwards-or-so-i-failed-the-fizzbuzz-test-now-what
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-10 17:59:31.507900+00:00]
datetime_updated=[2015-01-10 17:59:31.507931+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [851] of [1277] ============================= id=[427] ==
Q:  Review: [https://github.com/vhf/free-programming-books/blob/master/free-programming-books.md#professional-development][1] - list of free programming books


  [1]: https://github.com/vhf/free-programming-books/blob/master/free-programming-books.md#professional-development
questiontag_set : ['web pages to review', 'programming']
datetime_added  =[2015-01-10 17:57:14.666281+00:00]
datetime_updated=[2015-01-10 17:57:14.666314+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [852] of [1277] ============================= id=[426] ==
Q:  Review: [http://lifehacks.stackexchange.com/?tab=month][1]  - Life Hacks (most popular for the month)


  [1]: http://lifehacks.stackexchange.com/?tab=month
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-10 17:55:36.525500+00:00]
datetime_updated=[2015-01-10 17:55:36.525560+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [853] of [1277] ============================= id=[425] ==
Q:  Review: [http://codereview.stackexchange.com/][1]  - code reviews


  [1]: http://codereview.stackexchange.com/
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-10 17:54:30.850476+00:00]
datetime_updated=[2015-01-10 17:54:30.850509+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [854] of [1277] ============================= id=[424] ==
Q:  Review: [http://stackexchange.com/sites#questions][1]  (list of all StackExchange sites, with categories and stats)


  [1]: http://stackexchange.com/sites#questions
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-10 17:43:06.084212+00:00]
datetime_updated=[2015-01-10 17:43:06.084247+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [855] of [1277] ============================= id=[423] ==
Q:  Review: [http://programmers.stackexchange.com/][1]  (Q&A for professional programmers interested in conceptual questions about software development)


  [1]: http://programmers.stackexchange.com/
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-10 17:42:18.428108+00:00]
datetime_updated=[2015-01-10 17:42:18.428140+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [856] of [1277] ============================= id=[422] ==
Q:  What are some techniques for designing / writing code when I'm stuck?
questiontag_set : ['programming']
datetime_added  =[2015-01-10 17:29:06.789652+00:00]
datetime_updated=[2015-01-10 17:29:06.789683+00:00]
---------------------------------------------- id=[285] --
A:
1. work backwards (e.g., with a query, figure out what you want from the query, and then work backwards; or with existing code, determine where you need the data and work backwards from there)
1. decompose - break the problem down into smaller chunks

=== [857] of [1277] ============================= id=[421] ==
Q:  Review: https://github.com/codelucas/newspaper  (web scraping for text and top image)
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-09 22:50:47.444529+00:00]
datetime_updated=[2015-01-09 22:50:47.444563+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [858] of [1277] ============================= id=[420] ==
Q:  How do you make the output of `grep` show the matches in color?
questiontag_set : ['bash']
datetime_added  =[2015-01-09 18:57:44.978289+00:00]
datetime_updated=[2015-01-09 18:57:44.978319+00:00]
---------------------------------------------- id=[284] --
A:
    grep --color


=== [859] of [1277] ============================= id=[419] ==
Q:  Review: [http://repairpdx.org/][1]


  [1]: http://repairpdx.org/
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-09 17:12:28.303279+00:00]
datetime_updated=[2015-01-09 17:12:28.303311+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [860] of [1277] ============================= id=[418] ==
Q:  Review: [https://travis-ci.com][1]  (continuous integration SaaS, free for open source, mentioned by Hannes)


  [1]: https://travis-ci.com
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-09 16:36:35.605709+00:00]
datetime_updated=[2015-01-09 16:36:35.605741+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [861] of [1277] ============================= id=[417] ==
Q:  Review: [https://codeship.com/][1]  - continuous integration SaaS, used by Hannes Hapke


  [1]: https://codeship.com/
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-09 16:34:51.677734+00:00]
datetime_updated=[2015-01-09 16:34:51.677771+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [862] of [1277] ============================= id=[416] ==
Q:  Review: [https://en.wikipedia.org/wiki/Transport_Layer_Security][1]  (TLS, SSL - Secure Sockets Layer)


  [1]: https://en.wikipedia.org/wiki/Transport_Layer_Security
questiontag_set : ['security']
datetime_added  =[2015-01-09 15:34:53.061951+00:00]
datetime_updated=[2015-01-09 15:34:53.061990+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [863] of [1277] ============================= id=[415] ==
Q:  Review: [https://en.wikipedia.org/wiki/SPDY][1]


  [1]: https://en.wikipedia.org/wiki/SPDY
questiontag_set : ['http']
datetime_added  =[2015-01-09 15:32:51.851332+00:00]
datetime_updated=[2015-01-09 15:32:51.851393+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [864] of [1277] ============================= id=[414] ==
Q:  Review: [http://tools.ietf.org/html/rfc7230][1] "Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing"


  [1]: http://tools.ietf.org/html/rfc7230
questiontag_set : ['http']
datetime_added  =[2015-01-09 15:31:35.747691+00:00]
datetime_updated=[2015-01-09 15:31:35.747739+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [865] of [1277] ============================= id=[413] ==
Q:  Review: 

- [https://en.wikipedia.org/wiki/Keepalive][1]
- [https://en.wikipedia.org/wiki/HTTP_persistent_connection][2]
- [http://tools.ietf.org/id/draft-thomson-hybi-http-timeout-01.html][3]
- [http://www.feedthebot.com/pagespeed/keep-alive.html][4]


  [1]: https://en.wikipedia.org/wiki/Keepalive
  [2]: https://en.wikipedia.org/wiki/HTTP_persistent_connection
  [3]: http://tools.ietf.org/id/draft-thomson-hybi-http-timeout-01.html
  [4]: http://www.feedthebot.com/pagespeed/keep-alive.html
questiontag_set : ['networking', 'http', 'web pages to review']
datetime_added  =[2015-01-09 15:30:41.050444+00:00]
datetime_updated=[2015-01-09 15:30:41.050474+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [866] of [1277] ============================= id=[412] ==
Q:  How do you curl and provide the data from a file?
questiontag_set : ['bash']
datetime_added  =[2015-01-09 15:22:16.241414+00:00]
datetime_updated=[2015-01-09 15:22:16.241447+00:00]
---------------------------------------------- id=[283] --
A:
Use `@`:

      curl -d @/tmp/myfile


>   -d, --data <data>  
>    If you start the data with the letter @, the rest should be a file name to read the data from, or - if you want curl to read
> the data from stdin.  The  contents  of  the
>               file must already be URL-encoded. Multiple files can also be specified. Posting data from a file named 'foobar' would thus
> be done with --data @foobar.

=== [867] of [1277] ============================= id=[411] ==
Q:  Review: [http://www.quora.com/Whats-something-I-can-do-right-now-to-increase-my-productivity][1]


  [1]: http://www.quora.com/Whats-something-I-can-do-right-now-to-increase-my-productivity
questiontag_set : ['productivity', 'web pages to review']
datetime_added  =[2015-01-09 14:36:49.916296+00:00]
datetime_updated=[2015-01-09 14:36:49.916329+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [868] of [1277] ============================= id=[410] ==
Q:  What causes a `git status` message like this:

> Your branch and 'origin/rb_run_zoidberg_standalone' have diverged, and
> have 29 and 9 different commits each, respectively.
questiontag_set : ['git']
datetime_added  =[2015-01-08 23:42:51.478958+00:00]
datetime_updated=[2015-01-08 23:42:51.478988+00:00]
---------------------------------------------- id=[282] --
A:
This is likely due to a rebase, where the local branch is now based off of a different commit than the origin branch.  It's easy to verify this by doing a `git log` on the local and the remote and see where they diverged.

Another possibility is that the commits were made both to the local branch and the remote branch.

It's easy to verify which it is by doing a `git log` on the local and the remote and see where they diverged.

=== [869] of [1277] ============================= id=[409] ==
Q:  What is the `__slots__` class attribute used for in Python?
questiontag_set : ['python']
datetime_added  =[2015-01-08 17:17:17.543399+00:00]
datetime_updated=[2015-01-08 17:17:17.543440+00:00]
---------------------------------------------- id=[281] --
A:
See [http://stackoverflow.com/questions/472000/python-slots][1]


  [1]: http://stackoverflow.com/questions/472000/python-slots

=== [870] of [1277] ============================= id=[408] ==
Q:  Review: [http://www.scotthyoung.com/blog/2014/12/08/knowing-facts-matters/][1]


  [1]: http://www.scotthyoung.com/blog/2014/12/08/knowing-facts-matters/
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-08 16:05:51.719532+00:00]
datetime_updated=[2015-01-08 16:05:51.719564+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [871] of [1277] ============================= id=[407] ==
Q:  Review: [http://www.quora.com/In-laymans-terms-how-does-Naive-Bayes-work][1]


  [1]: http://www.quora.com/In-laymans-terms-how-does-Naive-Bayes-work
questiontag_set : ['web pages to review', 'statistics']
datetime_added  =[2015-01-07 23:38:55.850900+00:00]
datetime_updated=[2015-01-07 23:38:55.850931+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [872] of [1277] ============================= id=[406] ==
Q:  Review: [http://www.quora.com/What-are-some-clever-programming-techniques-that-arent-used-often-enough][1]


  [1]: http://www.quora.com/What-are-some-clever-programming-techniques-that-arent-used-often-enough
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-07 23:29:24.120951+00:00]
datetime_updated=[2015-01-07 23:29:24.120982+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [873] of [1277] ============================= id=[405] ==
Q:  Review: [http://consumerist.com/][1]  (consumer information website)


  [1]: http://consumerist.com/
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-07 22:48:50.999217+00:00]
datetime_updated=[2015-01-07 22:48:50.999250+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [874] of [1277] ============================= id=[404] ==
Q:  What TV show are many of the Trapit components named from?
questiontag_set : ['trapit']
datetime_added  =[2015-01-07 22:04:17.219714+00:00]
datetime_updated=[2015-01-07 22:04:17.219745+00:00]
---------------------------------------------- id=[280] --
A:
Futurama

=== [875] of [1277] ============================= id=[403] ==
Q:  What is an easy way to see a list of all servers in our production environments?
questiontag_set : ['trapit']
datetime_added  =[2015-01-07 21:34:42.279231+00:00]
datetime_updated=[2015-01-07 21:34:42.279261+00:00]
---------------------------------------------- id=[279] --
A:
[http://puppet.trapit.com][1]

(however, note that the Astro servers are no longer on here; when the Astro servers were moved around 2/2015, they were moved under tachyon instead of puppet)


  [1]: http://puppet.trapit.com

=== [876] of [1277] ============================= id=[402] ==
Q:  How do you convert an API key of the form "35ad62ec33ca4e09a8d9adc9654b1014" into a uuid in the Python code?
questiontag_set : ['trapit', 'python']
datetime_added  =[2015-01-07 21:05:24.712750+00:00]
datetime_updated=[2015-01-07 21:05:24.712788+00:00]
---------------------------------------------- id=[278] --
A:
    import uuid
    
    my_uuid = uuid.UUID('35ad62ec33ca4e09a8d9adc9654b1014')
    # Note that this form is the hex form

=== [877] of [1277] ============================= id=[401] ==
Q:  Review: [http://www.pydanny.com/category/python.html][1]


  [1]: http://www.pydanny.com/category/python.html
questiontag_set : ['python', 'web pages to review']
datetime_added  =[2015-01-06 17:33:54.642460+00:00]
datetime_updated=[2015-01-06 17:33:54.642492+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [878] of [1277] ============================= id=[400] ==
Q:  Review: [https://medium.com/cs-math/2014-django-development-mistakes-in-2014-f48623f58b21][1]


  [1]: https://medium.com/cs-math/2014-django-development-mistakes-in-2014-f48623f58b21
questiontag_set : ['django']
datetime_added  =[2015-01-06 17:31:44.796614+00:00]
datetime_updated=[2015-01-06 17:31:44.796669+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [879] of [1277] ============================= id=[399] ==
Q:  Review:  [https://medium.com/cs-math/11-things-i-wish-i-knew-about-django-development-before-i-started-my-company-f29f6080c131][1]


  [1]: https://medium.com/cs-math/11-things-i-wish-i-knew-about-django-development-before-i-started-my-company-f29f6080c131
questiontag_set : ['django']
datetime_added  =[2015-01-06 17:31:17.318755+00:00]
datetime_updated=[2015-01-06 17:31:17.318796+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [880] of [1277] ============================= id=[398] ==
Q:  What is the difference between bookmarks and readinglists in Trapit?
questiontag_set : ['trapit']
datetime_added  =[2015-01-05 20:46:09.097628+00:00]
datetime_updated=[2015-06-29 23:53:54.995990+00:00]
---------------------------------------------- id=[277] --
A:
Bookmarks are collections of traps, whereas readinglists are collections of documents.

=== [881] of [1277] ============================= id=[397] ==
Q:  In Python, how do you print each line of source code as it is being executed?
questiontag_set : ['python']
datetime_added  =[2015-01-05 15:56:35.170112+00:00]
datetime_updated=[2015-01-05 15:56:35.170143+00:00]
---------------------------------------------- id=[276] --
A:
    python -m trace --trace myfile.py

or, in the source code:

    import trace
    tracer = trace.Trace(count=False, trace=True)
    tracer.run('recurse(2)')

[http://bip.weizmann.ac.il/course/python/PyMOTW/PyMOTW/docs/trace/index.html][1]


  [1]: http://bip.weizmann.ac.il/course/python/PyMOTW/PyMOTW/docs/trace/index.html

=== [882] of [1277] ============================= id=[396] ==
Q:  What is the rule about joins on NULL values in SQL?
questiontag_set : ['sql']
datetime_added  =[2015-01-05 15:35:35.756017+00:00]
datetime_updated=[2015-01-05 15:35:35.756051+00:00]
---------------------------------------------- id=[275] --
A:
>Programmers should take special care when joining tables on columns that can contain NULL values, since NULL will never match any other value (not even NULL itself), unless the join condition explicitly uses combination predicate that first checks that the joins fields are NOT NULL before applying the remaining predicate condition(s). 

[https://en.wikipedia.org/wiki/Join_(SQL)][1]


  [1]: https://en.wikipedia.org/wiki/Join_%28SQL%29

=== [883] of [1277] ============================= id=[395] ==
Q:  Review Rust programming language:

- [http://www.rust-lang.org/][1]
- [https://github.com/rust-lang/rust][2]
- [http://www.reddit.com/r/rust/][3]
- [https://en.wikipedia.org/wiki/Rust_(programming_language)][4]
- [https://stackoverflow.com/questions/tagged/rust][5]


  [1]: http://www.rust-lang.org/
  [2]: https://github.com/rust-lang/rust
  [3]: http://www.reddit.com/r/rust/
  [4]: https://en.wikipedia.org/wiki/Rust_%28programming_language%29
  [5]: https://stackoverflow.com/questions/tagged/rust
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-04 16:21:32.892355+00:00]
datetime_updated=[2015-01-04 16:21:32.892386+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [884] of [1277] ============================= id=[394] ==
Q:  Review: flask source code [https://github.com/mitsuhiko/flask][1]


  [1]: https://github.com/mitsuhiko/flask
questiontag_set : ['review source code']
datetime_added  =[2015-01-04 16:18:13.550079+00:00]
datetime_updated=[2015-01-04 16:18:13.550111+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [885] of [1277] ============================= id=[393] ==
Q:  Review: Celery  [https://github.com/celery/celery][1]


  [1]: https://github.com/celery/celery
questiontag_set : ['web pages to review', 'review source code']
datetime_added  =[2015-01-04 16:17:27.299008+00:00]
datetime_updated=[2015-01-04 16:17:27.299042+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [886] of [1277] ============================= id=[392] ==
Q:  Who created Celery?
questiontag_set : ['people_software']
datetime_added  =[2015-01-04 16:16:53.683717+00:00]
datetime_updated=[2015-01-04 16:16:53.683752+00:00]
---------------------------------------------- id=[274] --
A:
Ask Solem Hoel

- works at: vmware (per Quora.com profile)
- github: [https://github.com/ask][1]
- Celery: [https://github.com/celery/celery][2]
- Twitter: [https://twitter.com/asksol][3]
- Quora: [http://www.quora.com/Ask-Solem][4]


  [1]: https://github.com/ask
  [2]: http://%20https://github.com/celery/celery
  [3]: https://twitter.com/asksol
  [4]: http://www.quora.com/Ask-Solem

=== [887] of [1277] ============================= id=[391] ==
Q:  Who created Flask?
questiontag_set : ['people_software']
datetime_added  =[2015-01-04 16:00:38.665764+00:00]
datetime_updated=[2015-01-04 16:00:38.665797+00:00]
---------------------------------------------- id=[273] --
A:
Armin Ronacher

=== [888] of [1277] ============================= id=[390] ==
Q:  Who is the creator of Redis?
questiontag_set : ['people', 'people_software']
datetime_added  =[2015-01-04 16:00:16.344592+00:00]
datetime_updated=[2015-01-04 16:00:16.344623+00:00]
---------------------------------------------- id=[272] --
A:
Salvatore Sanfilippo "antirez"

GitHub: [https://github.com/antirez][1]  
homepage: [http://invece.org/][2]  
Twitter:  [https://twitter.com/antirez][3]


  [1]: https://github.com/antirez
  [2]: http://invece.org/
  [3]: https://twitter.com/antirez

=== [889] of [1277] ============================= id=[389] ==
Q:  Review: antirez's blog (Redis creator): [http://antirez.com/latest/0][1]


  [1]: http://antirez.com/latest/0
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-04 15:46:11.520399+00:00]
datetime_updated=[2015-01-04 15:46:11.520430+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [890] of [1277] ============================= id=[388] ==
Q:  Review: Armin Ronacher's blog: [http://lucumr.pocoo.org/][1]


  [1]: http://lucumr.pocoo.org/
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-04 15:44:50.135742+00:00]
datetime_updated=[2015-01-04 15:44:50.135772+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [891] of [1277] ============================= id=[387] ==
Q:  Review: [http://lucumr.pocoo.org/2011/7/19/sqlachemy-and-you/][1] (a comparison of Django ORM and SQLAlchemy.


  [1]: http://lucumr.pocoo.org/2011/7/19/sqlachemy-and-you/
questiontag_set : ['django', 'sqlalchemy']
datetime_added  =[2015-01-04 15:42:42.023049+00:00]
datetime_updated=[2015-01-04 15:42:42.023091+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [892] of [1277] ============================= id=[386] ==
Q:  
1. To see how a topic is organized, e.g., the topic `Quora`:
  [http://www.quora.com/Quora/organize][1]


1. The top topic Quora topic -- `Major-Topics`: [http://www.quora.com/Major-Topics/manage][2]

1. Q: How to search for a topic?
A: Go to http://quora.com and start typing in the `Search` box.

1. [http://www.quora.com/sitemap/alphabetical_topics/all][3]  is a list of all topics, but it's by the first 2 letters so is not very useful.

1. [http://www.quora.com/How-do-I-find-interesting-topics-to-follow-on-Quora][4]


  [1]: http://www.quora.com/Quora/organize
  [2]: http://www.quora.com/Major-Topics/manage
  [3]: http://www.quora.com/sitemap/alphabetical_topics/all
  [4]: http://www.quora.com/How-do-I-find-interesting-topics-to-follow-on-Quora
questiontag_set : []
datetime_added  =[2015-01-04 15:41:52.693092+00:00]
datetime_updated=[2015-01-04 15:41:52.693134+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [893] of [1277] ============================= id=[385] ==
Q:  In vim, how do you comment-out multiple lines?
questiontag_set : ['vim']
datetime_added  =[2015-01-04 03:59:55.570106+00:00]
datetime_updated=[2015-01-04 03:59:55.570140+00:00]
---------------------------------------------- id=[271] --
A:
1. `Ctrl-v` (select the starting line)
2. now move to the last line you want to comment (e.g., `j` to move down a line at a time)
   (you should see at least the first column in those lines highlighted)
3. `I#`  (the command to insert a comment)  
-or-  
    `s/^/#/`

=== [894] of [1277] ============================= id=[384] ==
Q:  How do you find the pdf documentation for a project in readthedocs?
questiontag_set : []
datetime_added  =[2015-01-04 03:23:54.408375+00:00]
datetime_updated=[2015-01-04 03:23:54.408405+00:00]
---------------------------------------------- id=[270] --
A:
e.g.,

[https://readthedocs.org/projects/django/downloads/][1]


  [1]: https://readthedocs.org/projects/django/downloads/

=== [895] of [1277] ============================= id=[383] ==
Q:  How does an outer join differ from other joins?
questiontag_set : ['sql']
datetime_added  =[2015-01-02 23:49:06.833860+00:00]
datetime_updated=[2015-01-02 23:49:06.833892+00:00]
---------------------------------------------- id=[269] --
A:
>An outer join does not require each record in the two joined tables to have a matching record. The joined table retains each record—even if no other matching record exists. Outer joins subdivide further into left outer joins, right outer joins, and full outer joins, depending on which table's rows are retained (left, right, or both).
(In this case left and right refer to the two sides of the JOIN keyword.)
No implicit join-notation for outer joins exists in standard SQL.

[https://en.wikipedia.org/wiki/Join_(SQL)][1]


  [1]: https://en.wikipedia.org/wiki/Join_%28SQL%29

=== [896] of [1277] ============================= id=[382] ==
Q:  What is an alternative way of writing this SQL query:

    SELECT *
    FROM employee, department
    WHERE employee.DepartmentID = department.DepartmentID;

(hint: this query uses implicit join notation; use explicit join notation instead)
questiontag_set : ['sql']
datetime_added  =[2015-01-02 23:32:19.750594+00:00]
datetime_updated=[2015-01-02 23:32:19.750625+00:00]
---------------------------------------------- id=[268] --
A:
    SELECT *
    FROM employee INNER JOIN department
    ON employee.DepartmentID = department.DepartmentID;

[https://en.wikipedia.org/wiki/Join_(SQL)][1]


  [1]: https://en.wikipedia.org/wiki/Join_%28SQL%29

=== [897] of [1277] ============================= id=[381] ==
Q:  What is an alternative way of writing this SQL query:

    SELECT *
    FROM employee INNER JOIN department
    ON employee.DepartmentID = department.DepartmentID;

(hint: this query uses explicit join notation; use implicit join notation instead)
questiontag_set : ['sql']
datetime_added  =[2015-01-02 23:30:40.005237+00:00]
datetime_updated=[2015-01-02 23:42:22.068801+00:00]
---------------------------------------------- id=[267] --
A:
    SELECT *
    FROM employee, department
    WHERE employee.DepartmentID = department.DepartmentID;

[https://en.wikipedia.org/wiki/Join_(SQL)][1]


  [1]: https://en.wikipedia.org/wiki/Join_%28SQL%29

=== [898] of [1277] ============================= id=[380] ==
Q:  What does a CROSS JOIN (aka Cartesian product) do?
questiontag_set : ['sql']
datetime_added  =[2015-01-02 23:28:10.250856+00:00]
datetime_updated=[2015-01-02 23:28:10.250894+00:00]
---------------------------------------------- id=[266] --
A:
It will produce rows which combine each row from the first table with each row from the second table.

[https://en.wikipedia.org/wiki/Join_(SQL)][1]


  [1]: https://en.wikipedia.org/wiki/Join_%28SQL%29

=== [899] of [1277] ============================= id=[379] ==
Q:  What kind of join is this?

    SELECT * FROM employee, department;
questiontag_set : ['sql']
datetime_added  =[2015-01-02 23:26:33.196797+00:00]
datetime_updated=[2015-01-02 23:26:33.196831+00:00]
---------------------------------------------- id=[265] --
A:
This is an implicit cross join, equivalent to:

    SELECT *
    FROM employee CROSS JOIN department;

[https://en.wikipedia.org/wiki/Join_(SQL)][1]


  [1]: https://en.wikipedia.org/wiki/Join_%28SQL%29

=== [900] of [1277] ============================= id=[378] ==
Q:  What is another name for the output of an SQL CROSS JOIN?
questiontag_set : ['sql']
datetime_added  =[2015-01-02 23:24:12.438132+00:00]
datetime_updated=[2015-01-02 23:24:12.438163+00:00]
---------------------------------------------- id=[264] --
A:
Cartesian product

[https://en.wikipedia.org/wiki/Join_(SQL)][1]


  [1]: https://en.wikipedia.org/wiki/Join_%28SQL%29

=== [901] of [1277] ============================= id=[377] ==
Q:  Review hired.com website for job hunting: [https://hired.com][1]


  [1]: https://hired.com
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-02 20:52:27.177985+00:00]
datetime_updated=[2015-01-02 20:52:27.178015+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [902] of [1277] ============================= id=[376] ==
Q:  Review: [https://github.com/miguelgrinberg?tab=repositories][1]


  [1]: https://github.com/miguelgrinberg?tab=repositories
questiontag_set : ['web pages to review', 'review source code']
datetime_added  =[2015-01-02 18:06:51.511952+00:00]
datetime_updated=[2015-01-02 18:06:51.511986+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [903] of [1277] ============================= id=[375] ==
Q:  Review: [http://blog.miguelgrinberg.com/][1]


  [1]: http://blog.miguelgrinberg.com/
questiontag_set : ['web pages to review']
datetime_added  =[2015-01-02 17:59:38.000526+00:00]
datetime_updated=[2015-01-02 17:59:38.000561+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [904] of [1277] ============================= id=[374] ==
Q:  What is the purpose of `primaryjoin` and `secondaryjoin` in a many-to-many relationship in sqlalchemy?
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-01-02 17:47:38.682109+00:00]
datetime_updated=[2015-01-02 18:01:58.481459+00:00]
---------------------------------------------- id=[263] --
A:
>In a many to many relationship, the primaryjoin expression describes the join between the left table and the junction table, and the secondaryjoin describes the join between the junction table and the right table. 

>In other words, the primaryjoin expression is saying,  
"find all rows in the followers table where follower_id is X"  
the secondaryjoin expression is saying  
"find all rows in the followers table where followed_id is X", and get those two together to find all users that follow user X, and all users that are followed by user X.


[http://stackoverflow.com/questions/19598578/need-some-extra-help-understanding-primaryjoin-and-secondaryjoin-in-sqlalche][1]


  [1]: http://stackoverflow.com/questions/19598578/need-some-extra-help-understanding-primaryjoin-and-secondaryjoin-in-sqlalche

=== [905] of [1277] ============================= id=[373] ==
Q:  For a sqlalchemy `relationship()`, what is the difference between `primaryjoin` and `secondaryjoin`?
questiontag_set : ['sqlalchemy']
datetime_added  =[2015-01-02 17:32:02.403191+00:00]
datetime_updated=[2015-01-02 17:32:02.403222+00:00]
---------------------------------------------- id=[261] --
A:
`secondaryjoin` is used when a `secondary` table is used.

>The default behavior of relationship() when constructing a join is that it equates the value of primary key columns on one side to that of foreign-key-referring columns on the other. We can change this criterion to be anything we’d like using the primaryjoin argument, as well as the secondaryjoin argument in the case when a “secondary” table is used.

...

> Another element of the primary join condition is how those columns considered “foreign” are determined. Usually, some subset of Column objects will specify ForeignKey, or otherwise be part of a ForeignKeyConstraint that’s relevant to the join condition. relationship() looks to this foreign key status as it decides how it should load and persist data for this relationship. However, the primaryjoin argument can be used to create a join condition that doesn’t involve any “schema” level foreign keys. We can combine primaryjoin along with foreign_keys and remote_side explicitly in order to establish such a join.

...

> Many to many relationships can be customized by one or both of primaryjoin and secondaryjoin - the latter is significant for a relationship that specifies a many-to-many reference using the secondary argument. A common situation which involves the usage of primaryjoin and secondaryjoin is when establishing a many-to-many relationship from a class to itself, as shown below...

...

> Note that in both examples, the backref keyword specifies a left_nodes backref - when relationship() creates the second relationship in the reverse direction, it’s smart enough to reverse the primaryjoin and secondaryjoin arguments.

[http://docs.sqlalchemy.org/en/rel_0_9/orm/join_conditions.html#specifying-alternate-join-conditions][1]


  [1]: http://docs.sqlalchemy.org/en/rel_0_9/orm/join_conditions.html#specifying-alternate-join-conditions

=== [906] of [1277] ============================= id=[372] ==
Q:  How do you execute a `for` loop in the Python debugger (`pdb`)?
questiontag_set : ['python', 'pdb']
datetime_added  =[2015-01-01 17:59:36.163487+00:00]
datetime_updated=[2015-01-01 17:59:36.163519+00:00]
---------------------------------------------- id=[260] --
A:
    pdb> for n in range(2): print n

=== [907] of [1277] ============================= id=[371] ==
Q:  What is the emacs plugin that Howard uses for doing lists, wiki's, etc.?
questiontag_set : []
datetime_added  =[2014-12-31 21:53:31.308664+00:00]
datetime_updated=[2014-12-31 21:53:31.308713+00:00]
---------------------------------------------- id=[259] --
A:
org-mode

[https://en.wikipedia.org/wiki/Org-mode][1]


  [1]: https://en.wikipedia.org/wiki/Org-mode

=== [908] of [1277] ============================= id=[370] ==
Q:  In SQLAlchemy, when the `backref` keyword is used on a single relationship, it’s exactly the same as if what?
questiontag_set : ['sqlalchemy']
datetime_added  =[2014-12-31 02:23:50.123493+00:00]
datetime_updated=[2014-12-31 02:25:03.670992+00:00]
---------------------------------------------- id=[258] --
A:
>...it’s exactly the same as if the above two relationships were created individually using back_populates on each.

Entire quote:

>Remember, when the backref keyword is used on a single relationship, it’s exactly the same as if the above two relationships were created individually using back_populates on each.

[http://docs.sqlalchemy.org/en/rel_0_9/orm/backref.html][1]


  [1]: http://docs.sqlalchemy.org/en/rel_0_9/orm/backref.html

=== [909] of [1277] ============================= id=[369] ==
Q:  Review: [https://weblogs.java.net/blog/tomwhite/archive/2007/11/consistent_hash.html][1]


  [1]: https://weblogs.java.net/blog/tomwhite/archive/2007/11/consistent_hash.html
questiontag_set : ['web pages to review']
datetime_added  =[2014-12-30 21:05:25.685725+00:00]
datetime_updated=[2014-12-30 21:05:25.685766+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [910] of [1277] ============================= id=[368] ==
Q:  Review: [https://github.com/reddit/reddit][1]


  [1]: https://github.com/reddit/reddit
questiontag_set : ['python', 'web pages to review', 'review source code']
datetime_added  =[2014-12-30 20:36:09.288004+00:00]
datetime_updated=[2014-12-30 20:36:09.288035+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [911] of [1277] ============================= id=[367] ==
Q:  What does the following output in Python:

    my_list = [1,2]
    my_list.extend(['a', 'b'])
    print my_list
questiontag_set : ['python']
datetime_added  =[2014-12-30 19:18:44.369799+00:00]
datetime_updated=[2014-12-30 19:18:44.369838+00:00]
---------------------------------------------- id=[257] --
A:
    [1, 2, 'a', 'b']

=== [912] of [1277] ============================= id=[366] ==
Q:  What does the following output in Python:

    my_list = [1,2]
    my_list.insert(1, 'foo')
    print my_list
questiontag_set : ['python']
datetime_added  =[2014-12-30 19:16:07.030675+00:00]
datetime_updated=[2014-12-30 19:16:07.030710+00:00]
---------------------------------------------- id=[256] --
A:
[1, 'foo', 2]

=== [913] of [1277] ============================= id=[365] ==
Q:  What do you call a SQL table who's purpose is to relate two other tables to create a many-to-many relationship?
questiontag_set : ['sql']
datetime_added  =[2014-12-30 18:55:23.553535+00:00]
datetime_updated=[2014-12-30 18:55:23.553566+00:00]
---------------------------------------------- id=[255] --
A:
- junction table
- association table

>Junction tables are known under many names, among them cross-reference table, bridge table, join table, map table, intersection table, linking table, many-to-many resolver, link table, pairing table, pivot table, transition table, crosswalk, associative entity or association table.


[https://en.wikipedia.org/wiki/Junction_table][1]
[https://en.wikipedia.org/wiki/Associative_entity][2]
[https://en.wikipedia.org/wiki/Many-to-many_(data_model)][3]


  [1]: https://en.wikipedia.org/wiki/Junction_table
  [2]: https://en.wikipedia.org/wiki/Associative_entity
  [3]: https://en.wikipedia.org/wiki/Many-to-many_%28data_model%29

=== [914] of [1277] ============================= id=[364] ==
Q:  Review: [http://qz.com/298635/these-programming-languages-will-earn-you-the-most-money/][1]


  [1]: http://qz.com/298635/these-programming-languages-will-earn-you-the-most-money/
questiontag_set : ['web pages to review']
datetime_added  =[2014-12-30 17:47:51.257934+00:00]
datetime_updated=[2014-12-30 17:47:51.257966+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [915] of [1277] ============================= id=[363] ==
Q:  Review: [http://visualgo.net/][1]


  [1]: http://visualgo.net/
questiontag_set : ['web pages to review']
datetime_added  =[2014-12-30 17:47:01.627817+00:00]
datetime_updated=[2014-12-30 17:47:01.627859+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [916] of [1277] ============================= id=[362] ==
Q:  How do you add a url link in Markdown?
questiontag_set : ['markdown']
datetime_added  =[2014-12-29 23:42:14.850323+00:00]
datetime_updated=[2014-12-29 23:42:14.850355+00:00]
---------------------------------------------- id=[254] --
A:
Put the link inside square brackets, followed by square brackets with the reference, e.g.,

\[google.com\]\[goog\]

\[goog\]: http://google.com

Examples:

[google.com][1]  
[google.com][goog]

[1]: http://google.com
[goog]: http://google.com

=== [917] of [1277] ============================= id=[361] ==
Q:  How to open a pdf in OSX in Adobe Reader?
questiontag_set : ['osx (OSX) (Mac)']
datetime_added  =[2014-12-29 23:10:20.482911+00:00]
datetime_updated=[2014-12-29 23:10:20.482944+00:00]
---------------------------------------------- id=[253] --
A:
    open -a Adobe\ Reader myfile.pdf

=== [918] of [1277] ============================= id=[360] ==
Q:  Review requests source code for ideas: [https://github.com/kennethreitz/requests][1]


  [1]: https://github.com/kennethreitz/requests
questiontag_set : ['review source code', 'python']
datetime_added  =[2014-12-29 19:48:57.668689+00:00]
datetime_updated=[2014-12-29 19:48:57.668719+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [919] of [1277] ============================= id=[359] ==
Q:  Review the SQLAlchemy source code: [https://github.com/zzzeek/sqlalchemy][1]


  [1]: https://github.com/zzzeek/sqlalchemy
questiontag_set : ['python', 'sqlalchemy', 'review source code']
datetime_added  =[2014-12-29 19:48:09.527963+00:00]
datetime_updated=[2014-12-29 19:48:09.527994+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [920] of [1277] ============================= id=[358] ==
Q:  What are the 3 requirements for a movie to pass the Bechdel test?
questiontag_set : ['movies']
datetime_added  =[2014-12-29 19:09:21.090141+00:00]
datetime_updated=[2014-12-29 19:09:21.090172+00:00]
---------------------------------------------- id=[252] --
A:

1. It has to have at least two women in it,
1. who talk to each other,
1. about something besides a man.

[https://en.wikipedia.org/wiki/Bechdel_test][1]


  [1]: https://en.wikipedia.org/wiki/Bechdel_test

=== [921] of [1277] ============================= id=[357] ==
Q:  What is my bash function to cd to the directory of the source code for a specified python package?
questiontag_set : ['bash', 'python']
datetime_added  =[2014-12-29 17:59:48.230699+00:00]
datetime_updated=[2014-12-29 17:59:48.230731+00:00]
---------------------------------------------- id=[251] --
A:
    cd.package.dir

e.g.,

    cd.package.dir string

=== [922] of [1277] ============================= id=[356] ==
Q:  What does "pip2tgz" in thedude do and where does it come from?
questiontag_set : ['python']
datetime_added  =[2014-12-27 23:48:15.649055+00:00]
datetime_updated=[2014-12-27 23:48:15.649086+00:00]
---------------------------------------------- id=[250] --
A:
`pip2tgz` comes from `pip2pi` package.  `pip2tgz OUTPUT_DIRECTORY PACKAGE_NAMES` downloads all packages required to install `PACKAGE_NAMES` and saves them to sanely-named tarballs or wheel files in `OUTPUT_DIRECTORY`.

=== [923] of [1277] ============================= id=[355] ==
Q:  What is the purpose of the `.media` field in a ModelForm instance?
questiontag_set : ['django']
datetime_added  =[2014-12-27 22:01:02.381041+00:00]
datetime_updated=[2014-12-27 22:01:02.381081+00:00]
---------------------------------------------- id=[249] --
A:
It has references to the CSS and JavaScript code needed for the widgets.  e.g.,

    <head>
        {{ modelform_schedule.media }}
    </head>

=== [924] of [1277] ============================= id=[354] ==
Q:  Lesson learned: reproduce and debug on staging when possible rather than Higgs.  There is more verbose logging, and you can hotpatch elzar, whereas on Higgs restarting elzar is significant downtime.
questiontag_set : ['trapit', 'lessons learned', 'best practices']
datetime_added  =[2014-12-23 00:25:15.216907+00:00]
datetime_updated=[2014-12-23 00:25:15.216942+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [925] of [1277] ============================= id=[353] ==
Q:  How do you enable the mouse to scroll in tmux?
questiontag_set : ['tmux']
datetime_added  =[2014-12-22 23:53:56.808500+00:00]
datetime_updated=[2014-12-22 23:53:56.808530+00:00]
---------------------------------------------- id=[248] --
A:
`control-b` (or `control-a` if you have it remapped)  
`:`  
(you will now be in a gold-colored bar at the bottom of the screen with a ":" cursor)
    
    setw -g mode-mouse on

Note that with this enabled, if you want to select text with the mouse, you need to hold down the `option` key on the Mac before selecting with the mouse  (in other OS's, use the `shift` key).

=== [926] of [1277] ============================= id=[352] ==
Q:  While view a file in `less`, how do you switch to viewing it with vim in read-only mode?
questiontag_set : ['bash']
datetime_added  =[2014-12-22 23:23:21.968570+00:00]
datetime_updated=[2014-12-22 23:23:21.968601+00:00]
---------------------------------------------- id=[247] --
A:
`v` command (stands for "view")

=== [927] of [1277] ============================= id=[351] ==
Q:  Review: [https://en.wikipedia.org/wiki/Stockholm_syndrome][1]


  [1]: https://en.wikipedia.org/wiki/Stockholm_syndrome
questiontag_set : ['psychology']
datetime_added  =[2014-12-22 23:12:19.497621+00:00]
datetime_updated=[2014-12-22 23:12:19.497654+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [928] of [1277] ============================= id=[350] ==
Q:  Read: [http://edge.org/conversation/the-argumentative-theory][1]


  [1]: http://edge.org/conversation/the-argumentative-theory
questiontag_set : ['psychology']
datetime_added  =[2014-12-22 22:01:50.736755+00:00]
datetime_updated=[2014-12-22 22:01:50.736784+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [929] of [1277] ============================= id=[349] ==
Q:  How can you nicely format json output (e.g., from `curl`)?
questiontag_set : ['bash']
datetime_added  =[2014-12-22 21:59:59.161266+00:00]
datetime_updated=[2014-12-22 21:59:59.161296+00:00]
---------------------------------------------- id=[246] --
A:
`json_pp`

e.g.,

    curl ... | json_pp

=== [930] of [1277] ============================= id=[348] ==
Q:  Review: [http://aeon.co/magazine/][1]


  [1]: http://aeon.co/magazine/
questiontag_set : ['web pages to review']
datetime_added  =[2014-12-22 21:55:42.203646+00:00]
datetime_updated=[2014-12-22 21:55:42.203676+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [931] of [1277] ============================= id=[347] ==
Q:  Review: Edge  [http://edge.org/][1]


  [1]: http://edge.org/
questiontag_set : ['web pages to review']
datetime_added  =[2014-12-22 21:54:39.889950+00:00]
datetime_updated=[2014-12-22 21:54:39.889981+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [932] of [1277] ============================= id=[346] ==
Q:  In elzar, what is `req.link` ?
questiontag_set : ['trapit', 'trapit_elzar']
datetime_added  =[2014-12-22 20:29:42.524517+00:00]
datetime_updated=[2014-12-22 20:29:42.524556+00:00]
---------------------------------------------- id=[245] --
A:
It is a Linker object, created in wsgi.py:

            req.link = links.Linker(
                server=req.uri.server_uri(), profile=profile,
                org=req.vars['org'], scheme=req.uri.scheme)

It is used to create links based on the url that was called.

=== [933] of [1277] ============================= id=[345] ==
Q:  Where does the exception `NoResultFound` mean?
questiontag_set : ['sqlalchemy']
datetime_added  =[2014-12-22 19:15:24.690093+00:00]
datetime_updated=[2014-12-22 19:15:24.690123+00:00]
---------------------------------------------- id=[244] --
A:
`NoResultFound` comes from SQLAlchemy, and indicates that no results were found for a query that expected results (e.g., `.one()`).

=== [934] of [1277] ============================= id=[344] ==
Q:  How do you create a horizontal rule in markdown?
questiontag_set : ['markdown']
datetime_added  =[2014-12-22 18:48:05.814389+00:00]
datetime_updated=[2014-12-22 18:48:05.814421+00:00]
---------------------------------------------- id=[242] --
A:
Three or more hypens, asterisks, or underscores:

3 or more hyphens (preceded by a blank line):  
\-\-\-

---

3 or more asterisks:  
\*\*\*
***

3 or more underscores:  
\_\_\_
___

Or explicitly adding an hr element:  
&lt;hr&gt;
<hr>

=== [935] of [1277] ============================= id=[343] ==
Q:  What is an "association proxy" in SQLAlchemy?

e.g.,

    bookmarked_traps = association_proxy(
        '_bookmarks', 'trap',
        creator=lambda trap: UserBookmark(trap_id=trap.id))

[mom/models/user.py]
questiontag_set : ['sqlalchemy', 'trapit_mom', 'trapit']
datetime_added  =[2014-12-22 18:37:50.335638+00:00]
datetime_updated=[2014-12-22 18:49:32.209227+00:00]
---------------------------------------------- id=[243] --
A:
This associationproxy conceals the use of the "middle" attribute between User and UserBookmark, making it easy to add to `user.bookmarked_traps`

[http://docs.sqlalchemy.org/en/rel_0_9/orm/extensions/associationproxy.html][1]


  [1]: http://docs.sqlalchemy.org/en/rel_0_9/orm/extensions/associationproxy.html

=== [936] of [1277] ============================= id=[342] ==
Q:  How many grams of sugar in a teaspoon of sugar?
questiontag_set : ['nutrition']
datetime_added  =[2014-12-22 18:19:58.804189+00:00]
datetime_updated=[2014-12-22 18:19:58.804219+00:00]
---------------------------------------------- id=[241] --
A:
4.2g of sugar in a teaspoon of sugar  
12.6g of sugar in a tablespoon of sugar  
(compared to 17g of sugar in a tablespoon of honey)

=== [937] of [1277] ============================= id=[341] ==
Q:  How many grams of sugar in a tablespoon of honey?
questiontag_set : ['nutrition']
datetime_added  =[2014-12-22 18:17:39.705274+00:00]
datetime_updated=[2014-12-22 18:17:39.705309+00:00]
---------------------------------------------- id=[240] --
A:
17g of sugar in a tablespoon of honey

[https://www.google.com/search?q=grams+sugar+honey&oq=grams+sugar+honey&aqs=chrome..69i57j69i61j69i65l2j69i61j69i59.2745j0j7&sourceid=chrome&es_sm=119&ie=UTF-8][1]


  [1]: https://www.google.com/search?q=grams%20sugar%20honey&oq=grams%20sugar%20honey&aqs=chrome..69i57j69i61j69i65l2j69i61j69i59.2745j0j7&sourceid=chrome&es_sm=119&ie=UTF-8

=== [938] of [1277] ============================= id=[340] ==
Q:  How much sodium in a teaspoon of table salt?
questiontag_set : []
datetime_added  =[2014-12-22 18:14:34.144143+00:00]
datetime_updated=[2014-12-22 18:14:34.144173+00:00]
---------------------------------------------- id=[239] --
A:
2360mg of sodium in 1 teaspoon of table salt
(per USDA)

[http://www.nutritionix.com/search?q=salt][1]


  [1]: http://www.nutritionix.com/search?q=salt

=== [939] of [1277] ============================= id=[339] ==
Q:  How to configure ssh so that it doesn't disconnect quickly when the network connection is lost?
questiontag_set : ['bash']
datetime_added  =[2014-12-22 17:20:28.081183+00:00]
datetime_updated=[2014-12-22 17:20:28.081214+00:00]
---------------------------------------------- id=[238] --
A:
The following parameters can be set in the sshd.conf on server side, or via `ssh -o ...`, or via the client ssh config file:

     ClientAliveCountMax
	     Sets the number of client alive messages (see below) which may be
	     sent without sshd receiving any messages back from the client.
	     If this threshold is reached while client alive messages are
	     being sent, sshd will disconnect the client, terminating the ses-
	     sion.  It is important to note that the use of client alive mes-
	     sages is very different from TCPKeepAlive (below).	 The client
	     alive messages are sent through the encrypted channel and there-
	     fore will not be spoofable.  The TCP keepalive option enabled by
	     TCPKeepAlive is spoofable.	 The client alive mechanism is valu-
	     able when the client or server depend on knowing when a connec-
	     tion has become inactive.

	     The default value is 3.  If ClientAliveInterval (see below) is
	     set to 15, and ClientAliveCountMax is left at the default, unre-
	     sponsive ssh clients will be disconnected after approximately 45
	     seconds.
     ClientAliveInterval
	     Sets a timeout interval in seconds after which if no data has
	     been received from the client, sshd will send a message through
	     the encrypted channel to request a response from the client.  The
	     default is 0, indicating that these messages will not be sent to
	     the client.  This option applies to protocol version 2 only.
     TCPKeepAlive
	     Specifies whether the system should send TCP keepalive messages
	     to the other side.	 If they are sent, death of the connection or
	     crash of one of the machines will be properly noticed.  However,
	     this means that connections will die if the route is down tem-
	     porarily, and some people find it annoying.  On the other hand,
	     if TCP keepalives are not sent, sessions may hang indefinitely on
	     the server, leaving "ghost" users and consuming server resources.

	     The default is "yes" (to send TCP keepalive messages), and the
	     server will notice if the network goes down or the client host
	     crashes.  This avoids infinitely hanging sessions.

	     To disable TCP keepalive messages, the value should be set to
	     "no".

[http://serverfault.com/questions/19634/how-to-reconnect-to-a-disconnected-ssh-session][1]
[http://unixhelp.ed.ac.uk/CGI/man-cgi?sshd_config+5][2]


  [1]: http://serverfault.com/questions/19634/how-to-reconnect-to-a-disconnected-ssh-session
  [2]: http://unixhelp.ed.ac.uk/CGI/man-cgi?sshd_config%205

=== [940] of [1277] ============================= id=[338] ==
Q:  In Linux, how do you nohup a process that is already running?
questiontag_set : ['bash', 'unix']
datetime_added  =[2014-12-22 17:12:24.966365+00:00]
datetime_updated=[2014-12-22 17:12:24.966395+00:00]
---------------------------------------------- id=[237] --
A:
    disown

=== [941] of [1277] ============================= id=[337] ==
Q:  Review: [https://code.djangoproject.com/wiki/Tutorials][1]


  [1]: https://code.djangoproject.com/wiki/Tutorials
questiontag_set : ['django']
datetime_added  =[2014-12-21 18:26:29.865869+00:00]
datetime_updated=[2014-12-21 18:26:29.865911+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [942] of [1277] ============================= id=[336] ==
Q:  On 12/21/14 for the quizme project, I upgraded from Django 1.6.5 to 1.7.1, but the tests failed with the following error.  I have not figured out why, so I reverted back to 1.6.5.

    ROB_SELENIUM_BROWSER=firefox   ./manage.py test
    /Users/rbednark/Dropbox/git/quizme_website/emailusername/admin.py:36: RemovedInDjango18Warning: Creating a ModelForm without either the 'fields' attribute or the 'exclude' attribute is deprecated - form UserChangeForm needs updating
      class UserChangeForm(forms.ModelForm):
    
    Traceback (most recent call last):
      File "./manage.py", line 10, in <module>
        execute_from_command_line(sys.argv)
      File "/Users/rob/.virtualenvs/quizme/lib/python2.7/site-packages/django/core/management/__init__.py", line 385, in execute_from_command_line
        utility.execute()
      File "/Users/rob/.virtualenvs/quizme/lib/python2.7/site-packages/django/core/management/__init__.py", line 377, in execute
        self.fetch_command(subcommand).run_from_argv(self.argv)
      File "/Users/rob/.virtualenvs/quizme/lib/python2.7/site-packages/django/core/management/commands/test.py", line 50, in run_from_argv
        super(Command, self).run_from_argv(argv)
      File "/Users/rob/.virtualenvs/quizme/lib/python2.7/site-packages/django/core/management/base.py", line 288, in run_from_argv
        self.execute(*args, **options.__dict__)
      File "/Users/rob/.virtualenvs/quizme/lib/python2.7/site-packages/django/core/management/commands/test.py", line 71, in execute
        super(Command, self).execute(*args, **options)
      File "/Users/rob/.virtualenvs/quizme/lib/python2.7/site-packages/django/core/management/base.py", line 338, in execute
        output = self.handle(*args, **options)
      File "/Users/rob/.virtualenvs/quizme/lib/python2.7/site-packages/south/management/commands/test.py", line 7, in handle
        patch_for_test_db_setup()
      File "/Users/rob/.virtualenvs/quizme/lib/python2.7/site-packages/south/management/commands/__init__.py", line 34, in patch_for_test_db_setup
        management._commands['syncdb'] = MigrateAndSyncCommand()
    AttributeError: 'module' object has no attribute '_commands'
    make: *** [test_firefox] Error 1


questiontag_set : ['django']
datetime_added  =[2014-12-21 16:43:30.431876+00:00]
datetime_updated=[2014-12-21 16:43:30.431908+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [943] of [1277] ============================= id=[335] ==
Q:  When I create a new virtualenv (via `mkvirtualenv`) and then do a `pip freeze`, it shows:

    wsgiref==0.1.2
Why is this?
questiontag_set : ['python']
datetime_added  =[2014-12-21 16:30:06.511258+00:00]
datetime_updated=[2014-12-21 16:30:06.511290+00:00]
---------------------------------------------- id=[236] --
A:
`wsgiref` is included as a standard library in Python as of v2.5, so this is no longer needed as a separate package.

This is a pip bug that has been fixed.  `pip freeze` should not be displaying `wsgiref`.

I upgraded to the latest pip with `sudo pip install --upgrade pip` which went from 1.5.4 to 1.5.6 on 12/21/14, but still see the problem.  I checked the pip source code and see that this is in version "6.0.dev1 (unreleased)" as of 12/21/14.

See:

[https://github.com/pypa/pip/issues/1570][1]
[https://groups.google.com/forum/#!topic/python-virtualenv/rvcLl3_z5qs][2]


  [1]: https://github.com/pypa/pip/issues/1570
  [2]: https://groups.google.com/forum/#!topic/python-virtualenv/rvcLl3_z5qs

=== [944] of [1277] ============================= id=[334] ==
Q:  Review: [http://aosabook.org/en/index.html][1]


  [1]: http://aosabook.org/en/index.html
questiontag_set : ['open source', 'web pages to review']
datetime_added  =[2014-12-21 16:25:30.435923+00:00]
datetime_updated=[2014-12-21 16:25:30.435953+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [945] of [1277] ============================= id=[333] ==
Q:  Review: [https://github.com/aosabook/500lines][1]


  [1]: https://github.com/aosabook/500lines
questiontag_set : ['python', 'web pages to review']
datetime_added  =[2014-12-21 16:24:19.058208+00:00]
datetime_updated=[2014-12-21 16:24:19.058238+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [946] of [1277] ============================= id=[332] ==
Q:  Review: [https://github.com/jezdez?tab=repositories][1]


  [1]: https://github.com/jezdez?tab=repositories
questiontag_set : ['python', 'web pages to review']
datetime_added  =[2014-12-21 16:21:14.070994+00:00]
datetime_updated=[2014-12-21 16:21:14.071029+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [947] of [1277] ============================= id=[331] ==
Q:  How did I resolve the issue with the QuizMe Selenium Firefox browser tests failing?  (Firefox seemed to hang)
questiontag_set : ['selenium']
datetime_added  =[2014-12-21 15:46:43.563303+00:00]
datetime_updated=[2014-12-21 15:46:43.563348+00:00]
---------------------------------------------- id=[235] --
A:
stdout/stderr showed this error:

    WebDriverException: Message: 'Can\'t load the profile. Profile Dir: ...

RESOLUTION: upgrade selenium from 2.42.1 to 2.44.0

    `pip install --upgrade selenium`

=== [948] of [1277] ============================= id=[330] ==
Q:  Review: [https://www.paypal-engineering.com/2014/12/10/10-myths-of-enterprise-python/][1]


  [1]: https://www.paypal-engineering.com/2014/12/10/10-myths-of-enterprise-python/
questiontag_set : ['python', 'web pages to review']
datetime_added  =[2014-12-21 14:21:28.326646+00:00]
datetime_updated=[2014-12-21 14:21:28.326679+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [949] of [1277] ============================= id=[329] ==
Q:  Review: [http://www.theeffectiveengineer.com/][1]


  [1]: http://www.theeffectiveengineer.com/
questiontag_set : ['software engineering', 'web pages to review']
datetime_added  =[2014-12-21 14:20:10.544813+00:00]
datetime_updated=[2014-12-21 14:20:10.544845+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [950] of [1277] ============================= id=[328] ==
Q:  Review: [https://realpython.com/blog/][1]


  [1]: https://realpython.com/blog/
questiontag_set : ['python']
datetime_added  =[2014-12-20 20:14:39.657819+00:00]
datetime_updated=[2014-12-20 20:14:39.657851+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [951] of [1277] ============================= id=[327] ==
Q:  Review: [https://realpython.com/blog/python/fingerprinting-images-for-near-duplicate-detection/][1]


  [1]: https://realpython.com/blog/python/fingerprinting-images-for-near-duplicate-detection/
questiontag_set : ['python']
datetime_added  =[2014-12-20 20:14:01.349046+00:00]
datetime_updated=[2014-12-20 20:14:01.349090+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [952] of [1277] ============================= id=[326] ==
Q:  How to resolve issue where file matched by .gitignore pattern is not being ignored?
questiontag_set : ['git']
datetime_added  =[2014-12-20 01:33:30.303501+00:00]
datetime_updated=[2014-12-20 01:33:30.303535+00:00]
---------------------------------------------- id=[234] --
A:
    git update-index --assume-unchanged my_file

[http://stackoverflow.com/questions/2900816/gitignore-not-working-for-me][1]


  [1]: http://stackoverflow.com/questions/2900816/gitignore-not-working-for-me

=== [953] of [1277] ============================= id=[325] ==
Q:  Review: [https://www.airpair.com/python/posts/top-mistakes-python-big-data-analytics?utm_source=Python%20Weekly%20Newsletter&utm_campaign=0e11c2a84d-Python_Weekly_Issue_170_December_18_2014&utm_medium=email&utm_term=0_9e26887fc5-0e11c2a84d-312682901][1]


  [1]: https://www.airpair.com/python/posts/top-mistakes-python-big-data-analytics?utm_source=Python%20Weekly%20Newsletter&utm_campaign=0e11c2a84d-Python_Weekly_Issue_170_December_18_2014&utm_medium=email&utm_term=0_9e26887fc5-0e11c2a84d-312682901
questiontag_set : ['python', 'web pages to review']
datetime_added  =[2014-12-19 15:23:37.951050+00:00]
datetime_updated=[2014-12-19 15:23:37.951094+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [954] of [1277] ============================= id=[324] ==
Q:  How to show row numbers in Postgres for the rows returned from a SELECT query?
questiontag_set : ['postgresql']
datetime_added  =[2014-12-19 00:39:02.863325+00:00]
datetime_updated=[2014-12-19 00:39:02.863358+00:00]
---------------------------------------------- id=[233] --
A:
    row_number() OVER () as row
e.g.,

    SELECT row_number() OVER () AS row, id FROM logs LIMIT 5;

=== [955] of [1277] ============================= id=[323] ==
Q:  Review: [http://www.quora.com/What-are-the-advantages-of-Ruby-over-Python][1]


  [1]: http://www.quora.com/What-are-the-advantages-of-Ruby-over-Python
questiontag_set : ['python']
datetime_added  =[2014-12-19 00:14:42.642855+00:00]
datetime_updated=[2014-12-19 00:14:42.642887+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [956] of [1277] ============================= id=[322] ==
Q:  Review: [https://github.com/DevTeam-TheOpenBastion/int-py-notes][1]


  [1]: https://github.com/DevTeam-TheOpenBastion/int-py-notes
questiontag_set : ['web pages to review', 'python']
datetime_added  =[2014-12-18 23:39:53.584247+00:00]
datetime_updated=[2014-12-18 23:39:53.584282+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [957] of [1277] ============================= id=[321] ==
Q:  In Postgresql, how do you get the time 2 hours before right now, and 2 days before right now?
questiontag_set : ['postgresql']
datetime_added  =[2014-12-18 22:44:14.961295+00:00]
datetime_updated=[2014-12-18 22:44:14.961360+00:00]
---------------------------------------------- id=[232] --
A:
    select now() - interval '2 hours';
    select now() - interval '2 days';

=== [958] of [1277] ============================= id=[320] ==
Q:  In SQL in Postgres, how do you get the current time/date?
questiontag_set : ['postgresql']
datetime_added  =[2014-12-18 22:43:16.495404+00:00]
datetime_updated=[2015-07-31 14:26:42.071876+00:00]
---------------------------------------------- id=[231] --
A:
    select now();

=== [959] of [1277] ============================= id=[319] ==
Q:  Review: [http://www.blog.pythonlibrary.org/][1]


  [1]: http://www.blog.pythonlibrary.org/
questiontag_set : ['python', 'web pages to review']
datetime_added  =[2014-12-18 20:50:13.667179+00:00]
datetime_updated=[2014-12-18 20:50:13.667210+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [960] of [1277] ============================= id=[318] ==
Q:  Review: [http://holdenweb.blogspot.com/][1]


  [1]: http://holdenweb.blogspot.com/
questiontag_set : ['python', 'web pages to review']
datetime_added  =[2014-12-18 20:36:05.408175+00:00]
datetime_updated=[2014-12-18 20:36:05.408205+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [961] of [1277] ============================= id=[317] ==
Q:  If you get the following error:  

`Permission denied (publickey).`

because the ssh agent isn't being forwarded with the "ssh -A" from the Mac, what do you do to resolve it?
questiontag_set : ['unix']
datetime_added  =[2014-12-18 19:02:12.185078+00:00]
datetime_updated=[2015-04-03 14:28:03.598012+00:00]
---------------------------------------------- id=[230] --
A:
1. kill of any existing ssh-agent's 
1. ssh-agent
1. ssh-add

Example:

    % pgrep -fl ssh-agent
    57941 ssh-agent
    57976 /usr/bin/ssh-agent -l

    % pkill ssh-agent

    % ssh-agent
    SSH_AUTH_SOCK=/var/folders/0g/nhmq0kbd1rz3l8xk3rlpvm900000gr/T//ssh-jYAL2uqTwlLi/agent.57502; export SSH_AUTH_SOCK;
    SSH_AGENT_PID=57503; export SSH_AGENT_PID;
    echo Agent pid 57503;
    
    % ssh-add
    Identity added: /Users/rob/.ssh/id_rsa (/Users/rob/.ssh/id_rsa)

=== [962] of [1277] ============================= id=[316] ==
Q:  When doing a recursive grep, how do you tell it to ignore specified directories?
questiontag_set : ['unix']
datetime_added  =[2014-12-18 18:18:06.418728+00:00]
datetime_updated=[2014-12-18 18:18:06.418761+00:00]
---------------------------------------------- id=[229] --
A:
    grep -r --exclude-dir=some_dir my_regex

=== [963] of [1277] ============================= id=[315] ==
Q:  Review: [http://www.quora.com/What-is-REST-in-laymans-terms][1]


  [1]: http://www.quora.com/What-is-REST-in-laymans-terms
questiontag_set : ['web pages to review', 'web development']
datetime_added  =[2014-12-18 17:26:28.200380+00:00]
datetime_updated=[2014-12-18 17:26:28.200412+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [964] of [1277] ============================= id=[314] ==
Q:  In git, how do you check to see what "origin" corresponds to?
questiontag_set : ['git']
datetime_added  =[2014-12-16 00:54:31.549898+00:00]
datetime_updated=[2014-12-16 00:54:31.549931+00:00]
---------------------------------------------- id=[228] --
A:
    git remote -v

=== [965] of [1277] ============================= id=[313] ==
Q:  How do you convert a character string to a uuid data type in Postgresql?
questiontag_set : ['sql', 'postgresql']
datetime_added  =[2014-12-15 22:47:12.772182+00:00]
datetime_updated=[2014-12-15 22:47:12.772213+00:00]
---------------------------------------------- id=[227] --
A:
    zoidberg@10:5432/trapit> select uuid('b4faa62796fc4f868103523a03996824');
                     uuid
    --------------------------------------
     b4faa627-96fc-4f86-8103-523a03996824
    (1 row)
    
    zoidberg@10:5432/trapit> select cast('b4faa62796fc4f868103523a03996824' as uuid);
                     uuid
    --------------------------------------
     b4faa627-96fc-4f86-8103-523a03996824
    (1 row)


[http://www.postgresql.org/docs/9.3/static/sql-expressions.html][1]


  [1]: http://www.postgresql.org/docs/9.3/static/sql-expressions.html

=== [966] of [1277] ============================= id=[312] ==
Q:  What can be done to help out in diagnosing ssh issues?
questiontag_set : ['unix']
datetime_added  =[2014-12-15 19:03:36.299755+00:00]
datetime_updated=[2014-12-15 19:03:36.299787+00:00]
---------------------------------------------- id=[226] --
A:
Use the `-vvv` option for max verbosity, e.g.,

    ssh -vvv logdb-1

=== [967] of [1277] ============================= id=[311] ==
Q:  Review: https://www.quora.com/What-are-the-best-open-source-projects-from-which-to-study-Python-code
questiontag_set : ['python', 'web pages to review']
datetime_added  =[2014-12-15 15:06:26.277705+00:00]
datetime_updated=[2014-12-15 15:06:26.277737+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [968] of [1277] ============================= id=[310] ==
Q:  Review: [https://www.quora.com/What-is-a-REST-API][1]


  [1]: https://www.quora.com/What-is-a-REST-API
questiontag_set : ['web development']
datetime_added  =[2014-12-15 15:00:28.407251+00:00]
datetime_updated=[2014-12-15 15:00:28.407283+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [969] of [1277] ============================= id=[309] ==
Q:  Review: [https://www.quora.com/What-are-the-5-tips-of-a-productive-developer][1]


  [1]: https://www.quora.com/What-are-the-5-tips-of-a-productive-developer
questiontag_set : ['productivity']
datetime_added  =[2014-12-15 14:58:53.871022+00:00]
datetime_updated=[2014-12-15 14:58:53.871059+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [970] of [1277] ============================= id=[308] ==
Q:  Does git store text files compressed or uncompressed?  Does it store each version in it's entirety?
questiontag_set : ['git']
datetime_added  =[2014-12-05 22:29:01.936881+00:00]
datetime_updated=[2014-12-05 22:29:01.936912+00:00]
---------------------------------------------- id=[225] --
A:
It stores them compressed.  Additionally, it only stores deltas.

>git uses the following techniques to make repository smaller:

>1. each version of contents of a file is stored only once; this means that if you have only two different versions of some file in e.g. 10 revisions (10 commits), git stores only those two versions, not 10.
>1. objects (and deltas, see below) are stored compressed; text files used in programming compresses really well (around 60% of original size, or 40% reduction in size from compression)
>1. after repacking, objects are stored in deltified form, as a difference from some other version; additionally git tries to order delta chains in such way that delta consist mainly of deletions (in usual case of growing files it is in recency order); also IIRC deltas are compressed as well.

[http://stackoverflow.com/questions/2869213/how-does-git-save-space-and-is-fast-at-the-same-time][1]


  [1]: http://stackoverflow.com/questions/2869213/how-does-git-save-space-and-is-fast-at-the-same-time

=== [971] of [1277] ============================= id=[307] ==
Q:  In vim, how do you bring up the list of last things searched for (e.g., via the `/` command).
questiontag_set : ['vim']
datetime_added  =[2014-12-05 19:24:36.300329+00:00]
datetime_updated=[2014-12-05 19:24:36.300360+00:00]
---------------------------------------------- id=[224] --
A:
    q/


=== [972] of [1277] ============================= id=[306] ==
Q:  How do you show the history of files opened in vim with the command-t plugin?
questiontag_set : ['vim']
datetime_added  =[2014-12-05 17:07:22.565194+00:00]
datetime_updated=[2014-12-05 17:07:22.565226+00:00]
---------------------------------------------- id=[223] --
A:
    :CommandTJump

=== [973] of [1277] ============================= id=[305] ==
Q:  Review: [http://paulgraham.com/articles.html][1]


  [1]: http://paulgraham.com/articles.html
questiontag_set : ['websites']
datetime_added  =[2014-12-05 06:58:33.881271+00:00]
datetime_updated=[2014-12-05 06:58:33.881304+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [974] of [1277] ============================= id=[304] ==
Q:  What should be used for the `collections.namedtuple(typename)` argument?
questiontag_set : ['python']
datetime_added  =[2014-12-05 01:24:18.722774+00:00]
datetime_updated=[2014-12-05 01:24:18.722806+00:00]
---------------------------------------------- id=[222] --
A:
>Just for sanity's sake, the first argument to namedtuple should be the same as the variable name you assign it to.

>pickle is one module that cares about finding the classname that matches the typename

[http://stackoverflow.com/questions/10482512/use-of-class-typenames-in-python][2]


Regarding whether it's ok to give multiple namedtuple's the same `typename`:
>There are no pitfalls, the classes are not registered centrally.
>
>All you see is the classes using self.__name__ to generate a representation string. The classes themselves only live on as .__class__ references on the instances as the local name is cleared up when the make_thing() function finishes.
[http://stackoverflow.com/questions/17921869/harmful-side-effects-for-different-namedtuples-with-same-typename][1]


Regarding pickling:
>In the section titled What can be pickled and unpickled? of the documentation it indicates that only classes that are defined at the top level of a module can be pickled.namedtuple()is a factory function which in your second example effectively definesclass my_typename(tuple), however it's not assigning the type to a variable namedmy_typenameat the top level of the module.

>This is because pickle saves the “fully qualified” name of such things, not their code and they must be importable using that name in order to be unpickled later (hence the requirement that the module must contain the named object at the top level).
[http://stackoverflow.com/questions/20143726/understanding-an-issue-with-the-namedtuple-typename-and-pickle-in-python][3]


  [1]: http://stackoverflow.com/questions/17921869/harmful-side-effects-for-different-namedtuples-with-same-typename
  [2]: http://stackoverflow.com/questions/10482512/use-of-class-typenames-in-python
  [3]: http://stackoverflow.com/questions/20143726/understanding-an-issue-with-the-namedtuple-typename-and-pickle-in-python

=== [975] of [1277] ============================= id=[303] ==
Q:  What is `__name__`?
questiontag_set : ['python']
datetime_added  =[2014-12-05 01:11:07.201859+00:00]
datetime_updated=[2014-12-05 01:11:07.201899+00:00]
---------------------------------------------- id=[221] --
A:
It gets set to the current name of the current module.

>Within a module, the module’s name (as a string) is available as the value of the global variable __ name__.  
>  \[[https://docs.python.org/2/tutorial/modules.html][1]\]

> \__name__ is to be set to the name of the module.   
\[\[https://docs.python.org/2/reference/simple_stmts.html][2]\]

>Predefined (writable) attributes: \__name__ is the module’s name;
[https://docs.python.org/2/reference/datamodel.html][3]


  [1]: https://docs.python.org/2/tutorial/modules.html
  [2]: https://docs.python.org/2/reference/simple_stmts.html
  [3]: https://docs.python.org/2/reference/datamodel.html

=== [976] of [1277] ============================= id=[302] ==
Q:  What does `zip()` return?
questiontag_set : ['python']
datetime_added  =[2014-12-04 21:47:37.874498+00:00]
datetime_updated=[2014-12-04 21:47:37.874528+00:00]
---------------------------------------------- id=[220] --
A:
A list of tuples.

[https://docs.python.org/2/library/functions.html#zip][1]


  [1]: https://docs.python.org/2/library/functions.html#zip

=== [977] of [1277] ============================= id=[301] ==
Q:  Review: [http://stackoverflow.com/users/100297/martijn-pieters][1]


  [1]: http://stackoverflow.com/users/100297/martijn-pieters
questiontag_set : ['websites']
datetime_added  =[2014-12-04 19:19:54.887400+00:00]
datetime_updated=[2014-12-04 19:19:54.887430+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [978] of [1277] ============================= id=[300] ==
Q:  Review: [http://blog.roseman.org.uk/][1]


  [1]: http://blog.roseman.org.uk/
questiontag_set : ['python', 'websites']
datetime_added  =[2014-12-04 19:15:41.368605+00:00]
datetime_updated=[2014-12-04 19:15:41.368636+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [979] of [1277] ============================= id=[299] ==
Q:  Why use a `@staticmethod`?
questiontag_set : ['python']
datetime_added  =[2014-12-04 19:10:28.477624+00:00]
datetime_updated=[2014-12-04 19:10:28.477655+00:00]
---------------------------------------------- id=[219] --
A:
It eases the readability of the code: seeing @staticmethod, we know that the method does not depend on the state of object itself.

It allows us to override the mix_ingredients method in a subclass. If we used a function mix_ingredients defined at the top-level of our module, a class inheriting from Pizza wouldn't be able to change the way we mix ingredients for our pizza without overriding cook itself.  \[[reference][1]\]

@staticmethod means: when this method is called, we don't pass an instance of the class to it (as we normally do with methods). This means you can put a function inside a class but you can't access the instance of that class (this is useful when your method does not use the instance). 

It’s definition is immutable via inheritance.  \[[reference][2]\]


  [1]: https://julien.danjou.info/blog/2013/guide-python-static-class-abstract-methods
  [2]: http://stackoverflow.com/questions/12179271/python-classmethod-and-staticmethod-for-beginner/

=== [980] of [1277] ============================= id=[298] ==
Q:  Review: [https://hackhands.com/][1]


  [1]: https://hackhands.com/
questiontag_set : ['websites', 'mentoring']
datetime_added  =[2014-12-04 19:03:34.757750+00:00]
datetime_updated=[2014-12-04 19:03:34.757780+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [981] of [1277] ============================= id=[297] ==
Q:  Review: [https://www.codementor.io][1]


  [1]: https://www.codementor.io
questiontag_set : ['websites', 'mentoring']
datetime_added  =[2014-12-04 19:01:30.491791+00:00]
datetime_updated=[2014-12-04 19:01:30.491821+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [982] of [1277] ============================= id=[296] ==
Q:  Review: [https://www.airpair.com/][1]


  [1]: https://www.airpair.com/
questiontag_set : ['websites']
datetime_added  =[2014-12-04 19:00:31.581775+00:00]
datetime_updated=[2014-12-04 19:00:31.581805+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [983] of [1277] ============================= id=[295] ==
Q:  What does "disingenuous" mean?
questiontag_set : ['vocabulary']
datetime_added  =[2014-12-03 01:32:37.772191+00:00]
datetime_updated=[2014-12-03 01:32:37.772245+00:00]
---------------------------------------------- id=[218] --
A:
> not candid or sincere, typically by pretending that one knows less
> about something than one really does.   
> synonyms:	insincere,
> dishonest, untruthful, false, deceitful, duplicitous, lying,
> mendacious; hypocritical   
> "that innocent, teary-eyed look is just
> part of a disingenuous act"

[https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=disengenous][1]


  [1]: https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=disengenous

=== [984] of [1277] ============================= id=[294] ==
Q:  [http://www.postgresql.org/docs/9.4/static/indexes-types.html][2]


  [2]: http://www.postgresql.org/docs/9.4/static/indexes-types.html
questiontag_set : ['postgresql']
datetime_added  =[2014-12-02 19:44:35.862223+00:00]
datetime_updated=[2015-02-17 20:20:07.304090+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [985] of [1277] ============================= id=[293] ==
Q:  What does the `CONCURRENTLY` option do in:

    CREATE INDEX CONCURRENTLY ix_app_configurations_org_id ON app_configurations USING (org_id);
questiontag_set : ['postgresql']
datetime_added  =[2014-12-02 19:18:40.778169+00:00]
datetime_updated=[2014-12-02 19:18:40.778202+00:00]
---------------------------------------------- id=[217] --
A:
> CONCURRENTLY 
> When this option is used, PostgreSQL will build the index
> without taking any locks that prevent concurrent inserts, updates, or
> deletes on the table; whereas a standard index build locks out writes
> (but not reads) on the table until it's done. There are several
> caveats to be aware of when using this option — see Building Indexes
> Concurrently.

[http://www.postgresql.org/docs/9.1/static/sql-createindex.html][1]


> Building Indexes Concurrently
> 
> Creating an index can interfere with regular operation of a database.
> Normally PostgreSQL locks the table to be indexed against writes and
> performs the entire index build with a single scan of the table. Other
> transactions can still read the table, but if they try to insert,
> update, or delete rows in the table they will block until the index
> build is finished. This could have a severe effect if the system is a
> live production database. Very large tables can take many hours to be
> indexed, and even for smaller tables, an index build can lock out
> writers for periods that are unacceptably long for a production
> system.
> 
> PostgreSQL supports building indexes without locking out writes. This
> method is invoked by specifying the CONCURRENTLY option of CREATE
> INDEX. When this option is used, PostgreSQL must perform two scans of
> the table, and in addition it must wait for all existing transactions
> that could potentially use the index to terminate. Thus this method
> requires more total work than a standard index build and takes
> significantly longer to complete. However, since it allows normal
> operations to continue while the index is built, this method is useful
> for adding new indexes in a production environment. Of course, the
> extra CPU and I/O load imposed by the index creation might slow other
> operations.
> 
> In a concurrent index build, the index is actually entered into the
> system catalogs in one transaction, then two table scans occur in two
> more transactions. Any transaction active when the second table scan
> starts can block concurrent index creation until it completes, even
> transactions that only reference the table after the second table scan
> starts. Concurrent index creation serially waits for each old
> transaction to complete using the method outlined in section Section
> 45.56.
> 
> If a problem arises while scanning the table, such as a uniqueness
> violation in a unique index, the CREATE INDEX command will fail but
> leave behind an "invalid" index. This index will be ignored for
> querying purposes because it might be incomplete; however it will
> still consume update overhead. The psql \d command will report such an
> index as INVALID:
> 
> postgres=# \d tab
>        Table "public.tab"  Column |  Type   | Modifiers 
> --------+---------+-----------  col    | integer |  Indexes:
>     "idx" btree (col) INVALID The recommended recovery method in such cases is to drop the index and try again to perform CREATE INDEX
> CONCURRENTLY. (Another possibility is to rebuild the index with
> REINDEX. However, since REINDEX does not support concurrent builds,
> this option is unlikely to seem attractive.)
> 
> Another caveat when building a unique index concurrently is that the
> uniqueness constraint is already being enforced against other
> transactions when the second table scan begins. This means that
> constraint violations could be reported in other queries prior to the
> index becoming available for use, or even in cases where the index
> build eventually fails. Also, if a failure does occur in the second
> scan, the "invalid" index continues to enforce its uniqueness
> constraint afterwards.
> 
> Concurrent builds of expression indexes and partial indexes are
> supported. Errors occurring in the evaluation of these expressions
> could cause behavior similar to that described above for unique
> constraint violations.
> 
> Regular index builds permit other regular index builds on the same
> table to occur in parallel, but only one concurrent index build can
> occur on a table at a time. In both cases, no other types of schema
> modification on the table are allowed meanwhile. Another difference is
> that a regular CREATE INDEX command can be performed within a
> transaction block, but CREATE INDEX CONCURRENTLY cannot.

[http://www.postgresql.org/docs/9.1/static/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY][2]


  [1]: http://www.postgresql.org/docs/9.1/static/sql-createindex.html
  [2]: http://www.postgresql.org/docs/9.1/static/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY

=== [986] of [1277] ============================= id=[292] ==
Q:  What does `ON DELETE CASCADE` do in SQL?  e.g.,

    CREATE TABLE order_items (
        product_no integer REFERENCES products ON DELETE RESTRICT,
        order_id integer REFERENCES orders ON DELETE CASCADE,
        quantity integer,
        PRIMARY KEY (product_no, order_id)
    );
questiontag_set : ['sql', 'postgresql']
datetime_added  =[2014-12-02 18:20:52.268585+00:00]
datetime_updated=[2014-12-02 18:20:52.268616+00:00]
---------------------------------------------- id=[216] --
A:
> CASCADE specifies that when a referenced row is deleted, row(s)
> referencing it should be automatically deleted as well.  
> [http://www.postgresql.org/docs/9.2/static/ddl-constraints.html][1]
> 
> 
> CASCADE   
> Delete any rows referencing the deleted row, or update the
> value of the referencing column to the new value of the referenced
> column, respectively.  
[http://www.postgresql.org/docs/9.2/static/sql-createtable.html#SQL-CREATETABLE-EXCLUDE][2]


  

[1]: http://www.postgresql.org/docs/9.2/static/ddl-constraints.html
  [2]: http://www.postgresql.org/docs/9.2/static/sql-createtable.html#SQL-CREATETABLE-EXCLUDE

=== [987] of [1277] ============================= id=[291] ==
Q:  In Elzar, how do you give additional permissions to a user?
questiontag_set : ['trapit', 'trapit_elzar']
datetime_added  =[2014-12-01 18:08:55.257781+00:00]
datetime_updated=[2014-12-01 18:08:55.257812+00:00]
---------------------------------------------- id=[215] --
A:
A user gets permissions via roles that they belong to.

For the Elzar tests, the "blank1" user has a "Blank" role.  So to add a permission to the "Blank" role:

        api_admin = self.get_api(org.testusers['admin1'], profile='v4')
        role_blank = api_admin.get_group_by_name(name='Blank', type='role')
        role_blank['permissions'] = ['tenant-config-update']
        api_admin.put_back(role_blank)

=== [988] of [1277] ============================= id=[290] ==
Q:  How do you get Python3 print() functionality in Python2?
questiontag_set : ['python']
datetime_added  =[2014-11-27 19:43:21.079964+00:00]
datetime_updated=[2014-11-27 19:43:21.079996+00:00]
---------------------------------------------- id=[214] --
A:
    from __future__ import print_function
    
    print(2, end=" ")
    print(3)

=== [989] of [1277] ============================= id=[289] ==
Q:  In Python, how do you easily the count the number of each type in an iterable?
questiontag_set : ['python']
datetime_added  =[2014-11-27 19:37:59.114298+00:00]
datetime_updated=[2014-11-27 19:37:59.114328+00:00]
---------------------------------------------- id=[213] --
A:
    from collections import Counter
    
    counter = collections.Counter(['a', 'b', 'b', 'c', 'c', 'c', 'c'])
    assert counter == {'c': 4, 'b': 2, 'a': 1}

=== [990] of [1277] ============================= id=[288] ==
Q:  Review: [http://nbviewer.ipython.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb][1]


  [1]: http://nbviewer.ipython.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb?utm_source=Python%20Weekly%20Newsletter&utm_campaign=2bbc6ad4bc-Python_Weekly_Issue_167_November_27_2014&utm_medium=email&utm_term=0_9e26887fc5-2bbc6ad4bc-312682901
questiontag_set : ['python']
datetime_added  =[2014-11-27 19:29:21.653678+00:00]
datetime_updated=[2014-11-27 19:29:21.653733+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [991] of [1277] ============================= id=[287] ==
Q:  How do you simply call a shell command in Python?
questiontag_set : ['python']
datetime_added  =[2014-11-27 19:06:42.084270+00:00]
datetime_updated=[2014-11-27 19:06:42.084305+00:00]
---------------------------------------------- id=[212] --
A:
    import subprocess
    return_code = subprocess.call("echo foo; asdfasdf 2>&1 | grep nothing", shell=True)
    # Note the shell=true

Call with "python -u" (unbuffered) to get the stdout/stderr to interleave with the rest of the program.

=== [992] of [1277] ============================= id=[286] ==
Q:  How do you run a python script from the beginning with the debugger without using `set_trace()`?
questiontag_set : ['python']
datetime_added  =[2014-11-27 18:30:24.111735+00:00]
datetime_updated=[2014-11-27 18:30:24.111766+00:00]
---------------------------------------------- id=[211] --
A:
    python -m pdb my_script.py


=== [993] of [1277] ============================= id=[285] ==
Q:  Review:  "7 tips to Time Python scripts and control Memory & CPU usage"  (very good!) [http://www.marinamele.com/7-tips-to-time-python-scripts-and-control-memory-and-cpu-usage?utm_source=Python+Weekly+Newsletter&utm_campaign=2bbc6ad4bc-Python_Weekly_Issue_167_November_27_2014&utm_medium=email&utm_term=0_9e26887fc5-2bbc6ad4bc-312682901][1]

1. use a `decorator` to time your functions
2. `timeit` module
3. unix "time" command
4. `cProfile` module
5. `line_profiler` package (pip install line_profiler)
6. `memory_profiler` package (pip install memory_profiler)
7. `guppy` package (pip install guppy)

  [1]: http://www.marinamele.com/7-tips-to-time-python-scripts-and-control-memory-and-cpu-usage?utm_source=Python%20Weekly%20Newsletter&utm_campaign=2bbc6ad4bc-Python_Weekly_Issue_167_November_27_2014&utm_medium=email&utm_term=0_9e26887fc5-2bbc6ad4bc-312682901
questiontag_set : ['python']
datetime_added  =[2014-11-27 18:24:51.727477+00:00]
datetime_updated=[2015-09-08 04:52:35.900850+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [994] of [1277] ============================= id=[284] ==
Q:  Review: [http://greatergood.berkeley.edu/article/item/six_habits_of_highly_empathic_people1][1]


  [1]: http://greatergood.berkeley.edu/article/item/six_habits_of_highly_empathic_people1
questiontag_set : ['non-violent communication']
datetime_added  =[2014-11-27 18:12:02.072719+00:00]
datetime_updated=[2014-11-27 18:12:02.072752+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [995] of [1277] ============================= id=[283] ==
Q:  Review: http://www.nwcompass.org/compassionate_communication.html
questiontag_set : ['non-violent communication']
datetime_added  =[2014-11-27 18:00:18.443536+00:00]
datetime_updated=[2014-11-27 18:00:18.443567+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [996] of [1277] ============================= id=[282] ==
Q:  How to kill all processes that have "foo" in them?
questiontag_set : ['unix']
datetime_added  =[2014-11-26 22:45:22.514918+00:00]
datetime_updated=[2014-11-26 22:45:22.514949+00:00]
---------------------------------------------- id=[210] --
A:
    $ pskill -9 -f foo

=== [997] of [1277] ============================= id=[281] ==
Q:  How do you grep through the entire commandline for each process for a specific pattern, and return the PID's?
questiontag_set : ['unix']
datetime_added  =[2014-11-26 22:38:39.762235+00:00]
datetime_updated=[2014-11-26 22:38:39.762267+00:00]
---------------------------------------------- id=[209] --
A:
    $ pgrep -f foo

    $ ps -f -p$(pgrep -f foo)

(note that the `-p` option takes a pidlist of selects the processes with those pids)

=== [998] of [1277] ============================= id=[280] ==
Q:  How do you randomize the lines of a file in Linux?
questiontag_set : ['unix']
datetime_added  =[2014-11-26 16:26:11.138213+00:00]
datetime_updated=[2014-11-26 16:26:11.138245+00:00]
---------------------------------------------- id=[208] --
A:
Use the `shuf` command, e.g.,

    Generate 10 numbers and shuffle them:
    seq 1 10 | shuf


    Generate 10 numbers and randomly select 2 of them:
    seq 1 10 | shuf -n 2

=== [999] of [1277] ============================= id=[279] ==
Q:  How to tell if there's a puppet syntax error?
questiontag_set : ['trapit', 'puppet']
datetime_added  =[2014-11-26 14:54:31.976730+00:00]
datetime_updated=[2014-11-26 14:54:31.976762+00:00]
---------------------------------------------- id=[207] --
A:
In most cases screwing up puppet will just mean that it fails to run, which you want to correct so that we can keep rolling.

1. Go onto a server that will  be impacted by your change and do:  
`sudo puppet agent --test`  
either:  
A. your changed didn't make it to the puppet server yet and nothing will be run.  
-or-  
B. you will see it run your changes (it kinda describes what it is doing and there are colors).  If this results in some error message, respond to those.  
-or-  
C. the agent is already running via crontab and it tells you that

If puppet already ran and there was an error, running “sudo puppet agent —test” will still show the error.

And btw, --test does not mean "just test" it means "show output"



=== [1000] of [1277] ============================= id=[278] ==
Q:  Review these productivity tips:

Lifestyle

1) Remove distractions form your environment
Plenty of time in work is spend on facebook, twitter, hallway discussion, etc Get rid of this and focus on work only. Avoid meetings as well. When work make breaks, but use them to standup a move around a bit. That will keep you more focused and therefore better performing.

2) Work less
Once you focus better, you don't need to work that much. In many companies you can actually work for less then 8 hours if you perform well. It is best to work 3-4 hours in row (in high focus state), in practice 5-7 hours day of work is a huge improvement over 8+ hour day of work. Once you have more time, take better care of yourself (see next point).

3) Stay fit
Stay in good shape, sleep enough, exercise, meet with friends. Programming is a cognitive skill and your body and mind state will affect your performance.

Software design

4) Don't under or overdesign
Don't spend too much time on simplifying or complicating design (playing with a code; play a little bit with it, but not too much). Web is not a rocket science and at all times just keep it simple (take a look at next point).

5) Keep the code simple
Less code is less opportunity for making a bug.
Don't code frameworks, don't extract level of abstractions when you need to get simple work done. 

6) Stay on technological edge 
Use new technologies. New libs, coding environments, frameworks, deployment tools etc. They will save your time and effort. Note: It doesn't mean use unstable versions.

Self-organisation

7) Make stable moves and remove blockers 
Check if you're on the right track every couple minutes. You can use TDD, you can print how the function works, or you can just check if the screen you're coding looks like the one on design. Just make sure you have a short feedback loop for yourself. If you have a problem, take a break, discuss it with a friend, take another approach. Don't dig into it for to long.

8) Fix the bugs immediately when they are reported
That is the simplest way to make sure, you stay on good quality code.
If you have to many bugs to fix or they take too much time - stop coding and figure out why they are showing up. You might need to take significant effort over time to remove technical debt, but do it if you need.

**Pump yourself up about what you're working on.**  It can't be fake.  You really have to somehow make yourself genuinely excited about what you're working on.  Productivity will follow automatically.  Nothing else even moves the needle compared to this, as far as I'm concerned.

Whether it's envisioning the traffic spike a new feature is bound to bring, putting myself in the user's shoes and seeing how much better the experience will be, or thinking about how much better the code will be once a big refactor is completed, I find something to be excited about.  Sometimes in the middle of coding I literally burst out out loud with, "this is going to be FREAKING SWEET once we launch it!"  Ask my co-workers, I do this. :)

An added benefit (if you're working on a team) is that other people can sense your excitement, and in my experience, it's contagious.


4) Don't waste time getting stuck. If you know you need to accomplish something but aren't sure how, just make a comment and move on. The back of your brain will keep solving the puzzle and you'll magically have a better view on it later. Alternatively if you've got 99% of your work done but just need help on some regular expression it's going to be a lot easier asking a co-worker or community member for that when it's really the last piece of the puzzle. 

5) Turn off everything else. There was a study showing that even a quick check of your email box means it takes 15 mins to get back into the flow of working. Same idea with Twitter, IRC, IM, and I'm sorry, but this fancy QA stuff too. Sure it's great to do research and learn new things, it's great to be communicative with your clients, but developers are like artists. At some point you've got to shut up, focus, and do the work. Typically this means headphones and often to music without words.. (classical, house, etc.. you don't need to be singing along.)

6) Stop reinventing the wheel. jQuery is awesome, we don't need your custom javascript tom-foolery, thanks. The natural tendency of any developer is to want to build it them selves. It's just a side product of the problem solving nature that makes a good dev a good dev. Don't get suckered into that "not built here, not built right" mentality. Yeeess, there are times where you are better off building something from scratch than learning how someone else's solution works. There are times when your business goals require it be a new or from scratch solution. But 9 times out of 10 I hear a developer wanting to "write my own library for ..." it's primarily for ego not productivity purposes. That's fine, we need new awesome ideas, just recognize it's not the most effective use of your time. 

7) get two monitors, or a wide one. Depending on what you're building your tools are obviously different, but when you can have many things open in one view without jumping around, life is better. 


One thing that I will suggest may appear counterproductive but sometimes you have to know when to **quit**.  There will be times when you bang your head on the keyboard for the last 2 hours trying to debug and making no progress.  I find that if I take my mind off of it and come back with a fresh mind, I see things a bit differently and the solution becomes obvious.

1 Every three hours I take a 2-minute break to review what you've accomplished in those three hours.

Accountability is a game changer 

2 Each day, you ask yourself "what  is the most important  thing I need to do for work?" Then you do it.  You don't put it off. You don't  "wait until later" and do other things  first. You do it first. 


3 Do 5-minute tasks immediately.

Short tasks pile up and become a burden. Just rip all those band-aids off.

automate, automate, automate: make most of your redundant or repetitive tasks automated, write shell scripts, create macros, write cron tasks ...


[http://www.quora.com/What-are-the-best-ways-to-increase-productivity-as-a-web-developer-programmer][1]


  [1]: http://www.quora.com/What-are-the-best-ways-to-increase-productivity-as-a-web-developer-programmer
questiontag_set : ['productivity']
datetime_added  =[2014-11-26 00:44:26.119053+00:00]
datetime_updated=[2014-11-26 00:44:26.119085+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1001] of [1277] ============================= id=[277] ==
Q:  Review: [http://www.quora.com/What-do-the-top-1-of-software-engineers-do-that-the-other-99-do-not][1]


  [1]: http://www.quora.com/What-do-the-top-1-of-software-engineers-do-that-the-other-99-do-not
questiontag_set : ['productivity']
datetime_added  =[2014-11-25 20:05:36.248057+00:00]
datetime_updated=[2014-11-25 20:05:36.248089+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1002] of [1277] ============================= id=[276] ==
Q:  How to show the full path when doing an `ls`?  e.g.,

    $ ls /tmp
    a b

want:

    $ ls /tmp
    /tmp/a /tmp/b
questiontag_set : ['unix']
datetime_added  =[2014-11-25 19:49:10.096513+00:00]
datetime_updated=[2014-11-25 19:49:10.096546+00:00]
---------------------------------------------- id=[206] --
A:
    $ ls /tmp/*
    /tmp/a /tmp/b


=== [1003] of [1277] ============================= id=[275] ==
Q:  dynamics
questiontag_set : ['vocabulary']
datetime_added  =[2014-11-25 19:03:54.179362+00:00]
datetime_updated=[2014-11-25 19:03:54.179393+00:00]
---------------------------------------------- id=[205] --
A:
the forces or properties that stimulate growth, development, or change within a system or process.
"the dynamics of changing social relations"

[https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=dynamics][1]


  [1]: https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=dynamics

=== [1004] of [1277] ============================= id=[274] ==
Q:  What does this code do in mom.model.org.add_user():

    user.update_teams({'Admins'})

questiontag_set : ['trapit', 'trapit_mom']
datetime_added  =[2014-11-24 22:20:06.716433+00:00]
datetime_updated=[2014-11-24 22:20:06.716463+00:00]
---------------------------------------------- id=[204] --
A:
It means that the team "Admins" is given access to "user" (CRUD access, depending on roles of user).  Note that "user" here is the object and the "Admins" team is the subject.

(note that it does **not** make the user part of the "Admins" team)

=== [1005] of [1277] ============================= id=[273] ==
Q:  What is the difference in mom between roles and teams?
questiontag_set : ['trapit']
datetime_added  =[2014-11-24 22:14:01.147600+00:00]
datetime_updated=[2014-11-24 22:14:01.147631+00:00]
---------------------------------------------- id=[203] --
A:
Roles are the roles that a user has, and defines the permissions/actions that they have.

A user can belong to 0 or more teams, and each team can have access to specific users and traps.

e.g.,
 
-  userA belongs to teamA
-  trap1 belongs to teamA
-  trap2 belongs to teamA
-  (userA has access to trap1 and trap2)
-  roleA has trap-read and trap-update perms
- userA has roleA
- userA has read and update permissions on trap1 and trap2

=== [1006] of [1277] ============================= id=[272] ==
Q:  Review:

Use the programming language you are most comfortable with and in which you can develop the fastest. Most project planners spend a lot of time worrying about scalability while they almost never reach that level of usage.
In case you are building a social app - for all practical purposes the programming language will never be a performance bottleneck (unless you really go out of the way in writing bad code). The scale issues start once your data backend starts maxing out. You can easily run a website of millions of active users on a 72 GB RAM machine (pretty standard these days). Once you start feeling a pinch with this do vertical partitioning (distribute the database so that there are one table per machine and remember never to user joins, foreign keys in the first place).
When you are executing vertical partitioning get in touch with me and I will help you scale the system to the next level.
Follow HBase and Hadoop which will potentially solve scaling forever for all startups in next two years. Till then for mysql based scaling.

[http://www.quora.com/What-are-the-tradeoffs-e-g-development-speed-performance-scalability-between-using-various-php-frameworks-ruby-rails-or-python-django-Is-there-any-reason-to-choose-one-overwhelmingly-over-another][1]


  [1]: http://www.quora.com/What-are-the-tradeoffs-e-g-development-speed-performance-scalability-between-using-various-php-frameworks-ruby-rails-or-python-django-Is-there-any-reason-to-choose-one-overwhelmingly-over-another
questiontag_set : ['web development']
datetime_added  =[2014-11-24 19:03:27.835902+00:00]
datetime_updated=[2014-11-24 19:03:27.835934+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1007] of [1277] ============================= id=[271] ==
Q:  Review:  [http://en.wikipedia.org/wiki/Apache_Solr][1]


  [1]: http://en.wikipedia.org/wiki/Apache_Solr
questiontag_set : []
datetime_added  =[2014-11-23 22:41:57.342714+00:00]
datetime_updated=[2014-11-23 22:41:57.342751+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1008] of [1277] ============================= id=[270] ==
Q:  Review: 

[http://en.wikipedia.org/wiki/Lucene][1]


  [1]: http://en.wikipedia.org/wiki/Lucene
questiontag_set : []
datetime_added  =[2014-11-23 22:41:15.857366+00:00]
datetime_updated=[2014-11-23 22:41:15.857396+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1009] of [1277] ============================= id=[269] ==
Q:  Review this for Mac performance issues after upgrading to Yosemite:

Ashley Riddell
I feel your pain. For what its worth, I did exactly two things after upgrading that fixed all of my glacial performance issues:

1. Reset disk permissions
This had an immediate and dramatic effect, for my system at least. Hold down the Option key on restart, select the disk to be reset and let it do its stuff. Go have a cup of tea.

2. Change the standby time
Waiting for 10 minutes while your Mac starts up because of the crappy implementation of deep sleep mode is a problem, as this mode cuts in after 1 hour of idle time. As there is NO settings function to control this mode (very sloppy work that), a quick check online found the right terminal commands to do it. Bump it up to 24 hours instead of 1. This one is very simple and returns your "instant on" experience when you open and close the lid. Read how to do this here:
http://ilovesymposia.com/2014/09/22/use-pmset-to-restore-your-macs-insta...

3. After getting rid of the idle time problem, reboot. Then let it run by itself for a few hours. It seemed to behave like Dr Who after a regeneration... confused, slow, disoriented at first, but leave it alone for a while and it finds its feet again. All now running much the same as it did under Mavericks. Worst upgrade experience so far and I do this crap for a living!

[http://www.imore.com/planning-upgrade-os-x-yosemite-wait][1]


  [1]: http://www.imore.com/planning-upgrade-os-x-yosemite-wait
questiontag_set : ['osx (OSX) (Mac)']
datetime_added  =[2014-11-23 16:01:42.497114+00:00]
datetime_updated=[2014-11-23 16:01:42.497152+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1010] of [1277] ============================= id=[268] ==
Q:  In the Photos app in iOS, what is the difference between "Camera Roll" and "My Photo Stream"?
questiontag_set : ['iOS']
datetime_added  =[2014-11-23 15:50:28.107168+00:00]
datetime_updated=[2014-11-23 15:50:28.107198+00:00]
---------------------------------------------- id=[202] --
A:
Camera Roll actually sits on your device, whereas My Photo Stream is in the cloud and syncs with all your other devices. Unlike Camera Roll, you need to enable My Photo Stream manually.

=== [1011] of [1277] ============================= id=[267] ==
Q:  Can a set data type be used as a dict key in Python?
questiontag_set : ['python']
datetime_added  =[2014-11-22 16:28:54.416332+00:00]
datetime_updated=[2014-11-22 16:28:54.416365+00:00]
---------------------------------------------- id=[201] --
A:
No, it cannot.  It gives:

    TypeError: unhashable type: 'set'

=== [1012] of [1277] ============================= id=[266] ==
Q:  In SQLAlchemy, what does it mean that queries are "fully generative"?
questiontag_set : ['sqlalchemy']
datetime_added  =[2014-11-22 01:44:51.857162+00:00]
datetime_updated=[2014-11-22 01:44:51.857195+00:00]
---------------------------------------------- id=[200] --
A:
"The Query object is fully generative, meaning that most method calls return a new Query object upon which further criteria may be added. "

[http://docs.sqlalchemy.org/en/rel_0_9/orm/tutorial.html][1]


  [1]: http://docs.sqlalchemy.org/en/rel_0_9/orm/tutorial.html

=== [1013] of [1277] ============================= id=[265] ==
Q:  What is this bash functionality called?

    $ echo a{b,c,d}z
    abz acz adz
questiontag_set : ['bash']
datetime_added  =[2014-11-21 23:34:25.223887+00:00]
datetime_updated=[2014-11-21 23:34:25.223919+00:00]
---------------------------------------------- id=[199] --
A:
brace expansion

[http://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html][1]


  [1]: http://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html

=== [1014] of [1277] ============================= id=[264] ==
Q:  Review this from Daniel Pink's email:

MY 6 FAVORITE PRODUCTIVITY TIPS
Like many of you, I’m somewhat obsessed with productivity hacks — small steps I can take to work smarter, faster, and better. Alas, most hacks (like most houseguests) are appealing only for a few days. But some tricks manage to endure. 

Here are 6 that I use all the time.

1. Honor the 2-Minute rule.
This one comes from the great David Allen, whose Getting Things Done methodology I’ve used for 15 years. In short, if you’ve got something to do that takes less than two minutes, do it right now. 

2. Don’t waste your most productive hours.
A growing stack of research shows that each day, we reach our peak productivity a few hours after waking.  Don’t devote that window of time to checking email or playing around on social media. Use it to do your most important work.

3. When in doubt, resort to the Pomodoro Technique.
I’m never proud when I pull out this trick, but I’m always glad I did. Pomodoro is a method for breaking large tasks into small chunks. Set a timer for 25 minutes and work nonstop without doing anything else. Then take 5 minutes to do whatever you want. Then do another 25-5 cycle. Lather, rinse, repeat.

4. Take a systems approach to email.
We could spend all day answering email — but we shouldn’t. So instead of being drip-tortured by your inbox, find a way to deal with all at once — in large batches during non-productive hours. I also use AwayFind.

5. Mark your progress.
Teresa Amabile’s research has shown that the single largest day-to-day motivator is making progress in meaningful work. But sometimes it’s tough to see the progress we’re making. That’s why I use the brilliant tool, IDoneThis. (Disclosure: This tool was so valuable to me that I invested in the company).

6. To make a good decision, ask the right question.
The Heath Brothers taught me this technique. If I’m faced with a decision, and I’m not sure what to do, I ask myself, “What would you tell your best friend to do in this situation?” Usually, the answer is clear. 


10 ARTICLES WORTH READING
Our most popular feature. From my Instapaper account to your inbox, below are 10 articles that caught my attention and made me think:

This 15-Minute Activity Will Make You More Successful at Work
Business Insider reports on Harvard research showing that taking time at the end of the work day to write about what went well can make you better at your job.

The Habits of Highly Productive Writers
From The Chronicle of Higher Education, a few good tips that can be summarized thusly: Stop talking and finish your first draft. 

Better All The Time
In The New Yorker, James Surowiecki ranges from the playing field to the orchestra hall to conclude that the essence of high performance is the capacity for “getting better at getting better.”

Why Cliques Form at Some High Schools and Not at Others
In bigger schools, students often splinter into factions. In smaller ones, everyone must deal with each other, says The Atlantic’s Derek Thompson.

Great Vacation? Don’t Brag to Your Friends
People are more likely to enjoy talking about an ordinary experience they’ve all had than hearing about the fabulous one they didn’t, says The New York Times.

Can Money Buy Happiness?
Yep. But it's how you spend the money that matters the most. People derive more satisfaction from giving money away and from purchasing experiences like travel rather than goods like cars. (Just don’t brag about your trip to your friends.)

How to identify a narcissist with one simple question
Spoiler alert: Just ask, “Are you a narcissist?”

What makes most restaurant reviews worthless
Weather turns out to have a profound effect on what reviewers think of a restaurant. “A nice day can lead to a nice review. A rainy day can mean a miserable one,” according to Georgia Tech researchers.

The Most Undervalued Employee in Your Organization
Look for "disagreeable givers” — people who play devil’s advocate but do so to help rather than hinder. 

The Serial Podcast
Okay, it’s not an article. And you’ve probably already discovered it. But if not, this podcast from the creators of This American Life tells one story, week-by-week, and it’s utterly gripping. Begin with Episode 1 and you’ll be hooked.

[Daniel Pink's email newsletter, 11/21/14]
questiontag_set : ['psychology', 'productivity']
datetime_added  =[2014-11-21 18:41:16.344444+00:00]
datetime_updated=[2014-11-21 18:41:16.344475+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1015] of [1277] ============================= id=[263] ==
Q:  Learn how to use Python debugger in Eclipse IDE with the PyDev plugin.
questiontag_set : ['action', 'learning', 'python']
datetime_added  =[2014-11-20 16:19:41.344374+00:00]
datetime_updated=[2014-11-20 16:19:41.344407+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1016] of [1277] ============================= id=[262] ==
Q:  Modify pycallgraph to output text or json or csv (or a separate program to convert the graphviz or gephi output)
questiontag_set : ['action', 'python']
datetime_added  =[2014-11-20 16:18:42.938843+00:00]
datetime_updated=[2014-11-20 16:18:42.938875+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1017] of [1277] ============================= id=[261] ==
Q:  Learn how to use the PyCharm debugger
questiontag_set : ['action', 'python']
datetime_added  =[2014-11-20 16:16:19.784848+00:00]
datetime_updated=[2014-11-20 16:16:19.784888+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1018] of [1277] ============================= id=[260] ==
Q:  Add a new stackoverflow question or answer.
questiontag_set : ['action']
datetime_added  =[2014-11-20 16:15:00.938159+00:00]
datetime_updated=[2014-11-20 16:15:00.938204+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1019] of [1277] ============================= id=[259] ==
Q:  Python projects to study and understand:

1. python3-wsgi-intercept  [https://github.com/cdent/python3-wsgi-intercept][1]
1. Kenneth Reitz's requests
1. Kenneth Reitz's envoy
1. Django
1. Flask
1. SQLAlchemy
1. traceback (Python library)
1. pycallgraph
1. mock
1. flexmock

  [1]: https://github.com/cdent/python3-wsgi-intercept
questiontag_set : ['python', 'review']
datetime_added  =[2014-11-20 16:14:29.538369+00:00]
datetime_updated=[2014-11-20 16:15:44.048256+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1020] of [1277] ============================= id=[258] ==
Q:  What does Elzar use to test the client without having to run a separate Elzar service?
questiontag_set : ['trapit', 'web development', 'trapit_elzar']
datetime_added  =[2014-11-20 00:58:36.263442+00:00]
datetime_updated=[2014-11-20 00:58:36.263477+00:00]
---------------------------------------------- id=[198] --
A:
    import wsgi_intercept

(from PyPI)


=== [1021] of [1277] ============================= id=[257] ==
Q:  What does CDN stand for?
questiontag_set : ['web development']
datetime_added  =[2014-11-19 23:17:39.145617+00:00]
datetime_updated=[2014-11-19 23:17:39.145648+00:00]
---------------------------------------------- id=[197] --
A:
Content Delivery Network

[http://en.wikipedia.org/wiki/Content_delivery_network][1]


  [1]: http://en.wikipedia.org/wiki/Content_delivery_network

=== [1022] of [1277] ============================= id=[256] ==
Q:  What this the issue with zulu where I was seeing buffering, but then when I did it again I was not seeing it?
questiontag_set : ['unix']
datetime_added  =[2014-11-19 23:13:04.556795+00:00]
datetime_updated=[2014-11-19 23:13:04.556828+00:00]
---------------------------------------------- id=[196] --
A:
The first time I was appending the output to a file.  Linux buffers piped data (which includes file output).

The second time I was not appending to a file, but just doing a 'zulu tail' to stdout and watching the output in the terminal.  stdout is only line-buffered.

=== [1023] of [1277] ============================= id=[255] ==
Q:  Review XML-RPC: [http://en.wikipedia.org/wiki/XML-RPC][1]


  [1]: http://en.wikipedia.org/wiki/XML-RPC
questiontag_set : ['web development']
datetime_added  =[2014-11-19 21:05:15.584197+00:00]
datetime_updated=[2014-11-19 21:05:15.584230+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1024] of [1277] ============================= id=[254] ==
Q:  Review JSON-RPC: [http://en.wikipedia.org/wiki/JSON-RPC][1]


  [1]: http://en.wikipedia.org/wiki/JSON-RPC
questiontag_set : ['web development']
datetime_added  =[2014-11-19 21:00:56.694871+00:00]
datetime_updated=[2014-11-19 21:00:56.694904+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1025] of [1277] ============================= id=[253] ==
Q:  How does git parse the commit message?
questiontag_set : ['git']
datetime_added  =[2014-11-19 18:41:16.879076+00:00]
datetime_updated=[2014-11-19 18:41:16.879106+00:00]
---------------------------------------------- id=[195] --
A:
The first line is a summary line.  Follow that with a blank line and then a more thorough description.

   Though not required, it's a good idea to begin the commit message with a single short (less than 50 character)
   line summarizing the change, followed by a blank line and then a more thorough description. The text up to the
   first blank line in a commit message is treated as the commit title, and that title is used throughout Git. For
   example, git-format-patch(1) turns a commit into email, and it uses the title on the Subject line and the rest
   of the commit in the body.

[git commit --help]

=== [1026] of [1277] ============================= id=[252] ==
Q:  What is a way to find out which tests are calling a given function?
questiontag_set : ['python']
datetime_added  =[2014-11-19 15:57:19.288593+00:00]
datetime_updated=[2014-11-19 15:57:19.288624+00:00]
---------------------------------------------- id=[194] --
A:
Add these lines to the function:

    print "rbednark DEBUG: in function foo"
    import traceback
    traceback.print_stack()

=== [1027] of [1277] ============================= id=[251] ==
Q:  What's the easiest way to serve ssl with Django on a localhost?
questiontag_set : ['django']
datetime_added  =[2014-11-19 15:46:08.297820+00:00]
datetime_updated=[2014-11-19 15:46:08.297853+00:00]
---------------------------------------------- id=[193] --
A:
Use django-sslserver

[http://yuji.wordpress.com/2014/11/18/serve-django-https-over-localhost/][1]


  [1]: http://yuji.wordpress.com/2014/11/18/serve-django-https-over-localhost/

=== [1028] of [1277] ============================= id=[250] ==
Q:  Review `uniform resource name (URN)`:
[http://en.wikipedia.org/wiki/Uniform_resource_name][1]


  [1]: http://en.wikipedia.org/wiki/Uniform_resource_name
questiontag_set : ['web development']
datetime_added  =[2014-11-19 01:16:42.137053+00:00]
datetime_updated=[2014-11-19 01:16:42.137084+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1029] of [1277] ============================= id=[249] ==
Q:  Review `uniform resource locator (url)`:
[http://en.wikipedia.org/wiki/Uniform_resource_locator][1]


  [1]: http://en.wikipedia.org/wiki/Uniform_resource_locator
questiontag_set : ['web development']
datetime_added  =[2014-11-19 01:16:01.649831+00:00]
datetime_updated=[2014-11-19 01:16:01.649870+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1030] of [1277] ============================= id=[248] ==
Q:  Review Uniform resource identifier (URI): [http://en.wikipedia.org/wiki/Uniform_resource_identifier][1]


  [1]: http://en.wikipedia.org/wiki/Uniform_resource_identifier
questiontag_set : ['web development']
datetime_added  =[2014-11-19 01:14:57.659477+00:00]
datetime_updated=[2015-04-14 17:15:14.288158+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1031] of [1277] ============================= id=[247] ==
Q:  Review URI scheme: [http://en.wikipedia.org/wiki/URI_scheme][1]


  [1]: http://en.wikipedia.org/wiki/URI_scheme
questiontag_set : ['web development']
datetime_added  =[2014-11-19 01:14:22.589956+00:00]
datetime_updated=[2014-11-19 01:14:22.589991+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1032] of [1277] ============================= id=[246] ==
Q:  Review the WSGI specifications:

- [https://www.python.org/dev/peps/pep-0333/][1]  (specification)
- [http://en.wikipedia.org/wiki/Web_Server_Gateway_Interface][2]
- [http://wsgi.readthedocs.org/en/latest/][3]  (general documentation)
- [https://docs.python.org/2/library/wsgiref.html][4]


  [1]: https://www.python.org/dev/peps/pep-0333/
  [2]: http://en.wikipedia.org/wiki/Web_Server_Gateway_Interface
  [3]: http://wsgi.readthedocs.org/en/latest/
  [4]: https://docs.python.org/2/library/wsgiref.html
questiontag_set : ['web development']
datetime_added  =[2014-11-18 23:36:00.019279+00:00]
datetime_updated=[2015-02-19 17:32:00.486552+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1033] of [1277] ============================= id=[245] ==
Q:  Review Roy Fielding's REST chapter 5 from his dissertation:
[http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm][1]


  [1]: http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm
questiontag_set : ['web development']
datetime_added  =[2014-11-18 23:27:19.915210+00:00]
datetime_updated=[2014-11-18 23:27:19.915243+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1034] of [1277] ============================= id=[244] ==
Q:  What are the 6 constraints of REST?
questiontag_set : ['web development']
datetime_added  =[2014-11-18 23:26:30.348712+00:00]
datetime_updated=[2014-11-18 23:26:30.348743+00:00]
---------------------------------------------- id=[192] --
A:
1. Uniform Interface
1. Stateless
1. Cacheable
1. Client-Server
1. Layered System
1. Code on Demand (optional)

[http://www.restapitutorial.com/lessons/whatisrest.html][1]
[http://en.wikipedia.org/wiki/Representational_state_transfer][2]


  [1]: http://www.restapitutorial.com/lessons/whatisrest.html
  [2]: http://en.wikipedia.org/wiki/Representational_state_transfer

=== [1035] of [1277] ============================= id=[243] ==
Q:  Review: [http://www.restapitutorial.com/lessons/whatisrest.html][1]


  [1]: http://www.restapitutorial.com/lessons/whatisrest.html
questiontag_set : ['web development']
datetime_added  =[2014-11-18 23:24:05.334367+00:00]
datetime_updated=[2014-11-18 23:24:05.334401+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1036] of [1277] ============================= id=[242] ==
Q:  Review REST: [http://en.wikipedia.org/wiki/Representational_state_transfer][1]


  [1]: http://en.wikipedia.org/wiki/Representational_state_transfer
questiontag_set : ['web development']
datetime_added  =[2014-11-18 23:22:54.409326+00:00]
datetime_updated=[2014-11-18 23:22:54.409359+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1037] of [1277] ============================= id=[241] ==
Q:  Review: http://en.wikipedia.org/wiki/Doxing
questiontag_set : ['vocabulary']
datetime_added  =[2014-11-18 23:06:11.270671+00:00]
datetime_updated=[2014-11-18 23:06:11.270703+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1038] of [1277] ============================= id=[240] ==
Q:  How do you download a PyPI package without installing it?
questiontag_set : ['python']
datetime_added  =[2014-11-18 22:36:43.282709+00:00]
datetime_updated=[2014-11-18 22:36:43.282741+00:00]
---------------------------------------------- id=[191] --
A:
    pip install --no-install --download-cache=/tmp my_package

=== [1039] of [1277] ============================= id=[239] ==
Q:  What is something that "make release" does that "wr nominate:..." does not do?
questiontag_set : ['trapit']
datetime_added  =[2014-11-18 22:21:39.193001+00:00]
datetime_updated=[2014-11-18 22:21:39.193033+00:00]
---------------------------------------------- id=[190] --
A:
`make release` does:  
   &nbsp;&nbsp;&nbsp;`make clean`  
   &nbsp;&nbsp;&nbsp;`make bootstrap`

and `wr nominate:...` does not.


=== [1040] of [1277] ============================= id=[238] ==
Q:  What are the 3 themes that Gary Ferguson found when reading over 1000 folktales?
questiontag_set : []
datetime_added  =[2014-11-17 00:40:33.397750+00:00]
datetime_updated=[2014-11-17 00:40:33.397789+00:00]
---------------------------------------------- id=[189] --
A:
beauty, community, and mystery


=== [1041] of [1277] ============================= id=[237] ==
Q:  How do you tell the Unix `date` command to show the time in a different timezone?
questiontag_set : ['bash']
datetime_added  =[2014-11-14 17:16:47.520544+00:00]
datetime_updated=[2014-11-14 17:16:47.520580+00:00]
---------------------------------------------- id=[188] --
A:
    TZ=":US/Pacific" date
-or-

    TZ="America/Los_Angeles" date
-or-

    export TZ=":US/Pacific"
    date

=== [1042] of [1277] ============================= id=[236] ==
Q:  How do you tell `xargs` to put stdin input into the middle of a command?  e.g.,

    echo foo | xargs echo ??? bar
    foo bar
questiontag_set : ['bash']
datetime_added  =[2014-11-13 23:44:52.223675+00:00]
datetime_updated=[2014-11-13 23:44:52.223707+00:00]
---------------------------------------------- id=[187] --
A:
    echo foo | xargs --replace=REPLACE echo REPLACE bar

=== [1043] of [1277] ============================= id=[235] ==
Q:  Assuming I have a list of comma-separated values, how can I tell awk to show me the second value, e.g.,

    echo a,b,c | awk ??? 
    b
questiontag_set : ['awk', 'bash']
datetime_added  =[2014-11-13 23:30:08.927729+00:00]
datetime_updated=[2014-11-13 23:30:19.846134+00:00]
---------------------------------------------- id=[186] --
A:
    echo a,b,c | awk -F, '{print $2}'

=== [1044] of [1277] ============================= id=[234] ==
Q:  For `redbike statuses` output, what are these values?

    trap:77474:zb-unsched,STP,1398470196
questiontag_set : ['redbike']
datetime_added  =[2014-11-13 22:44:31.551602+00:00]
datetime_updated=[2014-11-13 22:44:31.551638+00:00]
---------------------------------------------- id=[185] --
A:
JOBID, status, and timestamp are delimited by commas:

    trap:77474:zb-unsched,STP,1398470196
    ^^^^^^^^^^^^^^^^^^^^^
    JOBID

    trap:77474:zb-unsched,STP,1398470196
                          ^^^
                          status

    trap:77474:zb-unsched,STP,1398470196
                              ^^^^^^^^^
                              timestamp

=== [1045] of [1277] ============================= id=[233] ==
Q:  What are the two ways to run Python with unbuffered stdout?
questiontag_set : ['python']
datetime_added  =[2014-11-12 18:53:05.153642+00:00]
datetime_updated=[2014-11-12 18:53:05.153682+00:00]
---------------------------------------------- id=[184] --
A:
1.  `python -u foo.py`
1.  `export PYTHONUNBUFFERED=true; python foo.py`

=== [1046] of [1277] ============================= id=[232] ==
Q:  In git, if I do a `git push -f origin master` from serverA, what do I need to do on serverB to make it look exactly like serverA (and forget about any differences on master on serverB)?
questiontag_set : ['git']
datetime_added  =[2014-11-11 22:37:45.265787+00:00]
datetime_updated=[2014-11-11 22:37:45.265818+00:00]
---------------------------------------------- id=[183] --
A:
    serverB $ git checkout master
    serverB $ git fetch
    serverB $ git reset --hard origin/master

=== [1047] of [1277] ============================= id=[231] ==
Q:  Review:

"How to find your passion" by Oliver Emberton
[http://oliveremberton.com/2014/how-to-find-your-passion/][1]


  [1]: http://oliveremberton.com/2014/how-to-find-your-passion/
questiontag_set : ['inspiration']
datetime_added  =[2014-11-11 19:03:34.487330+00:00]
datetime_updated=[2014-11-11 19:03:34.487368+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1048] of [1277] ============================= id=[230] ==
Q:  What is the bash command to print a sequence of numbers?
questiontag_set : ['bash']
datetime_added  =[2014-11-11 17:25:36.516379+00:00]
datetime_updated=[2014-11-11 17:25:36.516419+00:00]
---------------------------------------------- id=[182] --
A:
`seq`, e.g., 

    $ seq 4
    1
    2
    3
    4

=== [1049] of [1277] ============================= id=[229] ==
Q:  In bash, how do you run a command repeatedly / infinitely every so many seconds (sleep in between) and see the output?
questiontag_set : ['bash']
datetime_added  =[2014-11-11 17:24:46.334977+00:00]
datetime_updated=[2015-01-23 22:15:58.861370+00:00]
---------------------------------------------- id=[181] --
A:
`watch`, e.g.,

    $ watch --interval=2 --differences=cumulative wc -l /tmp/foo



=== [1050] of [1277] ============================= id=[228] ==
Q:  Why aren't commands that I copy-and-paste in my bash history?
questiontag_set : ['bash']
datetime_added  =[2014-11-11 17:10:07.787009+00:00]
datetime_updated=[2014-11-11 17:10:07.787043+00:00]
---------------------------------------------- id=[180] --
A:
Probably because they start with whitespace, and 

    $ echo $HISTCONTROL
    ignoreboth

Try setting:

    $ set HISTCONTROL=ignoredups


       HISTCONTROL
              A colon-separated list of values controlling how commands are saved on  the  history
              list.   If  the  list of values includes ignorespace, lines which begin with a space
              character are not saved in the history list.  A value  of  ignoredups  causes  lines
              matching  the  previous  history  entry  to  not be saved.  A value of ignoreboth is
              shorthand for ignorespace and ignoredups.  A value of erasedups causes all  previous
              lines matching the current line to be removed from the history list before that line
              is saved.  Any value not in the above list is ignored.  If HISTCONTROL is unset,  or
              does  not include a valid value, all lines read by the shell parser are saved on the
              history list, subject to the value of HISTIGNORE.  The second and  subsequent  lines
              of  a  multi-line  compound  command  are  not  tested, and are added to the history
              regardless of the value of HISTCONTROL.

=== [1051] of [1277] ============================= id=[227] ==
Q:  In Python, how do I get timings for how long it takes to execute "time.time()"?
questiontag_set : ['python']
datetime_added  =[2014-11-10 22:21:58.210377+00:00]
datetime_updated=[2014-11-10 22:21:58.210408+00:00]
---------------------------------------------- id=[179] --
A:
    import timeit
    timeit.repeat(stmt='time.time()', setup='import time', repeat=3, number=100000)

Output:

    [0.029824018478393555, 0.02070784568786621, 0.01881694793701172]

Note that the time is cumulative time for running `number` iterations (100k in this case).

To run this same thing from the command-line:

    % python -mtimeit  --setup='import time' --repeat=3 --number=100000 'time.time()'
    100000 loops, best of 3: 0.105 usec per loop



=== [1052] of [1277] ============================= id=[226] ==
Q:  The python timeit module gives output like:

    100000 loops, best of 3: 8.29 usec per loop

What does "usec" mean?
questiontag_set : ['python']
datetime_added  =[2014-11-10 18:05:04.942151+00:00]
datetime_updated=[2014-11-10 18:05:04.942182+00:00]
---------------------------------------------- id=[178] --
A:
It is microsecond (millionth of a second).

=== [1053] of [1277] ============================= id=[225] ==
Q:  How do you rename a fiddle or make the recent version the latest one on [jsfiddle.net][1] ?


  [1]: http://jsfiddle.net
questiontag_set : ['html', 'css']
datetime_added  =[2014-11-10 02:42:07.269741+00:00]
datetime_updated=[2014-11-10 02:42:07.269774+00:00]
---------------------------------------------- id=[177] --
A:
1. Fiddle Options > Name your fiddle > (input the name)   
2. Set as base (up on top bar)

=== [1054] of [1277] ============================= id=[224] ==
Q:  How do you set a trace in nosetests?
questiontag_set : ['python', 'nosetests']
datetime_added  =[2014-11-10 02:40:07.600201+00:00]
datetime_updated=[2014-11-10 02:40:07.600237+00:00]
---------------------------------------------- id=[176] --
A:
    import nose; nose.tools.set_trace()

=== [1055] of [1277] ============================= id=[223] ==
Q:  How to vertically align text within a block?  e.g.,

li {
    display:inline-block;
    background-color:#e2af41;
    border-color:white;
    border-width:2px;
    border-radius:50%;
    height:40px;
    width:100px;
    text-align:center;
}

[http://jsfiddle.net/rbednark/nsnoczt4/][1]


  [1]: http://jsfiddle.net/rbednark/nsnoczt4/
questiontag_set : ['css']
datetime_added  =[2014-11-10 00:01:49.878044+00:00]
datetime_updated=[2014-11-10 00:01:49.878079+00:00]
---------------------------------------------- id=[175] --
A:
Set the block `line-height` to be the same as the block `height`:

    height: 40px;
    line-height: 40px;

[http://jsfiddle.net/rbednark/084xb3vh/][1]
[http://stackoverflow.com/questions/5166574/vertical-align-text-in-block-element][2]


  [1]: http://jsfiddle.net/rbednark/084xb3vh/
  [2]: http://stackoverflow.com/questions/5166574/vertical-align-text-in-block-element

=== [1056] of [1277] ============================= id=[222] ==
Q:  Where is the main log file for supervisord? (and where is the setting for this?)
questiontag_set : ['trapit', 'supervisor']
datetime_added  =[2014-11-09 04:23:06.315647+00:00]
datetime_updated=[2015-03-10 13:39:39.494440+00:00]
---------------------------------------------- id=[174] --
A:
    /var/log/trapit/supervisord.log

You can find this via:
    
    /trapit/config/current/supervisord.conf

which has the setting:

    logfile = /var/log/trapit/supervisord.log

=== [1057] of [1277] ============================= id=[221] ==
Q:  In SQLAlchemy, how do you do a query to find all records where a given column is one of a given list of values (e.g., color is one of ['green', 'yellow', 'blue'])
questiontag_set : ['sqlalchemy']
datetime_added  =[2014-11-07 21:35:40.063781+00:00]
datetime_updated=[2014-11-07 21:35:40.063810+00:00]
---------------------------------------------- id=[173] --
A:
Use the `in_` operator, e.g.,

    query = session.query(Flower).filter(Flower.color.in_(['green', 'yellow', 'blue'])).all()

=== [1058] of [1277] ============================= id=[220] ==
Q:  For a Trapit roll, how do you tell it to only update the version on a subset of the servers?  (e.g., only roll elzar on ez-4, and not any of the other elzars)
questiontag_set : ['trapit']
datetime_added  =[2014-11-06 22:37:10.416584+00:00]
datetime_updated=[2014-11-06 22:37:10.416618+00:00]
---------------------------------------------- id=[172] --
A:
This is currently not possible.  Rolling is an all-or-none operation.

=== [1059] of [1277] ============================= id=[219] ==
Q:  How do zeromq and Redis pub/sub manage their queues?  (how big are they, ...)
questiontag_set : []
datetime_added  =[2014-11-06 18:12:08.791588+00:00]
datetime_updated=[2014-11-06 18:12:08.791617+00:00]
---------------------------------------------- id=[171] --
A:
They aren't true queues.  They are just sockets that allow people to subscribe and see messages as they come through.  You can't see messages that were sent earlier (they aren't stored in a data structure).

=== [1060] of [1277] ============================= id=[218] ==
Q:  In SQLAlchemy, what does this do:
    for name, fullname in session.query(User.name, User.fullname): 


questiontag_set : ['sqlalchemy']
datetime_added  =[2014-11-05 23:08:24.158094+00:00]
datetime_updated=[2014-11-05 23:08:24.158162+00:00]
---------------------------------------------- id=[170] --
A:
The Query also accepts ORM-instrumented descriptors as arguments. Any time multiple class entities or column-based entities are expressed as arguments to the query() function, the return result is expressed as tuples:

    >>> for name, fullname in session.query(User.name, User.fullname): 
    ...     print name, fullname
    ed Ed Jones
    wendy Wendy Williams
    mary Mary Contrary
    fred Fred Flinstone

[http://docs.sqlalchemy.org/en/rel_0_9/orm/tutorial.html][1]


  [1]: http://docs.sqlalchemy.org/en/rel_0_9/orm/tutorial.html

=== [1061] of [1277] ============================= id=[217] ==
Q:  What is the SQLAlchemy method to tell it to only grab so many records at a time?
questiontag_set : ['sqlalchemy']
datetime_added  =[2014-11-05 22:59:40.598247+00:00]
datetime_updated=[2014-11-05 22:59:40.598288+00:00]
---------------------------------------------- id=[169] --
A:
`yield_per()`

e.g.,

         for doc_id, url in (session
                                .query(Document.id, Document.url)
                                .filter(and_(Document.id > start_doc,
                                             Document.id <= end_doc))
                                .yield_per(25000)):

=== [1062] of [1277] ============================= id=[216] ==
Q:  How are crontab's managed by puppet?
questiontag_set : ['trapit']
datetime_added  =[2014-11-04 23:24:00.371564+00:00]
datetime_updated=[2014-11-04 23:24:00.371595+00:00]
---------------------------------------------- id=[168] --
A:

Puppet adds a puppet agent cronjob for root, e.g., on staging-1:

    # HEADER: This file was autogenerated at Thu Mar 20 15:20:44 -0700 2014 by puppet.
    # HEADER: While it can still be managed manually, it is definitely not recommended.
    # HEADER: Note particularly that the comments starting with 'Puppet Name' should
    # HEADER: not be deleted, as doing so could cause duplicate cron jobs.
    # Puppet Name: puppet
    4,14,24,34,44,54 * * * * /usr/bin/puppet agent --no-splay --onetime --no-daemonize --logdest syslog > /dev/null 2>&1
    */10 * * * * /root/cronscripts/service_cull.sh
    1 1 * * * /trapit/scripts/update-analytics.sh
To manually add cronjobs to this, make sure to add them after the "puppet agent" cronjob, like the service_cull.sh cronjob.  Otherwise, puppet will comment it out or get rid of it.

=== [1063] of [1277] ============================= id=[215] ==
Q:  How do you add a job for supervisor to run on logdb-1?
questiontag_set : ['trapit']
datetime_added  =[2014-11-04 23:22:02.174022+00:00]
datetime_updated=[2014-11-04 23:22:02.174051+00:00]
---------------------------------------------- id=[167] --
A:
Add a file like:

    /trapit/config/current/supervisord.d/nginx-log-forwarder.conf

=== [1064] of [1277] ============================= id=[214] ==
Q:  How do you restart supervisor?
questiontag_set : ['trapit']
datetime_added  =[2014-11-04 23:21:09.855667+00:00]
datetime_updated=[2014-11-04 23:21:09.855698+00:00]
---------------------------------------------- id=[166] --
A:
    sudo /etc/init.d/trapit restart

=== [1065] of [1277] ============================= id=[213] ==
Q:  How to grep and use regular expressions such as \s for whitespace?
questiontag_set : ['unix']
datetime_added  =[2014-11-04 23:17:09.221950+00:00]
datetime_updated=[2014-11-04 23:17:09.221980+00:00]
---------------------------------------------- id=[165] --
A:
grep --extended-regexp '\S+'

=== [1066] of [1277] ============================= id=[212] ==
Q:  How to grep and only match the portion of the line that matched?
questiontag_set : ['bash']
datetime_added  =[2014-11-04 23:04:21.227590+00:00]
datetime_updated=[2014-11-04 23:04:21.227621+00:00]
---------------------------------------------- id=[164] --
A:
    $ echo abc def ghi | grep --only-matching d..
    def

> -o, --only-matching  
>     Prints only the matching part of the lines.

=== [1067] of [1277] ============================= id=[211] ==
Q:  How to avoid many different conflicts when rebasing?
questiontag_set : ['git']
datetime_added  =[2014-11-03 20:27:23.104976+00:00]
datetime_updated=[2014-11-03 20:27:23.105006+00:00]
---------------------------------------------- id=[163] --
A:
Squash all the changes on your branch first.


=== [1068] of [1277] ============================= id=[210] ==
Q:  How to start up a web server on a computer using Python?
questiontag_set : []
datetime_added  =[2014-11-03 20:26:42.659654+00:00]
datetime_updated=[2014-11-03 20:26:42.659690+00:00]
---------------------------------------------- id=[162] --
A:
$ python -m SimpleHTTPServer 8000

(this will serve files in the current directory on port 8000)

Note that *.txt files will be served as plain text, *.html files as html, and other files will be downloaded.

=== [1069] of [1277] ============================= id=[209] ==
Q:  Review  (summary: "focus on high-leverage activities"):

[http://www.theeffectiveengineer.com/blog/most-important-lesson-ive-learned-in-my-professional-life][1]


  [1]: http://www.theeffectiveengineer.com/blog/most-important-lesson-ive-learned-in-my-professional-life
questiontag_set : []
datetime_added  =[2014-10-31 17:30:50.084495+00:00]
datetime_updated=[2014-10-31 17:30:50.084528+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1070] of [1277] ============================= id=[208] ==
Q:  Review:

[http://stackoverflow.com/questions/18591999/zmq-vs-redis-for-pub-sub-pattern][1]


  [1]: http://stackoverflow.com/questions/18591999/zmq-vs-redis-for-pub-sub-pattern
questiontag_set : []
datetime_added  =[2014-10-31 00:35:54.803713+00:00]
datetime_updated=[2014-10-31 00:35:54.803750+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1071] of [1277] ============================= id=[207] ==
Q:  Review this: "Interview with Michael Lopp: how to lead developers" by Joe Stump at Sprint.ly

[https://sprint.ly/blog/rands/][1]


  [1]: https://sprint.ly/blog/rands/
questiontag_set : ['software engineering culture']
datetime_added  =[2014-10-30 23:21:41.099093+00:00]
datetime_updated=[2014-10-30 23:21:41.099125+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1072] of [1277] ============================= id=[206] ==
Q:  On Linux, how do you see what ports are open?
questiontag_set : ['unix']
datetime_added  =[2014-10-29 21:19:19.749194+00:00]
datetime_updated=[2014-10-29 21:19:19.749236+00:00]
---------------------------------------------- id=[161] --
A:
    netstat -lntu


=== [1073] of [1277] ============================= id=[205] ==
Q:  How to see all configuration settings for Postgresql?
questiontag_set : ['postgresql']
datetime_added  =[2014-10-29 17:59:29.174129+00:00]
datetime_updated=[2014-10-29 17:59:29.174175+00:00]
---------------------------------------------- id=[160] --
A:
    show all;

=== [1074] of [1277] ============================= id=[204] ==
Q:  In git, how do you show which files have been staged (to be committed at next commit)?
questiontag_set : ['git']
datetime_added  =[2014-10-29 14:09:53.729211+00:00]
datetime_updated=[2014-10-29 14:09:53.729242+00:00]
---------------------------------------------- id=[159] --
A:
git diff --cached


=== [1075] of [1277] ============================= id=[203] ==
Q:  Review Postgresql's Multiversion Concurrency Control (MVCC): [http://www.postgresql.org/docs/9.2/static/mvcc-intro.html][1]


  [1]: http://www.postgresql.org/docs/9.2/static/mvcc-intro.html
questiontag_set : ['postgresql']
datetime_added  =[2014-10-28 14:38:30.946706+00:00]
datetime_updated=[2014-10-28 14:38:30.946740+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1076] of [1277] ============================= id=[202] ==
Q:  Review Postgresql's "Index Locking Considerations": [http://www.postgresql.org/docs/9.2/static/index-locking.html][1]


  [1]: http://www.postgresql.org/docs/9.2/static/index-locking.html
questiontag_set : ['postgresql']
datetime_added  =[2014-10-28 14:34:58.169033+00:00]
datetime_updated=[2014-10-28 14:34:58.169065+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1077] of [1277] ============================= id=[201] ==
Q:  Review the Postgresql ANALYZE command: [http://www.postgresql.org/docs/9.2/static/sql-analyze.html][1]


  [1]: http://www.postgresql.org/docs/9.2/static/sql-analyze.html
questiontag_set : ['postgresql']
datetime_added  =[2014-10-28 14:32:31.440161+00:00]
datetime_updated=[2014-10-28 14:32:31.440194+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1078] of [1277] ============================= id=[200] ==
Q:  Review the Postgresql CLUSTER command: [http://www.postgresql.org/docs/9.2/static/sql-cluster.html][1]  
Related: [http://dba.stackexchange.com/questions/46780/postgresql-difference-between-vacuum-full-and-cluster][2]


  [1]: http://www.postgresql.org/docs/9.2/static/sql-cluster.html
  [2]: http://dba.stackexchange.com/questions/46780/postgresql-difference-between-vacuum-full-and-cluster
questiontag_set : ['postgresql']
datetime_added  =[2014-10-28 14:22:23.177983+00:00]
datetime_updated=[2015-02-17 03:37:16.319209+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1079] of [1277] ============================= id=[199] ==
Q:  Review Twitter's architecture:  [http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html][1]


  [1]: http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html
questiontag_set : ['databases']
datetime_added  =[2014-10-27 22:40:47.999725+00:00]
datetime_updated=[2014-10-27 22:40:47.999756+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1080] of [1277] ============================= id=[198] ==
Q:  Review materialization:   [http://en.wikipedia.org/wiki/Materialized_view][1]


  [1]: http://en.wikipedia.org/wiki/Materialized_view
questiontag_set : ['databases']
datetime_added  =[2014-10-27 22:39:45.324055+00:00]
datetime_updated=[2014-10-27 22:39:45.324088+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1081] of [1277] ============================= id=[197] ==
Q:  Review this page: 

[http://www.quora.com/What-makes-a-good-engineering-culture][1]


  [1]: http://www.quora.com/What-makes-a-good-engineering-culture
questiontag_set : ['software engineering culture']
datetime_added  =[2014-10-27 18:25:19.988647+00:00]
datetime_updated=[2014-10-27 18:25:19.988679+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1082] of [1277] ============================= id=[196] ==
Q:  In bash, how do you  make stderr go to /dev/null ?
questiontag_set : ['bash']
datetime_added  =[2014-10-25 15:16:08.548156+00:00]
datetime_updated=[2014-10-25 15:16:08.548197+00:00]
---------------------------------------------- id=[157] --
A:
    grep foo foo 2> /dev/null

=== [1083] of [1277] ============================= id=[195] ==
Q:  In git, how do you list all files committed to the repo?
questiontag_set : ['git']
datetime_added  =[2014-10-25 04:26:51.654003+00:00]
datetime_updated=[2014-10-25 04:26:51.654034+00:00]
---------------------------------------------- id=[156] --
A:
    git ls-files
-or-

    git ls-tree --full-tree --name-only -r HEAD

=== [1084] of [1277] ============================= id=[194] ==
Q:  In SQL, what is a simpler alternative to saying:  
    my_column >= x AND my_column <= y
questiontag_set : ['sql', 'postgresql']
datetime_added  =[2014-10-25 04:09:23.932400+00:00]
datetime_updated=[2014-10-26 17:28:58.796885+00:00]
---------------------------------------------- id=[158] --
A:
my_column BETWEEN x AND y

=== [1085] of [1277] ============================= id=[193] ==
Q:  How do you set a variable in a Postgres SQL script?
questiontag_set : ['sql', 'postgresql']
datetime_added  =[2014-10-25 04:05:33.358368+00:00]
datetime_updated=[2014-10-25 04:05:33.358399+00:00]
---------------------------------------------- id=[155] --
A:
\set my_date '2014-10-24 10:13:14'  
SELECT * FROM my_table WHERE date < :'my_date'


=== [1086] of [1277] ============================= id=[192] ==
Q:  How do you do a join on two tables and find all records in tableA that are NOT in tableB?
questiontag_set : ['sql']
datetime_added  =[2014-10-25 00:56:37.209060+00:00]
datetime_updated=[2014-10-25 00:56:48.306582+00:00]
---------------------------------------------- id=[154] --
A:
SELECT tableA.key FROM tableA
    LEFT JOIN tableB ON tableA.key=tableB.key
    WHERE tableB.key IS NULL;

[http://stackoverflow.com/questions/38549/difference-between-inner-and-outer-joins/16598900#16598900][1]


  [1]: http://stackoverflow.com/questions/38549/difference-between-inner-and-outer-joins/16598900#16598900

=== [1087] of [1277] ============================= id=[191] ==
Q:  How to create a gist from a file?
questiontag_set : ['git']
datetime_added  =[2014-10-25 00:50:33.349699+00:00]
datetime_updated=[2014-10-25 00:50:33.349731+00:00]
---------------------------------------------- id=[153] --
A:
    brew install gist
    gist -p myfile 
(note that `-p` makes it private)

Use the "gist" command, which comes in OSX from `brew install gist` and is the ruby `gist` project by  "defunkt":

[http://defunkt.io/gist/][1]

[https://github.com/defunkt/gist][2]


  [1]: http://defunkt.io/gist/
  [2]: https://github.com/defunkt/gist

=== [1088] of [1277] ============================= id=[190] ==
Q:  Review diagram of SQL JOINS:

[http://stackoverflow.com/a/16598900/875915][1]


  [1]: http://stackoverflow.com/a/16598900/875915
questiontag_set : ['sql']
datetime_added  =[2014-10-24 21:53:09.991676+00:00]
datetime_updated=[2014-10-25 00:56:31.216708+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1089] of [1277] ============================= id=[189] ==
Q:  Review "Publish-Subscribe Pattern": [http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern][1]


  [1]: http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern
questiontag_set : ['software patterns']
datetime_added  =[2014-10-24 20:59:21.802370+00:00]
datetime_updated=[2014-10-24 20:59:21.802403+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1090] of [1277] ============================= id=[188] ==
Q:  Review Apache Cassandra:

[http://en.wikipedia.org/wiki/Apache_Cassandra][1]


  [1]: http://en.wikipedia.org/wiki/Apache_Cassandra
questiontag_set : ['cassandra']
datetime_added  =[2014-10-24 17:51:34.627556+00:00]
datetime_updated=[2014-10-24 17:51:34.627587+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1091] of [1277] ============================= id=[187] ==
Q:  Review consistent hashing:

[http://en.wikipedia.org/wiki/Consistent_hashing][1]


  [1]: http://en.wikipedia.org/wiki/Consistent_hashing
questiontag_set : ['computer science']
datetime_added  =[2014-10-24 17:34:16.985845+00:00]
datetime_updated=[2014-10-24 17:34:16.985876+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1092] of [1277] ============================= id=[186] ==
Q:  Review OAuth:

[http://en.wikipedia.org/wiki/OAuth][1]


  [1]: http://en.wikipedia.org/wiki/OAuth
questiontag_set : []
datetime_added  =[2014-10-24 16:22:30.229409+00:00]
datetime_updated=[2014-10-24 16:22:30.229444+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1093] of [1277] ============================= id=[185] ==
Q:  Review Single  sign-on: 
[http://en.wikipedia.org/wiki/Single_sign-on][1]


  [1]: http://en.wikipedia.org/wiki/Single_sign-on
questiontag_set : []
datetime_added  =[2014-10-24 16:21:54.301468+00:00]
datetime_updated=[2014-10-24 16:21:54.301537+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1094] of [1277] ============================= id=[184] ==
Q:  Does `git commit -a` add new files, or does it only commit modifications to existing files?
questiontag_set : ['git']
datetime_added  =[2014-10-24 15:00:54.942757+00:00]
datetime_updated=[2014-10-24 15:00:54.942798+00:00]
---------------------------------------------- id=[152] --
A:
It only commits existing files that are modified.

To add all new files: `git add -A` followed by `git commit -a`


=== [1095] of [1277] ============================= id=[183] ==
Q:  Review CAP theorem:
  [http://en.wikipedia.org/wiki/CAP_theorem][1]


  [1]: http://en.wikipedia.org/wiki/CAP_theorem
questiontag_set : ['databases', 'nosetests']
datetime_added  =[2014-10-23 13:50:42.041037+00:00]
datetime_updated=[2014-10-23 13:50:42.041080+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1096] of [1277] ============================= id=[182] ==
Q:  What are the 3 main levels/categories of open source licensing?
questiontag_set : ['open source']
datetime_added  =[2014-10-23 13:50:17.112079+00:00]
datetime_updated=[2014-10-23 13:50:17.112119+00:00]
---------------------------------------------- id=[151] --
A:
Level 1 (permissive): I don't want others to use my work without giving me credit: These licenses (Apache License, BSD, MIT) say "You can use, modify and redistribute my code in your product, but give me credit". This allows using your work in commercial, proprietary closed-source software.

Level 2: I don't want others to make improvements based on my work and not give them back: These licenses (Mozilla Public License, CDDL, LGPL) say "You can use, modify and redistribute my code in your product but give me the source for any fixes you make to it." This allows using your work in commercial, proprietary closed-source software, but any improvements they make to "your part" will always be available to everyone for free.

Level 3 (copyleft): I don't want others to use my work in non-free software: These licenses (GPL, mainly) say: "You can use, modify and redistribute my code in your product but release your entire product's source code." This allows others to make improvements to your work, whether for commercial or whatever reasons, but any improvements they make and distribute will always be available to everyone in source form for free. It does not prevent them from selling the software (on CDs, say) or making money out of supporting it.

[http://stackoverflow.com/questions/3485750/preventing-source-code-from-being-used-for-commercial-purposes][1]

Here's what you're telling your downstream users when you pick one of the three levels of open source licenses:

- Level 1: Gimme credit (APL, BSD, MIT)
You can use, modify and redistribute my code in your product but give me credit (actually, modern BSD doesn't even require credit).
- Level 2: Gimme fixes (MPL, CDDL, LGPL)
You can use, modify and redistribute my code in your product but give me the source for any fixes you make to it. 
- Level 3: Gimme it ALL! (GPL)
You can use, modify and redistribute my code in your product but give me your entire product's  source code.


[http://rollerweblogger.org/roller/entry/gimme_credit_gimme_fixes_gimme][2]


  [1]: http://stackoverflow.com/questions/3485750/preventing-source-code-from-being-used-for-commercial-purposes
  [2]: http://rollerweblogger.org/roller/entry/gimme_credit_gimme_fixes_gimme

=== [1097] of [1277] ============================= id=[181] ==
Q:  Review this page:  So what's wrong with 1975 programming ?


[https://www.varnish-cache.org/trac/wiki/ArchitectNotes][1]


  [1]: https://www.varnish-cache.org/trac/wiki/ArchitectNotes
questiontag_set : ['computer science']
datetime_added  =[2014-10-23 01:44:33.804320+00:00]
datetime_updated=[2014-10-23 01:44:33.804350+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1098] of [1277] ============================= id=[180] ==
Q:  In Postgresql, how do you find the process id's for currently-running processes so that you can kill them?
questiontag_set : ['postgresql']
datetime_added  =[2014-10-21 16:07:28.838126+00:00]
datetime_updated=[2014-10-21 16:07:28.838158+00:00]
---------------------------------------------- id=[150] --
A:
    % psql --command='select * from pg_stat_activity;'
      datid  | datname | procpid | usesysid | usename | application_name | client_addr | client_hostname | client_port |         backend_start         |          xact_start           |          query_start          | waiting |          current_query
    ---------+---------+---------+----------+---------+------------------+-------------+-----------------+-------------+-------------------------------+-------------------------------+-------------------------------+---------+---------------------------------
     1759055 | rob     |   84026 |       10 | rob     | psql             |             |                 |          -1 | 2014-10-21 09:06:45.009024-07 | 2014-10-21 09:06:45.012561-07 | 2014-10-21 09:06:45.012561-07 | f       | select * from pg_stat_activity;
    (1 row)

The `procpid` is the process PID for the associated query.  `kill -9 {procpid}` to kill that process.

Alternatively, you can use:

    select pg_cancel_backend({prodpid});
    -- e.g.,
    select pg_cancel_backend(84026);

 or 

    select pg_terminate_backend({procpid});
    -- e.g.,
    select pg_terminate_backend(84026);

=== [1099] of [1277] ============================= id=[179] ==
Q:  What is the timestamp value that "redbike statuses" outputs?
questiontag_set : ['redbike']
datetime_added  =[2014-10-21 00:19:30.658221+00:00]
datetime_updated=[2014-10-21 00:19:30.658262+00:00]
---------------------------------------------- id=[149] --
A:
It is the timestamp of the next time that it is scheduled to run.

=== [1100] of [1277] ============================= id=[178] ==
Q:  How do you see where the postgresql db data files are located?
questiontag_set : ['postgresql']
datetime_added  =[2014-10-20 23:20:51.704662+00:00]
datetime_updated=[2014-10-20 23:20:51.704725+00:00]
---------------------------------------------- id=[148] --
A:
    SHOW data_directory;



=== [1101] of [1277] ============================= id=[177] ==
Q:  Beautifully-designed website: [http://www.soylent.me/][1]


  [1]: http://www.soylent.me/
questiontag_set : ['websites', 'website design']
datetime_added  =[2014-10-20 02:16:14.468178+00:00]
datetime_updated=[2014-10-20 02:16:14.468214+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1102] of [1277] ============================= id=[176] ==
Q:  Review this page:

"Advanced Use of Python Decorators and Metaclasses" by Leonard Giordani

[http://lgiordani.com/blog/2014/10/14/decorators-and-metaclasses/?utm_source=Python+Weekly+Newsletter&utm_campaign=9117ced2ad-Python_Weekly_Issue_161_October_16_2014&utm_medium=email&utm_term=0_9e26887fc5-9117ced2ad-312682901][1]


  [1]: http://lgiordani.com/blog/2014/10/14/decorators-and-metaclasses/?utm_source=Python%20Weekly%20Newsletter&utm_campaign=9117ced2ad-Python_Weekly_Issue_161_October_16_2014&utm_medium=email&utm_term=0_9e26887fc5-9117ced2ad-312682901
questiontag_set : ['python', 'metaclasses', 'decorators']
datetime_added  =[2014-10-19 14:05:02.546579+00:00]
datetime_updated=[2014-10-19 14:05:02.546609+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1103] of [1277] ============================= id=[175] ==
Q:  In vim, how to you navigate through the jump list (viewable with `:jumps`)?
questiontag_set : ['vim']
datetime_added  =[2014-10-18 14:11:20.119465+00:00]
datetime_updated=[2014-10-18 14:11:20.119512+00:00]
---------------------------------------------- id=[147] --
A:
While in command mode (NOT while viewing the `:jumps`), press `Ctrl-i` and `Ctrl-o` to navigate forward and backwards through the jumps.  I find this could be *extremely* useful!

=== [1104] of [1277] ============================= id=[174] ==
Q:  Review this page of Piotr Wozniak's (SuperMemo inventor) 20 rules of formulating knowledge: 
[http://www.supermemo.com/articles/20rules.htm][1]


  [1]: http://www.supermemo.com/articles/20rules.htm
questiontag_set : ['learning', 'memory']
datetime_added  =[2014-10-18 13:24:30.994111+00:00]
datetime_updated=[2014-10-18 13:24:30.994162+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1105] of [1277] ============================= id=[173] ==
Q:  Review this web page of conversation starters: [http://www.conversationstarters.com/101.htm][1]


  [1]: http://www.conversationstarters.com/101.htm
questiontag_set : ['websites']
datetime_added  =[2014-10-18 12:41:06.089696+00:00]
datetime_updated=[2014-10-18 12:41:06.089729+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1106] of [1277] ============================= id=[172] ==
Q:  Review Derek Sivers' blog post about using spaced repetition for learning programming languages:

[http://sivers.org/srs][1]


  [1]: http://sivers.org/srs
questiontag_set : ['learning']
datetime_added  =[2014-10-18 12:24:04.336835+00:00]
datetime_updated=[2014-10-18 12:24:04.336868+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1107] of [1277] ============================= id=[171] ==
Q:  Visit this page:  [http://www.quora.com/What-are-the-best-websites-a-programmer-should-visit][1]


  [1]: http://www.quora.com/What-are-the-best-websites-a-programmer-should-visit
questiontag_set : ['websites']
datetime_added  =[2014-10-17 14:08:19.438858+00:00]
datetime_updated=[2014-10-17 14:08:19.438901+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1108] of [1277] ============================= id=[170] ==
Q:  Postgres max_connections

max_connections

max_connections sets exactly that: the maximum number of client connections allowed. This is very important to some of the below parameters (particularly work_mem) because there are some memory resources that are or can be allocated on a per-client basis, so the maximum number of clients suggests the maximum possible memory use. Generally, PostgreSQL on good hardware can support a few hundred connections. If you want to have thousands instead, you should consider using connection pooling software to reduce the connection overhead.

[https://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server][1]


  [1]: https://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server
questiontag_set : ['postgresql']
datetime_added  =[2014-10-14 22:11:04.808000+00:00]
datetime_updated=[2014-10-14 22:11:04.808032+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1109] of [1277] ============================= id=[169] ==
Q:  Postgresql connection pooling programs: [http://wiki.postgresql.org/wiki/Replication,_Clustering,_and_Connection_Pooling#Connection_Pooling_and_Acceleration][1]


  [1]: http://wiki.postgresql.org/wiki/Replication,_Clustering,_and_Connection_Pooling#Connection_Pooling_and_Acceleration
questiontag_set : ['postgresql']
datetime_added  =[2014-10-14 21:54:03.527551+00:00]
datetime_updated=[2014-10-14 21:54:03.527583+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1110] of [1277] ============================= id=[168] ==
Q:  Postgresql -- optimum number of database connections

[http://wiki.postgresql.org/wiki/Number_Of_Database_Connections][1]


  [1]: http://wiki.postgresql.org/wiki/Number_Of_Database_Connections
questiontag_set : ['postgresql']
datetime_added  =[2014-10-14 21:50:36.496734+00:00]
datetime_updated=[2014-10-14 21:50:36.496768+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1111] of [1277] ============================= id=[167] ==
Q:  What are the advantages of pgbouncer?
questiontag_set : ['postgresql', 'django']
datetime_added  =[2014-10-14 21:46:50.013775+00:00]
datetime_updated=[2014-10-14 21:46:50.013807+00:00]
---------------------------------------------- id=[146] --
A:
If you are doing many quick database connections to Postgres, then pgbouncer can speed things up by keeping postgres connections open and using existing connections and not have the overhead of creating new ones (e.g., Django opens a postgres connection for each web request, so pgbouncer can sometimes speed things up 2x).



=== [1112] of [1277] ============================= id=[166] ==
Q:  In git, how do you show the current commit hash, author, date, and log message, but not the diff?
questiontag_set : ['git']
datetime_added  =[2014-10-14 21:04:14.862009+00:00]
datetime_updated=[2014-10-14 21:04:14.862041+00:00]
---------------------------------------------- id=[145] --
A:
    git show --no-patch


=== [1113] of [1277] ============================= id=[165] ==
Q:  In Python, how do you "exit" a virtualenv that you activated?
questiontag_set : ['python']
datetime_added  =[2014-10-14 18:48:35.971367+00:00]
datetime_updated=[2015-09-08 04:25:23.472603+00:00]
---------------------------------------------- id=[144] --
A:
    $ deactivate

=== [1114] of [1277] ============================= id=[164] ==
Q:  What is a "higher-order function"?
questiontag_set : ['software engineering']
datetime_added  =[2014-10-14 18:39:47.096866+00:00]
datetime_updated=[2014-10-14 18:39:47.096900+00:00]
---------------------------------------------- id=[143] --
A:
[https://en.wikipedia.org/wiki/Higher-order_function][1]

Summary:
A function that does at least one of the following:

- takes one or more functions as an input
- outputs a function
All other functions are first-order functions. 

The map function, found in many functional programming languages, is one example of a higher-order function. It takes as arguments a function f and a list of elements, and as the result, returns a new list with f applied to each element from the list. 

  [1]: https://en.wikipedia.org/wiki/Higher-order_function

=== [1115] of [1277] ============================= id=[163] ==
Q:  Software Engineering people

Robert "Uncle Bob" C Martin
Martin Fowler
Grady Booch
questiontag_set : ['software engineering']
datetime_added  =[2014-10-14 17:25:56.058368+00:00]
datetime_updated=[2014-10-14 17:25:56.058400+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1116] of [1277] ============================= id=[162] ==
Q:  What is "dependency injection"?
questiontag_set : ['computer science']
datetime_added  =[2014-10-14 17:14:09.649169+00:00]
datetime_updated=[2014-10-14 17:14:09.649201+00:00]
---------------------------------------------- id=[142] --
A:
[https://en.wikipedia.org/wiki/Dependency_injection][1]

Summary:

An injection is the passing of a dependency (a service) to a dependent object (a client). The service is made part of the client's state. Passing the service to the client, rather than allowing a client to build or find the service, is the fundamental requirement of the pattern.

The pattern separates the creation of a client's dependencies from its own behavior, which allows program designs to be loosely coupled and to follow the dependency inversion and single responsibility principles. It directly contrasts the service locator pattern, which allows clients to know about the system they use to find dependencies

  [1]: https://en.wikipedia.org/wiki/Dependency_injection

=== [1117] of [1277] ============================= id=[161] ==
Q:  What is "inversion of control" in software engineering?
questiontag_set : ['computer science']
datetime_added  =[2014-10-14 16:49:11.487240+00:00]
datetime_updated=[2014-10-14 16:49:11.487271+00:00]
---------------------------------------------- id=[141] --
A:
My summary: "inversion of control" reverses the control, so that the reusable code calls the custom code, rather than the custom code calling the reusable code.  The question is, "who has the control?"  In early applications, the application had the control (e.g., DOS).  But with UI frameworks, the UI has the control, so control is inverted.

["Basically, anything with an event loop, callbacks, or execute triggers is 'inversion of control'."   http://stackoverflow.com/questions/3058/what-is-inversion-of-control][1]


In software engineering, inversion of control (IoC) describes a design in which custom-written portions of a computer program receive the flow of control from a generic, reusable library. A software architecture with this design inverts control as compared to traditional procedural programming: in traditional programming, the custom code that expresses the purpose of the program calls into reusable libraries to take care of generic tasks, but with inversion of control, it is the reusable code that calls into the custom, or task-specific, code.

Inversion of control is used to increase modularity of the program and make it extensible,[1] and has applications in object-oriented programming and other programming paradigms. The term was popularized by Robert C. Martin and Martin Fowler. The term is related to but different from the dependency inversion principle, which concerns itself with decoupling dependencies between high-level and low-level layers through shared abstractions.

**1 Overview**

As an example, with traditional programming the main function of an application might make function calls into a menu library to display a list of available commands and query the user to select one.[2] The library thus would return the chosen option as the value of the function call, and the main function uses this value to execute the associated command. This style was common in text based interfaces. For example, an email client may show a screen with commands to load new mails, answer the current mail, start a new mail, etc., and the program execution would block until the user presses a key to select a command.

With inversion of control, on the other hand, the program would be written using a software framework that knows common behavioral and graphical elements, such as windowing systems, menus, controlling the mouse, and so on. The custom code "fills in the blanks" for the framework, such as supplying a table of menu items and registering a code subroutine for each item, but it is the framework that monitors the user's actions and invokes the subroutine when a menu item is selected. In the mail client example, the framework could follow both the keyboard and mouse inputs and call the command invoked by the user by either means, and at the same time monitor the network interface to find out if new messages arrive and refresh the screen when some network activity is detected. The same framework could be used as the skeleton for a spreadsheet program or a text editor. Conversely, the framework knows nothing about Web browsers, spreadsheets or text editors; implementing their functionality takes custom code.
Inversion of control carries the strong connotation that the reusable code and the problem-specific code are developed independently even though they operate together in an application. Software frameworks, callbacks, schedulers, event loops and dependency injection are examples of design patterns that follow the inversion of control principle, although the term is most commonly used in the context of object-oriented programming.

Inversion of control serves the following design purposes:

- To decouple the execution of a task from implementation.
- To focus a module on the task it is designed for.
- To free modules from assumptions about how other systems do what they do and instead rely on contracts.
- To prevent side effects when replacing a module.

Inversion of control is sometimes facetiously referred to as the "Hollywood Principle: Don't call us, we'll call you".

**Background**

Inversion of control is not a new term in computer science. Martin Fowler traces the etymology of the phrase back to 1988.[3] Dependency injection is a specific type of IoC using contextualized lookup.[2] The use of a service locator is considered to be the same design pattern. In an article by Loek Bergman,[4] it is presented as an architectural principle.

In an article by Robert C. Martin,[5] the dependency inversion principle and abstraction by layering come together. His reason to use the term "inversion" is in comparison with traditional software development methods. He describes the uncoupling of services by the abstraction of layers when he is talking about dependency inversion. The principle is used to find out where system borders are in the design of the abstraction layers.

**3 Description**

In traditional programming, the flow of the business logic is determined by objects that are statically bound to one another. With inversion of control, the flow depends on the object graph that is built up during program execution. Such a dynamic flow is made possible by object interactions being defined through abstractions. This run-time binding is achieved by mechanisms such as dependency injection or a service locator. In IoC the code could also be linked statically during compilation, but finding the code to execute by reading its description from external configuration instead of with a direct reference in the code itself.

In dependency injection, a dependent object or module is coupled to the object it needs at run time. Which particular object will satisfy the dependency during program execution typically cannot be known at compile time using static analysis. While described in terms of object interaction here, the principle can apply to other programming methodologies besides object-oriented programming.

In order for the running program to bind objects to one another, the objects must possess compatible interfaces. For example, class A may delegate behavior to interface I which is implemented by class B; the program instantiates A and B, and then injects B to A.

**4 Implementation techniques**

In object-oriented programming, there are several basic techniques to implement inversion of control. These are:

- Using a factory pattern
- Using a service locator pattern
- Using a dependency injection, for example
  - A constructor injection
  - A parameter injection
  - A setter injection
  - An interface injection
- Using a contextualized lookup
- Using template method design pattern
- Using strategy design pattern

In an original article by Martin Fowler,[6] the first three different techniques are discussed. In a description about inversion of control types,[7] the last one is mentioned. Often the contextualized lookup will be accomplished using a service locator.

More important than the applied technique, however, is the optimization of the purposes.


**5 Examples**

    public class ServerFacade {
       public <K, V> V respondToRequest(K request) {
          if (businessLayer.validateRequest(request)) {
             DAO.getData(request);
             return Aspect.convertData(request);
          }
          return null;
       }
    }

This basic outline in Java gives an example of code following the IoC methodology. It is important, however, that in the ServerFacade a lot of assumptions are made about the data returned by the data access object (DAO).

Although all these assumptions might be valid at some time, they couple the implementation of the ServerFacade to the DAO implementation. Designing the application in the manner of inversion of control would hand over the control completely to the DAO object. The code would then become

    public class ServerFacade {
       public <K, V> V respondToRequest(K request, DAO dao) {
          return dao.getData(request);
       }
    }

The example shows that the way the method respondToRequest is constructed determines if IoC is used. It is the way that parameters are used that define IoC. This resembles the message-passing style that some object-oriented programming languages use.

[https://en.wikipedia.org/wiki/Inversion_of_control][2]


  [1]: http://stackoverflow.com/questions/3058/what-is-inversion-of-control
  [2]: https://en.wikipedia.org/wiki/Inversion_of_control

=== [1118] of [1277] ============================= id=[160] ==
Q:  In SQLAlchemy, what is the difference between "lazy loading" and "eager loading"?
questiontag_set : ['sqlalchemy']
datetime_added  =[2014-10-14 15:46:02.981507+00:00]
datetime_updated=[2014-10-14 15:46:02.981539+00:00]
---------------------------------------------- id=[140] --
A:
**lazy loading**
In object relational mapping, a “lazy load” refers to an attribute that does not contain its database-side value for some period of time, typically when the object is first loaded. Instead, the attribute receives a memoization that causes it to go out to the database and load its data when it’s first used. Using this pattern, the complexity and time spent within object fetches can sometimes be reduced, in that attributes for related tables don’t need to be addressed immediately.

**N plus one problem**
The N plus one problem is a common side effect of the lazy load pattern, whereby an application wishes to iterate through a related attribute or collection on each member of a result set of objects, where that attribute or collection is set to be loaded via the lazy load pattern. The net result is that a SELECT statement is emitted to load the initial result set of parent objects; then, as the application iterates through each member, an additional SELECT statement is emitted for each member in order to load the related attribute or collection for that member. The end result is that for a result set of N parent objects, there will be N + 1 SELECT statements emitted.

The N plus one problem is alleviated using eager loading.

[http://docs.sqlalchemy.org/en/latest/glossary.html#term-lazy-loading][1]

**Eager Loading**

Recall earlier that we illustrated a lazy loading operation, when we accessed the User.addresses collection of a User and SQL was emitted. If you want to reduce the number of queries (dramatically, in many cases), we can apply an eager load to the query operation. SQLAlchemy offers three types of eager loading, two of which are automatic, and a third which involves custom criterion. All three are usually invoked via functions known as query options which give additional instructions to the Query on how we would like various attributes to be loaded, via the Query.options() method.

**Subquery Load**

**Joined Load**

**Explicit Join + Eagerload**


[http://docs.sqlalchemy.org/en/latest/orm/tutorial.html][2]

By default, all inter-object relationships are lazy loading. The scalar or collection attribute associated with a relationship() contains a trigger which fires the first time the attribute is accessed. This trigger, in all but one case, issues a SQL call at the point of access in order to load the related object or objects.



[http://docs.sqlalchemy.org/en/latest/orm/loading.html][3]


  [1]: http://docs.sqlalchemy.org/en/latest/glossary.html#term-lazy-loading
  [2]: http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
  [3]: http://docs.sqlalchemy.org/en/latest/orm/loading.html

=== [1119] of [1277] ============================= id=[159] ==
Q:  What is a "write-through" cache?
questiontag_set : ['computer science']
datetime_added  =[2014-10-13 21:56:02.490884+00:00]
datetime_updated=[2014-10-13 21:56:02.490921+00:00]
---------------------------------------------- id=[139] --
A:
When a system writes a datum to cache, it must at some point write that datum to backing store as well. The timing of this write is controlled by what is known as the write policy.

There are two basic writing approaches:

- Write-through: write is done synchronously both to the cache and to the backing store.
- Write-back (or write-behind): initially, writing is done only to the cache. The write to the backing store is postponed until the cache blocks containing the data are about to be modified/replaced by new content.

[https://en.wikipedia.org/wiki/Cache_(computing)][1]


  [1]: https://en.wikipedia.org/wiki/Cache_%28computing%29

=== [1120] of [1277] ============================= id=[158] ==
Q:  What are 5 things to consider when designing with Redis?
questiontag_set : ['redis']
datetime_added  =[2014-10-13 21:39:27.482937+00:00]
datetime_updated=[2015-02-15 15:31:57.693751+00:00]
---------------------------------------------- id=[138] --
A:
[http://www.quora.com/What-are-5-mistakes-to-avoid-when-using-Redis][1]


Here are a few things I'd suggest thinking about when you are considering using Redis:


1. Choose consistent ways to name and prefix your keys.  Manage your namespace.
1. Create a "registry" of key prefixes which maps each to your internal (perhaps wiki) documents for those application which "own" them.
1. For every class of data you put into your Redis infrastructure: design, implement and test the mechanisms for garbage collection and/or data migration to archival storage.
1. Design, implement and test a sharding (consistent hashing) library before you've invested much into your application deployment and ensure that you keep a registry of "shards" replicated on each server.
1. Isolate all your K/V store and related operations into a your own library/API or service and absolutely enforce the use of that API/service with an unrelenting and mercilessly iron hand



  [1]: http://www.quora.com/What-are-5-mistakes-to-avoid-when-using-Redis

=== [1121] of [1277] ============================= id=[157] ==
Q:  What is a monotonic function?
questiontag_set : []
datetime_added  =[2014-10-13 21:37:28.737222+00:00]
datetime_updated=[2014-10-13 21:37:28.737256+00:00]
---------------------------------------------- id=[137] --
A:
In mathematics, a monotonic function (or monotone function) is a function between ordered sets that preserves the given order. This concept first arose in calculus, and was later generalized to the more abstract setting of order theory.

In calculus, a function f defined on a subset of the real numbers with real values is called monotonic if it is either entirely nonincreasing or nondecreasing.

[https://en.wikipedia.org/wiki/Monotonic_function][1]


  [1]: https://en.wikipedia.org/wiki/Monotonic_function

=== [1122] of [1277] ============================= id=[156] ==
Q:  What is "consistent hashing"?
questiontag_set : ['computer science']
datetime_added  =[2014-10-13 21:20:22.896036+00:00]
datetime_updated=[2014-10-13 21:20:22.896066+00:00]
---------------------------------------------- id=[136] --
A:
Consistent hashing is a special kind of hashing such that when a hash table is resized and consistent hashing is used, only K/n keys need to be remapped on average, where K is the number of keys, and n is the number of slots. In contrast, in most traditional hash tables, a change in the number of array slots causes nearly all keys to be remapped.
Consistent hashing achieves the same goals as Rendezvous hashing (also called HRW Hashing). The two techniques use different algorithms, and were devised independently and contemporaneously.

**History**

Originally devised by Karger et al. at MIT for use in distributed caching, the idea has now been expanded to other areas also. An academic paper from 1997 introduced the term "consistent hashing" as a way of distributing requests among a changing population of Web servers. Each slot is then represented by a node in a distributed system. The addition (joins) and removal (leaves/failures) of nodes only requires K/n items to be re-shuffled when the number of slots/nodes change.[1]

Consistent hashing has also been used to reduce the impact of partial system failures in large Web applications as to allow for robust caches without incurring the system wide fallout of a failure.[2]

The consistent hashing concept also applies to the design of distributed hash tables (DHTs). DHTs use consistent hashing to partition a keyspace among a distributed set of nodes, and additionally provide an overlay network that connects nodes such that the node responsible for any key can be efficiently located.

Rendezvous hashing, designed at the same time as consistent hashing, achieves the same goals using the very different Highest Random Weight (HRW) algorithm.

Need for consistent hashing[edit]

While running collections of caching machines some limitations are experienced. A common way of load balancing n cache machines is to put object o in cache machine number \mbox{hash}(o) \mod n. But this will not work if a cache machine is added or removed because n changes and every object is hashed to a new location. This can be disastrous since the originating content servers are flooded with requests from the cache machines. Hence consistent hashing is needed to avoid swamping of servers.
Consistent hashing maps objects to the same cache machine, as far as possible. It means when a cache machine is added, it takes its share of objects from all the other cache machines and when it is removed, its objects are shared between the remaining machines.
The main idea behind the consistent hashing algorithm is to associate each cache with one or more hash value intervals where the interval boundaries are determined by calculating the hash of each cache identifier. (The hash function used to define the intervals does not have to be the same function used to hash the cached values. Only the range of the two functions need match.) If the cache is removed its interval is taken over by a cache with an adjacent interval. All the remaining caches are unchanged.

3 Technique[edit]

Consistent hashing is based on mapping each object to a point on the edge of a circle (or equivalently, mapping each object to a real angle). The system maps each available machine (or other storage bucket) to many pseudo-randomly distributed points on the edge of the same circle.
To find where an object should be placed, the system finds the location of that object's key on the edge of the circle; then walks around the circle until falling into the first bucket it encounters (or equivalently, the first available bucket with a higher angle). The result is that each bucket contains all the resources located between its point and the previous bucket point.
If a bucket becomes unavailable (for example because the computer it resides on is not reachable), then the angles it maps to will be removed. Requests for resources that would have mapped to each of those points now map to the next highest point. Since each bucket is associated with many pseudo-randomly distributed points, the resources that were held by that bucket will now map to many different buckets. The items that mapped to the lost bucket must be redistributed among the remaining ones, but values mapping to other buckets will still do so and do not need to be moved.
A similar process occurs when a bucket is added. By adding a bucket point, we make any resources between that and the next smaller angle map to the new bucket. These resources will no longer be associated with the previous bucket, and any value previously stored there will not be found by the selection method described above.
The portion of the keys associated with each bucket can be altered by altering the number of angles that bucket maps to.

4 Monotonic keys[edit]

If it is known that key values will always increase monotonically, an alternative approach to consistent hashing is possible.


Some known instances where consistent hashing is used are:

- Openstack's Object Storage Service Swift[3]
- Partitioning component of Amazon's storage system Dynamo[4]
- Data partitioning in Apache Cassandra[5]
- Akka's consistent hashing router[6]
- Riak, a distributed key-value database[7]
- GlusterFS, a network-attached storage file system[8]
- Skylable, an open-source distributed object-storage system [9]


[https://en.wikipedia.org/wiki/Consistent_hashing][1]


  [1]: https://en.wikipedia.org/wiki/Consistent_hashing

=== [1123] of [1277] ============================= id=[155] ==
Q:  How do I make the Chrome Debugger in Developer Tools reload javascript instead of using the cache?
questiontag_set : ['javascript']
datetime_added  =[2014-10-13 07:27:24.750726+00:00]
datetime_updated=[2014-10-13 07:27:24.750758+00:00]
---------------------------------------------- id=[135] --
A:
Disable the Chrome cache while developing:

1. Developer Tools > (click on the cog icon in upper right-hand corner) > General > Disable cache (while DevTools is open)

[http://stackoverflow.com/questions/7078953/how-to-force-chromes-script-debugger-to-reload-javascript][1]


  [1]: http://stackoverflow.com/questions/7078953/how-to-force-chromes-script-debugger-to-reload-javascript

=== [1124] of [1277] ============================= id=[154] ==
Q:  How do I publish an html page from a github repository?
questiontag_set : ['git', 'html']
datetime_added  =[2014-10-13 05:33:39.631380+00:00]
datetime_updated=[2014-10-13 05:33:39.631411+00:00]
---------------------------------------------- id=[134] --
A:
Use GitHub Pages (either the automatic generator, or via manual pages).

Per this: [https://pages.github.com/][2]  
first need to do this to set up the github pages for my account:

1. create a new repository {username}.github.io  
i.e., robbednark.github.io
1. clone the repository
1. Add index.html file:  
`echo "Rob Bednark robbednark.github.io" > index.html`
1. git add --all
1. git commit -m 'Initial commit'
1. git push origin master

Then, for a specific repository:

1. git clone {repo}
1. cd {repo}
1. git checkout --orphan gh-pages
1. git rm -fr .
1. echo "My GitHub Page: Rob Bednark" > index.html
1. git add index.html
1. git commit -a -m "Commit for first page"
1. git push origin gh-pages
1. view the page at: username.github.io/repositoryname  
e.g., [http://robbednark.github.io/misc_javascript][1]    
(not that it can take up to 10 minutes for the page to become visible)



[https://help.github.com/articles/creating-project-pages-manually/][3]


  [1]: http://robbednark.github.io/misc_javascript
  [2]: https://pages.github.com/
  [3]: https://help.github.com/articles/creating-project-pages-manually/

=== [1125] of [1277] ============================= id=[153] ==
Q:  What is "thread safety"?
questiontag_set : ['computer science']
datetime_added  =[2014-10-12 20:24:04.436534+00:00]
datetime_updated=[2014-10-12 20:24:04.436564+00:00]
---------------------------------------------- id=[133] --
A:
Thread safety is a computer programming concept applicable in the context of multi-threaded programs. A piece of code is thread-safe if it only manipulates shared data structures in a manner that guarantees safe execution by multiple threads at the same time. There are various strategies for making thread-safe data structures.

A key challenge in multi-threaded programming, thread safety was not a concern for most application developers until the 1990s when operating systems began to expose multiple threads for code execution. Today, a program may execute code on several threads simultaneously in a shared address space where each of those threads has access to virtually all of the memory of every other thread. Thread safety is a property that allows code to run in multi-threaded environments by re-establishing some of the correspondences between the actual flow of control and the text of the program, by means of synchronization.

**1) Levels of thread safety**

Software libraries can provide certain thread-safety guarantees. For example, concurrent reads might be guaranteed to be thread-safe, but concurrent writes might not be. Whether or not a program using such a library is thread-safe depends on whether it uses the library in a manner consistent with those guarantees.

Different vendors use slightly different terminology for thread-safety:

- **Thread safe**: Implementation is guaranteed to be free of race conditions when accessed by multiple threads simultaneously.
- **Conditionally safe**: Different threads can access different objects simultaneously, and access to shared data is protected from race conditions.
- **Not thread safe**: Code should not be accessed simultaneously by different threads.

Thread safety guarantees usually also include design steps to prevent or limit the risk of different forms of deadlocks, as well as optimizations to maximize concurrent performance. However, deadlock-free guarantees can not always be given, since deadlocks can be caused by callbacks and violation of architectural layering independent of the library itself.

**2) Implementation approaches**

There are several approaches for avoiding race conditions to achieve thread safety. The first class of approaches focuses on avoiding shared state, and includes:

**Re-entrancy**  
Writing code in such a way that it can be partially executed by a thread, reexecuted by the same thread or simultaneously executed by another thread and still correctly complete the original execution. This requires the saving of state information in variables local to each execution, usually on a stack, instead of in static or global variables or other non-local state. All non-local state must be accessed through atomic operations and the data-structures must also be reentrant.  
**Thread-local storage**  
Variables are localized so that each thread has its own private copy. These variables retain their values across subroutine and other code boundaries, and are thread-safe since they are local to each thread, even though the code which accesses them might be executed simultaneously by another thread.

The second class of approaches are synchronization-related, and are used in situations where shared state cannot be avoided:

**Mutual exclusion**  
Access to shared data is serialized using mechanisms that ensure only one thread reads or writes to the shared data at any time. Incorporation of mutal exclusion needs to be well thought out, since improper usage can lead to side-effects like deadlocks, livelocks and resource starvation.  
**Atomic operations**  
Shared data are accessed by using atomic operations which cannot be interrupted by other threads. This usually requires using special machine language instructions, which might be available in a runtime library. Since the operations are atomic, the shared data are always kept in a valid state, no matter how other threads access it.  Atomic operations form the basis of many thread locking mechanisms, and are used to implement mutual exclusion primitives.  
**Immutable objects**  
The state of an object cannot be changed after construction. This implies both that only read-only data is shared and that inherent thread safety is attained. Mutable (non-const) operations can then be implemented in such a way that they create new objects instead of modifying existing ones. This approach is used by the string implementations in Java, C# and Python.

**3) Examples**

In the following piece of Java code, the function is thread-safe:


    class Counter {
        private int i = 0;
     
        public synchronized void inc() {
            i++;
        }
    }

In the following piece of C code, the function is thread-safe, but not reentrant:

    #include <pthread.h>
     
    int increment_counter ()
    {
    	static int counter = 0;
    	static pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
     
    	pthread_mutex_lock(&mutex);
     
    	// only allow one thread to increment at a time
    	++counter;
    	// store value before any other threads increment it further
    	int result = counter;	
     
    	pthread_mutex_unlock(&mutex);
     
    	return result;
    }

In the above, `increment_counter` can be called by different threads without any problem since a mutex is used to synchronize all access to the shared `counter` variable. But if the function is used in a reentrant interrupt handler and a second interrupt arises inside the function, the second routine will hang forever. As interrupt servicing can disable other interrupts, the whole system could suffer.

The same function can be implemented to be both thread-safe and reentrant using the lock-free atomics in C++11:

    #include <atomic>
     
    int increment_counter ()
    {
    	static std::atomic<int> counter(0);
     
    	// increment is guaranteed to be done atomically
    	int result = ++counter;
     
    	return result;
    }

**4) See also**

- Concurrency control
- Exception safety
- Priority inversion
- ThreadSafe



=== [1126] of [1277] ============================= id=[152] ==
Q:  What are some criticisms of software design patterns?
questiontag_set : ['software design']
datetime_added  =[2014-10-10 21:34:29.941653+00:00]
datetime_updated=[2014-10-10 21:34:29.941684+00:00]
---------------------------------------------- id=[132] --
A:
The design patterns may just be a sign of some missing features of a given programming language (Java or C++ for instance). Peter Norvig demonstrates that 16 out of the 23 patterns in the Design Patterns book (that is primarily focused on C++) are simplified or eliminated (via direct language support) in Lisp or Dylan. Related observations were made by Hannemann and Kiczales who implemented several of the 23 design patterns using an aspect-oriented programming language (AspectJ) and showed that code-level dependencies were removed from the implementations of 17 of the 23 design patterns and that aspect-oriented programming could simplify the implementations of design patterns. 

See also Paul Graham's essay "Revenge of the Nerds", in which he says:

> For example, in the OO world you hear a good deal about "patterns". I
> wonder if these patterns are not sometimes evidence of case (c), the
> human compiler, at work. When I see patterns in my programs, I
> consider it a sign of trouble. The shape of a program should reflect
> only the problem it needs to solve. Any other regularity in the code
> is a sign, to me at least, that I'm using abstractions that aren't
> powerful enough-- often that I'm generating by hand the expansions of
> some macro that I need to write.  [http://www.paulgraham.com/icad.html][1]

[https://en.wikipedia.org/wiki/Software_design_pattern][2]


  [1]: http://www.paulgraham.com/icad.html
  [2]: https://en.wikipedia.org/wiki/Software_design_pattern

=== [1127] of [1277] ============================= id=[151] ==
Q:  What is "functional decomposition" (in software design)?
questiontag_set : ['software design']
datetime_added  =[2014-10-10 21:25:01.205528+00:00]
datetime_updated=[2014-10-10 21:25:01.205560+00:00]
---------------------------------------------- id=[131] --
A:
Functional decomposition refers broadly to the process of resolving a functional relationship into its constituent parts in such a way that the original function can be reconstructed (i.e., recomposed) from those parts by function composition. In general, this process of decomposition is undertaken either for the purpose of gaining insight into the identity of the constituent components (which may reflect individual physical processes of interest, for example), or for the purpose of obtaining a compressed representation of the global function, a task which is feasible only when the constituent processes possess a certain level of modularity (i.e., independence or non-interaction). Interactions between the components are critical to the function of the collection. 

**Software architecture**

Functional Decomposition is a design method intending to produce a non-implementation, architectural description of a computer program. Rather than conjecturing Objects and adding methods to them (OOP), with each Object intending to capture some aspect of program, the software architect first establishes a series of functions and types that capture the main processing problem of the computer program, then derives modules and types from this activity.

Function Decomposition arguably yields insights about re-usability, such as if during the course of analysis, two functions produce the same type, it is likely that a common function/cross-cutting concern resides in both. To contrast, in OOP, it is a common practice to conjecture Modules or stateful Objects (not the same as object in the example, that's a type) prior to considering such a decomposition. This arguably results in costly refactoring later. FD mitigates that risk to some extent. Further, arguably, what separates FD from other design methods- is that it provides a concise high-level medium of architectural discourse that is end-to-end, revealing flaws in upstream requirements and beneficially exposing more design decisions in advance -that otherwise wouldn't be.

**Systems engineering**

Functional decomposition in systems engineering refers to the process of defining a system in functional terms, then defining lower-level functions and sequencing relationships from these higher level systems functions.[1] The basic idea is to try to divide a system in such a way that each block of a block diagram can be described without an "and" or "or" in the description.

This exercise forces each part of the system to have a pure function. When a system is designed as pure functions, they can be reused, or replaced. A usual side effect is that the interfaces between blocks become simple and generic. Since the interfaces usually become simple, it is easier to replace a pure function with a related, similar function.

For example, say that one needs to make a stereo system. One might functionally decompose this into speakers, amplifier, a tape deck and a front panel. Later, when a different model needs an audio CD, it can probably fit the same interfaces.

[https://en.wikipedia.org/wiki/Functional_decomposition][1]


  [1]: https://en.wikipedia.org/wiki/Functional_decomposition

=== [1128] of [1277] ============================= id=[150] ==
Q:  What is "top-down" and "bottom-up" in computer programming?
questiontag_set : ['computer science']
datetime_added  =[2014-10-10 21:17:36.209708+00:00]
datetime_updated=[2014-10-10 21:17:36.209744+00:00]
---------------------------------------------- id=[130] --
A:
**Software Development**

Top-down approaches emphasize planning and a complete understanding of the system. It is inherent that no coding can begin until a sufficient level of detail has been reached in the design of at least some part of the system. Top-down approaches are implemented by attaching the stubs in place of the module. This, however, delays testing of the ultimate functional units of a system until significant design is complete. Bottom-up emphasizes coding and early testing, which can begin as soon as the first module has been specified. This approach, however, runs the risk that modules may be coded without having a clear idea of how they link to other parts of the system, and that such linking may not be as easy as first thought. Re-usability of code is one of the main benefits of the bottom-up approach.

Modern software design approaches usually combine both top-down and bottom-up approaches. Although an understanding of the complete system is usually considered necessary for good design, leading theoretically to a top-down approach, most software projects attempt to make use of existing code to some degree. Pre-existing modules give designs a bottom-up flavor.

**Programming**

Top-down is a programming style, the mainstay of traditional procedural languages, in which design begins by specifying complex pieces and then dividing them into successively smaller pieces. The technique for writing a program using top–down methods is to write a main procedure that names all the major functions it will need. Later, the programming team looks at the requirements of each of those functions and the process is repeated. These compartmentalized sub-routines eventually will perform actions so simple they can be easily and concisely coded. When all the various sub-routines have been coded the program is ready for testing. By defining how the application comes together at a high level, lower level work can be self-contained. By defining how the lower level abstractions are expected to integrate into higher level ones, interfaces become clearly defined.

In a bottom-up approach, the individual base elements of the system are first specified in great detail. These elements are then linked together to form larger subsystems, which then in turn are linked, sometimes in many levels, until a complete top-level system is formed. This strategy often resembles a "seed" model, whereby the beginnings are small, but eventually grow in complexity and completeness. Object-oriented programming (OOP) is a paradigm that uses "objects" to design applications and computer programs. In mechanical engineering with software programs such as Pro/ENGINEER, Solidworks, and Autodesk Inventor users can design products as pieces not part of the whole and later add those pieces together to form assemblies like building with LEGO. Engineers call this piece part design.

This bottom-up approach has one weakness. Good intuition is necessary to decide the functionality that is to be provided by the module. If a system is to be built from existing system, this approach is more suitable as it starts from some existing modules.

[https://en.wikipedia.org/wiki/Top-down_and_bottom-up_design][1]


  [1]: https://en.wikipedia.org/wiki/Top-down_and_bottom-up_design

=== [1129] of [1277] ============================= id=[149] ==
Q:  What is "function composition" (in computer science)?
questiontag_set : ['computer science']
datetime_added  =[2014-10-10 21:13:49.587048+00:00]
datetime_updated=[2014-10-10 21:13:49.587082+00:00]
---------------------------------------------- id=[129] --
A:
In computer science, function composition (not to be confused with object composition) is an act or mechanism to combine simple functions to build more complicated ones. Like the usual composition of functions in mathematics, the result of each function is passed as the argument of the next, and the result of the last one is the result of the whole.

Programmers frequently apply functions to results of other functions, and almost all programming languages allow it. In some cases, the composition of functions is interesting as a function in its own right, to be used later. Such a function can always be defined but languages with first-class functions make it easier.

The ability to easily compose functions encourages factoring (breaking apart) functions for maintainability and code reuse. More generally, big systems might be built by composing whole programs.

Narrowly speaking, function composition applies to functions that operate on a finite amount of data, each step sequentially processing it before handing it to the next. Functions that operate on potentially infinite data (a stream or other codata), known as filters, and are instead connected in a pipeline, which is analogous to function composition and can execute concurrently.

[https://en.wikipedia.org/wiki/Function_composition_(computer_science)][1]


  [1]: https://en.wikipedia.org/wiki/Function_composition_%28computer_science%29

=== [1130] of [1277] ============================= id=[148] ==
Q:  What is the "Law of Demeter" in computer programming?
questiontag_set : ['computer science']
datetime_added  =[2014-10-10 21:03:12.520850+00:00]
datetime_updated=[2014-10-10 21:03:12.520881+00:00]
---------------------------------------------- id=[128] --
A:
The Law of Demeter (LoD) or principle of least knowledge is a design guideline for developing software, particularly object-oriented programs. In its general form, the LoD is a specific case of loose coupling. The guideline was proposed at Northeastern University towards the end of 1987, and can be succinctly summarized in one of the following ways:

- Each unit should have only limited knowledge about other units: only units "closely" related to the current unit.
- Each unit should only talk to its friends; don't talk to strangers.
- Only talk to your immediate friends.

The fundamental notion is that a given object should assume as little as possible about the structure or properties of anything else (including its subcomponents), in accordance with the principle of "information hiding".

It is so named for its origin in the Demeter Project, an adaptive programming and aspect-oriented programming effort. The project was named in honor of Demeter, “distribution-mother” and the Greek goddess of agriculture, to signify a bottom-up philosophy of programming which is also embodied in the law itself.


**Disadvantages**

Although the LoD increases the adaptiveness of a software system, it may also result in having to write many wrapper methods to propagate calls to components; in some cases, this can add noticeable time and space overhead.

At the method level, the LoD leads to narrow interfaces, giving access to only as much information as it needs to do its job, as each method needs to know about a small set of methods of closely related objects. On the other hand, at the class level, the LoD leads to wide (i.e. enlarged) interfaces, because the LoD requires introducing many auxiliary methods instead of digging directly into the object structures. One solution to the problem of enlarged class interfaces is the aspect-oriented approach, where the behavior of the method is specified as an aspect at a high level of abstraction. This is done by having an adaptive method that encapsulates the behaviour of an operation into a place, with which the scattering problem is solved. It also abstracts over the class structure that results in avoiding the tangling problem. The wide interfaces are managed through a language that specifies implementations. Both the traversal strategy and the adaptive visitor use only a minimal set of classes that participate in the operation, and the information about the connections between these classes is abstracted out.

Since the LoD exemplifies a specific type of coupling, and does not specify a method of addressing this type of coupling, it is more suited as a metric for code smell as opposed to a methodology for building loosely coupled systems.

[https://en.wikipedia.org/wiki/Law_of_Demeter][1]


  [1]: https://en.wikipedia.org/wiki/Law_of_Demeter

=== [1131] of [1277] ============================= id=[147] ==
Q:  What is "action at a distance" in computer programming?
questiontag_set : ['computer science']
datetime_added  =[2014-10-10 21:00:23.428153+00:00]
datetime_updated=[2014-10-10 21:00:23.428184+00:00]
---------------------------------------------- id=[127] --
A:
In computer science, action at a distance is an anti-pattern (a recognized common error) in which behavior in one part of a program varies wildly based on difficult or impossible to identify operations in another part of the program. The way to avoid the problems associated with action at a distance are a proper design, which avoids global variables and alters data in a controlled and local manner, or usage of a pure functional programming style with referential transparency.

The term is based on the concept of action at a distance in physics, which may refer to a process that allows objects to interact without a mediator particle such as the gluon. In particular, Albert Einstein referred to this effect in quantum mechanics as "spooky action at a distance".

Software bugs due to "action at a distance" may arise because a program component is doing something at the wrong time, or affecting something it should not. It is very difficult, however, to track down which component is responsible. Side effects from innocent actions can put the program in an unknown state, so local data is not necessarily local. The solution in this particular scenario is to define which components should be interacting with which others. A proper design that accurately defines the interface between parts of a program, and that avoids shared states, can largely eliminate problems caused by action at a distance.


**Example**

This example, from the Perl programming language, demonstrates an especially serious case of action at a distance:

Array indices normally begin at 0 because the value of $[ is normally 0; if you set $[ to 1, then arrays start at 1, which makes Fortran programmers happy, and so we see examples like this in the perl(3) man page:

    foreach $num ($[ .. $#entry) {
      print "  $num\t'",$entry[$num],"'\n";
    }

And of course you could set $[ to 17 to have arrays start at some random number such as 17 or 4 instead of at 0 or 1. This was a great way to sabotage module authors.

Fortunately, sanity prevailed. These features are now recognized to have been mistakes. The perl5-porters mailing list now has a catchphrase for such features: they're called "action at a distance". The principle is that a declaration in one part of the program shouldn't drastically and invisibly alter the behavior of some other part of the program.

**Action at a distance across objects**

Proper object oriented programming involves design principles that avoid action at a distance. The Law of Demeter states that an object should only interact with other objects near itself. Should action in a distant part of the system be required then it should be implemented by propagating a message. Proper design severely limits occurrences of action at a distance, contributing to maintainable programs. Pressure to create an object orgy results from poor interface design, perhaps taking the form of a God object, not implementing true objects, or failing to heed the Law of Demeter.

One of the advantages of functional programming is that action at a distance is de-emphasised, sometimes to the point of being impossible to express at all in the source language.

Being aware of the danger of allowing action at a distance into a design, and being able to recognize the presence of action at a distance, is useful in developing programs that are correct, reliable and maintainable. Given that the majority of the expense of a program may be in the maintenance phase, and that action at a distance makes maintenance difficult, expensive and error prone, it is worth effort during design to avoid.

[https://en.wikipedia.org/wiki/Action_at_a_distance_(computer_programming)][1]


  [1]: https://en.wikipedia.org/wiki/Action_at_a_distance_%28computer_programming%29


=== [1132] of [1277] ============================= id=[146] ==
Q:  What is the "decorator" structural design pattern?
questiontag_set : ['computer science']
datetime_added  =[2014-10-10 20:56:21.115622+00:00]
datetime_updated=[2014-10-10 20:56:21.115653+00:00]
---------------------------------------------- id=[126] --
A:
Attach additional responsibilities to an object dynamically keeping the same interface. Decorators provide a flexible alternative to subclassing for extending functionality.

In object-oriented programming, the decorator pattern (also known as Wrapper, an alternative naming shared with the Adapter pattern) is a design pattern that allows behavior to be added to an individual object, either statically or dynamically, without affecting the behavior of other objects from the same class.

[https://en.wikipedia.org/wiki/Decorator_pattern][1]


  [1]: https://en.wikipedia.org/wiki/Decorator_pattern

=== [1133] of [1277] ============================= id=[145] ==
Q:  What is "loose coupling"?
questiontag_set : ['computer science']
datetime_added  =[2014-10-10 20:49:07.546066+00:00]
datetime_updated=[2014-10-10 20:49:07.546097+00:00]
---------------------------------------------- id=[125] --
A:
In computing and systems design a loosely coupled system is one in which each of its components has, or makes use of, little or no knowledge of the definitions of other separate components.

Coupling refers to the degree of direct knowledge that one class has of another. This is not meant to be interpreted as encapsulation vs. non-encapsulation. It is not a reference to one class's knowledge of another class's attributes or implementation, but rather knowledge of that other class itself.

Strong coupling occurs when a dependent class contains a pointer directly to a concrete class which provides the required behavior. The dependency cannot be substituted, or its "signature" changed, without requiring a change to the dependent class. Loose coupling occurs when the dependent class contains a pointer only to an interface, which can then be implemented by one or many concrete classes. The dependent class's dependency is to a "contract" specified by the interface; a defined list of methods and/or properties that implementing classes must provide. Any class that implements the interface can thus satisfy the dependency of a dependent class without having to change the class. This allows for extensibility in software design; a new class implementing an interface can be written to replace a current dependency in some or all situations, without requiring a change to the dependent class; the new and old classes can be interchanged freely. Strong coupling does not allow this.

Computer programming languages having notions of either functions as the core module (see Functional programming) or functions as objects provide excellent examples of loosely coupled programming. Functional languages have patterns of Continuations, Closure (computer programming), or generators. See Clojure and Lisp as examples of function programming languages. Object oriented languages like Smalltalk and Ruby have code blocks, while Eiffel has agents. The basic idea is to objectify (encapsulate as an object) a function independent of any other enclosing concept (e.g. decoupling an object function from any direct knowledge of the enclosing object). See First-class function for further insight into functions as objects, which qualifies as one form of first-class function.

**Methods for decreasing coupling**

Loose coupling of interfaces can be dramatically enhanced when publishers of data transmit messages using a flexible file format such as XML or JSON to enable subscribers to publish clear definitions of how they subsequently use this data. For example, a subscriber could publish the collection of statements used to extract information from a publisher's messages by sharing the relevant XPath expressions used for data transformation, or the JSON Schema. This would allow a responsible data publisher to test whether their subscriber's extraction methods would fail when a published format changes.

Loose coupling of services can be enhanced by reducing the information passed into a service to the key data. For example, a service that sends a letter is most reusable when just the customer identifier is passed and the customer address is obtained within the service. This decouples services because services do not need to be called in a specific order (e.g. GetCustomerAddress, SendLetter)

Note that loose coupling is not universally positive. If systems are de-coupled in time using Message-oriented middleware, it is difficult to also provide transactional integrity. Data replication across different systems provides loose coupling (in availability), but creates issues in maintaining synchronisation.

[https://en.wikipedia.org/wiki/Loose_coupling][1]


  [1]: https://en.wikipedia.org/wiki/Loose_coupling

=== [1134] of [1277] ============================= id=[144] ==
Q:  What is a "shared nothing architecture"?
questiontag_set : ['computer science']
datetime_added  =[2014-10-10 20:35:01.353605+00:00]
datetime_updated=[2014-10-10 20:35:01.353635+00:00]
---------------------------------------------- id=[124] --
A:
A shared nothing architecture (SN) is a distributed computing architecture in which each node is independent and self-sufficient, and there is no single point of contention across the system. More specifically, none of the nodes share memory or disk storage.

People typically contrast SN with systems that keep a large amount of centrally-stored state information, whether in a database, an application server, or any other similar single point of contention. 

[https://en.wikipedia.org/wiki/Shared_nothing_architecture][1]


  [1]: https://en.wikipedia.org/wiki/Shared_nothing_architecture

=== [1135] of [1277] ============================= id=[143] ==
Q:  What is "systems thinking"?
questiontag_set : []
datetime_added  =[2014-10-10 20:29:23.226998+00:00]
datetime_updated=[2014-10-10 20:29:23.227028+00:00]
---------------------------------------------- id=[123] --
A:
Systems thinking is the process of understanding how things, regarded as systems, influence one another within a whole. In nature, systems thinking examples include ecosystems in which various elements such as air, water, movement, plants, and animals work together to survive or perish. In organizations, systems consist of people, structures, and processes that work together to make an organization "healthy" or "unhealthy". Systems thinking has roots in the General System Theory that was advanced by Ludwig von Bertalanffy in the 1940s and furthered by Ross Ashby in the 1950s.

Systems thinking has been defined as an approach to problem solving, by viewing "problems" as parts of an overall system, rather than reacting to specific part, outcomes or events and potentially contributing to further development of unintended consequences. Systems thinking is not one thing but a set of habits or practices within a framework that is based on the belief that the component parts of a system can best be understood in the context of relationships with each other and with other systems, rather than in isolation. Systems thinking focuses on cyclical rather than linear cause and effect.

In systems science, it is argued that the only way to fully understand why a problem or element occurs and persists is to understand the parts in relation to the whole. Standing in contrast to Descartes's scientific reductionism and philosophical analysis, it proposes to view systems in a holistic manner. Consistent with systems philosophy, systems thinking concerns an understanding of a system by examining the linkages and interactions between the elements that compose the entirety of the system.

Systems science thinking attempts to illustrate how small catalytic events that are separated by distance and time can be the cause of significant changes in complex systems. Acknowledging that an improvement in one area of a system can adversely affect another area of the system, it promotes organizational communication at all levels in order to avoid the silo effect. Systems thinking techniques may be used to study any kind of system — physical, biological, social, scientific, engineered, human, or conceptual.

[https://en.wikipedia.org/wiki/Systems_thinking][1]


  [1]: https://en.wikipedia.org/wiki/Systems_thinking

=== [1136] of [1277] ============================= id=[142] ==
Q:  How to create a virtualenv with a different version of python than the default?
questiontag_set : ['python']
datetime_added  =[2014-10-10 19:22:56.298701+00:00]
datetime_updated=[2014-10-10 19:22:56.298741+00:00]
---------------------------------------------- id=[122] --
A:
mkvirtualenv --python=/usr/local/bin/python3.4

=== [1137] of [1277] ============================= id=[141] ==
Q:  What is REST?
questiontag_set : ['web development']
datetime_added  =[2014-10-10 19:08:26.776363+00:00]
datetime_updated=[2014-10-10 19:08:26.776396+00:00]
---------------------------------------------- id=[121] --
A:
Representational state transfer (REST) is an abstraction of the architecture of the World Wide Web; more precisely, REST is an architectural style consisting of a coordinated set of architectural constraints applied to components, connectors, and data elements, within a distributed hypermedia system. REST ignores the details of component implementation and protocol syntax in order to focus on the roles of components, the constraints upon their interaction with other components, and their interpretation of significant data elements.

**Architectural constraints**

1) **Client–server**

A uniform interface separates clients from servers. This separation of concerns means that, for example, clients are not concerned with data storage, which remains internal to each server, so that the portability of client code is improved. Servers are not concerned with the user interface or user state, so that servers can be simpler and more scalable. Servers and clients may also be replaced and developed independently, as long as the interface between them is not altered.

2) **Stateless**

The client–server communication is further constrained by no client context being stored on the server between requests. Each request from any client contains all the information necessary to service the request, and session state is held in the client. Important to note is that the session state can be transferred by the server to another service such as a database to maintain a persistent state for a period and allow authentication. The client begins sending requests when it is ready to make the transition to a new state. While one or more requests are outstanding, the client is considered to be in transition. The representation of each application state contains links that may be used the next time the client chooses to initiate a new state-transition.

3) **Cacheable**

As on the World Wide Web, clients can cache responses. Responses must therefore, implicitly or explicitly, define themselves as cacheable, or not, to prevent clients from reusing stale or inappropriate data in response to further requests. Well-managed caching partially or completely eliminates some client–server interactions, further improving scalability and performance.

4) **Layered system**

A client cannot ordinarily tell whether it is connected directly to the end server, or to an intermediary along the way. Intermediary servers may improve system scalability by enabling load balancing and by providing shared caches. They may also enforce security policies.

5) **Code on demand (optional)**

Servers can temporarily extend or customize the functionality of a client by the transfer of executable code. Examples of this may include compiled components such as Java applets and client-side scripts such as JavaScript. "Code on demand" is the only optional constraint of the REST architecture.

6) **Uniform interface**

The uniform interface constraint is fundamental to the design of any REST service.[14] The uniform interface simplifies and decouples the architecture, which enables each part to evolve independently. The four constraints for this uniform interface are:

1. Identification of resources  
:  
Individual resources are identified in requests, for example using URIs in web-based REST systems. The resources themselves are conceptually separate from the representations that are returned to the client. For example, the server may send data from its database as HTML, XML or JSON, none of which are the server's internal representation, and it is the same one resource regardless.
1. Manipulation of resources through these representations   
:  
When a client holds a representation of a resource, including any metadata attached, it has enough information to modify or delete the resource.
1. Self-descriptive messages  
:  
Each message includes enough information to describe how to process the message. For example, which parser to invoke may be specified by an Internet media type (previously known as a MIME type). Responses also explicitly indicate their cacheability.
1. Hypermedia as the engine of application state (HATEOAS)  
:  
Clients make state transitions only through actions that are dynamically identified within hypermedia by the server (e.g., by hyperlinks within hypertext). Except for simple fixed entry points to the application, a client does not assume that any particular action is available for any particular resources beyond those described in representations previously received from the server.


One can characterise applications conforming to the REST constraints described in this section as "RESTful".[15] If a service violates any of the required constraints, it cannot be considered RESTful.

Complying with these constraints, and thus conforming to the REST architectural style, enables any kind of distributed hypermedia system to have desirable emergent properties, such as performance, scalability, simplicity, modifiability, visibility, portability, and reliability.


[https://en.wikipedia.org/wiki/Representational_state_transfer][1]


  [1]: https://en.wikipedia.org/wiki/Representational_state_transfer

=== [1138] of [1277] ============================= id=[140] ==
Q:  What is a "data flow diagram"?
questiontag_set : ['computer science']
datetime_added  =[2014-10-10 18:33:46.576649+00:00]
datetime_updated=[2014-10-10 18:33:46.576681+00:00]
---------------------------------------------- id=[120] --
A:
A data flow diagram (DFD) is a graphical representation of the "flow" of data through an information system, modeling its process aspects. A DFD is often used as a preliminary step to create an overview of the system, which can later be elaborated. DFDs can also be used for the visualization of data processing (structured design).

A DFD shows what kind of information will be input to and output from the system, where the data will come from and go to, and where the data will be stored. It does not show information about the timing of processes, or information about whether processes will operate in sequence or in parallel (which is shown on a flowchart).

[https://en.wikipedia.org/wiki/Data_flow_diagram][1]


  [1]: https://en.wikipedia.org/wiki/Data_flow_diagram

=== [1139] of [1277] ============================= id=[139] ==
Q:  What is "isolation" in database systems?
questiontag_set : ['databases']
datetime_added  =[2014-10-10 18:09:13.124931+00:00]
datetime_updated=[2014-10-10 18:09:13.124963+00:00]
---------------------------------------------- id=[119] --
A:
[https://en.wikipedia.org/wiki/Isolation_(database_systems)][1]

Partial excerpt:

In database systems, isolation determines how transaction integrity is visible to other users and systems. For example, when a user is creating a Purchase Order and has created the header, but not the PO lines, is the header available for other systems/users, carrying out concurrent operations (such as a report on Purchase Orders), to see?

A lower isolation level increases the ability of many users to access data at the same time, but increases the number of concurrency effects (such as dirty reads or lost updates) users might encounter. Conversely, a higher isolation level reduces the types of concurrency effects that users may encounter, but requires more system resources and increases the chances that one transaction will block another.

It is typically defined at database level as a property that defines how/when the changes made by one operation become visible to other, but on older systems may be implemented systemically, for example through the use of temporary tables. In two-tier systems, a TP manager is required to maintain isolation. In n-tier systems (such as multiple websites attempting to book the last seat on a flight) a combination of stored procedures and transaction management is required to commit the booking and confirm to the customer.

Isolation is one of the ACID (Atomicity, Consistency, Isolation, Durability) properties.



  [1]: https://en.wikipedia.org/wiki/Isolation_%28database_systems%29

=== [1140] of [1277] ============================= id=[138] ==
Q:  What is "eventual consistency" in databases?
questiontag_set : ['databases']
datetime_added  =[2014-10-10 18:07:02.502832+00:00]
datetime_updated=[2014-10-10 18:07:02.502869+00:00]
---------------------------------------------- id=[118] --
A:
Eventual consistency is a consistency model used in distributed computing to achieve high availability that informally guarantees that, if no new updates are made to a given data item, eventually all accesses to that item will return the last updated value. Eventual consistency is widely deployed in distributed systems, often under the moniker of optimistic replication, and has origins in early mobile computing projects. A system that has achieved eventual consistency is often said to have **converged**, or achieved **replica convergence**. While stronger models, like linearizability are trivially eventually consistent, the converse does not hold.[clarification needed]
Eventually consistent services are often classified as providing BASE (Basically Available, Soft state, Eventual consistency) semantics, in contrast to traditional ACID (Atomicity, Consistency, Isolation, Durability) guarantees. Eventual consistency is sometimes criticized as increasing the complexity of distributed software applications. This is partly because eventual consistency is purely a liveness guarantee (reads eventually return the same value) and does not make safety guarantees: an eventually consistent system can return any value before it converges.

**Conflict resolution**

In order to ensure replica convergence, a system must reconcile differences between multiple copies of distributed data. This process, often known as anti-entropy, requires exchanging versions of data between servers.[8] The appropriate mechanism for choosing an appropriate final state depends on the application and the system but may come in the form of "last writer wins" reconciliation or user-specified conflict handling. Timestamps and vector clocks are often used to detect concurrency between updates.

In practice, conflict resolution is often performed in one of three processes:

- Read repair: The correction is done when a read finds an inconsistency. This slows down the read operation.
- Write repair: The correction takes place during a write operation, if an inconsistency has been found, slowing down the write operation.
- Asynchronous repair: The correction is not part of a read or write operation.

[https://en.wikipedia.org/wiki/Eventual_consistency][1]


  [1]: https://en.wikipedia.org/wiki/Eventual_consistency

=== [1141] of [1277] ============================= id=[137] ==
Q:  What is "consistency" in database systems?
questiontag_set : ['databases']
datetime_added  =[2014-10-10 18:03:05.421402+00:00]
datetime_updated=[2014-10-10 18:03:05.421438+00:00]
---------------------------------------------- id=[117] --
A:
Consistency is one of the four guarantees that define ACID transactions; however, significant ambiguity exists about the nature of this guarantee. It is defined variously as:

- The guarantee that any transactions started in the future necessarily see the effects of other transactions committed in the past
- The guarantee that database constraints are not violated, particularly once a transaction commits
- The guarantee that operations in transactions are performed accurately, correctly, and with validity, with respect to application semantics

As these various definitions are not mutually exclusive, it is possible to design a system that guarantees "consistency" in every sense of the word, as most relational database management systems in common use today arguably do.

The CAP Theorem is based on three trade-offs, one of which is "atomic consistency" (shortened to "consistency" for the acronym), about which the authors note, "Discussing atomic consistency is somewhat diﬀerent than talking about an ACID database, as database consistency refers to transactions, while atomic consistency refers only to a property of a single request/response operation sequence. And it has a diﬀerent meaning than the Atomic in ACID, as it subsumes the database notions of both Atomic and Consistent."

[https://en.wikipedia.org/wiki/Consistency_(database_systems)][1]


  [1]: https://en.wikipedia.org/wiki/Consistency_%28database_systems%29

=== [1142] of [1277] ============================= id=[136] ==
Q:  What is database durability?
questiontag_set : ['databases']
datetime_added  =[2014-10-10 17:59:32.076811+00:00]
datetime_updated=[2014-10-10 17:59:32.076843+00:00]
---------------------------------------------- id=[114] --
A:
In database systems, durability is the ACID property which guarantees that transactions that have committed will survive permanently. For example, if a flight booking reports that a seat has successfully been booked, then the seat will remain booked even if the system crashes.

Durability can be achieved by flushing the transaction's log records to non-volatile storage before acknowledging commitment.

In distributed transactions, all participating servers must coordinate before commit can be acknowledged. This is usually done by a two-phase commit protocol.

Many DBMSs implement durability by writing transactions into a transaction log that can be reprocessed to recreate the system state right before any later failure. A transaction is deemed committed only after it is entered in the log.

[https://en.wikipedia.org/wiki/Durability_(database_systems)][1]


  [1]: https://en.wikipedia.org/wiki/Durability_%28database_systems%29

=== [1143] of [1277] ============================= id=[135] ==
Q:  What is database atomicity?
questiontag_set : ['databases']
datetime_added  =[2014-10-10 17:58:40.427670+00:00]
datetime_updated=[2014-10-10 17:58:40.427704+00:00]
---------------------------------------------- id=[116] --
A:
In database systems, atomicity (or atomicness; from Greek a-tomos, undividable) is one of the ACID transaction properties. In an atomic transaction, a series of database operations either all occur, or nothing occurs. A guarantee of atomicity prevents updates to the database occurring only partially, which can cause greater problems than rejecting the whole series outright. In other words, atomicity means indivisibility and irreducibility.[1]

The etymology of the phrase originates in the Classical Greek concept of a fundamental and indivisible component; see atom.

An example of atomicity is ordering an airline ticket where two actions are required: payment, and a seat reservation. The potential passenger must either:

1. both pay for and reserve a seat; OR
1. neither pay for nor reserve a seat.

The booking system does not consider it acceptable for a customer to pay for a ticket without securing the seat, nor to reserve the seat without payment succeeding.

Another example: If one wants to transfer some amount of money from one account to another, then he/she would start a procedure to do it. However, if a failure occurs, then due to atomicity, the amount will either be transferred completely or will not even start. Thus atomicity protects the user from losing money due to a failed transaction.

**Orthogonality**

Atomicity does not behave completely orthogonally with regard to the other ACID properties of the transactions. For example, isolation relies on atomicity to roll back changes in the event of isolation failures such as deadlock; consistency also relies on rollback in the event of a consistency-violation by an illegal transaction. Finally, atomicity itself relies on durability to ensure the atomicity of transactions even in the face of external failures.

As a result of this, failure to detect errors and roll back the enclosing transaction may cause failures of isolation and consistency.

[https://en.wikipedia.org/wiki/Atomicity_(database_systems)][1]


  [1]: https://en.wikipedia.org/wiki/Atomicity_%28database_systems%29

=== [1144] of [1277] ============================= id=[134] ==
Q:  What happens if Redis runs out of memory?
questiontag_set : ['redis']
datetime_added  =[2014-10-10 17:44:57.384467+00:00]
datetime_updated=[2014-10-10 17:44:57.384502+00:00]
---------------------------------------------- id=[115] --
A:
Redis will either be killed by the Linux kernel OOM killer, crash with an error, or will start to slow down. With modern operating systems malloc() returning NULL is not common, usually the server will start swapping and Redis performances will degrade so you'll probably notice there is something wrong.

The INFO command will report the amount of memory Redis is using so you can write scripts that monitor your Redis servers checking for critical conditions.

Redis has built-in protections allowing the user to set a max limit to memory usage, using the maxmemory option in the config file to put a limit to the memory Redis can use. If this limit is reached Redis will start to reply with an error to write commands (but will continue to accept read-only commands), or you can configure it to evict keys when the max memory limit is reached in the case you are using Redis for caching.

We have documentations you plan to use Redis as an LRU cache.

[http://redis.io/topics/faq][1]


  [1]: http://redis.io/topics/faq

=== [1145] of [1277] ============================= id=[133] ==
Q:  What is "Apache Solr"?
questiontag_set : ['unassimilated']
datetime_added  =[2014-10-10 00:05:40.148447+00:00]
datetime_updated=[2014-10-10 00:05:40.148488+00:00]
---------------------------------------------- id=[113] --
A:
Solr (pronounced "solar") is an open source enterprise search platform from the Apache Lucene project. Its major features include full-text search, hit highlighting, faceted search, dynamic clustering, database integration, and rich document (e.g., Word, PDF) handling. Providing distributed search and index replication, Solr is highly scalable.[1] Solr is the most popular enterprise search engine.[2] Solr 4 adds NoSQL features.[3]
Solr is written in Java and runs as a standalone full-text search server within a servlet container such as Apache Tomcat or Jetty. Solr uses the Lucene Java search library at its core for full-text indexing and search, and has REST-like HTTP/XML and JSON APIs that make it usable from most popular programming languages. Solr's powerful external configuration allows it to be tailored to many types of application without Java coding, and it has a plugin architecture to support more advanced customization.
Apache Lucene and Apache Solr are both produced by the same Apache Software Foundation development team since the two projects were merged in 2010. It is common to refer to the technology or products as Lucene/Solr or Solr/Lucene.

[https://en.wikipedia.org/wiki/Apache_Solr][1]


  [1]: https://en.wikipedia.org/wiki/Apache_Solr

=== [1146] of [1277] ============================= id=[132] ==
Q:  What is "data mining"?
questiontag_set : ['unassimilated']
datetime_added  =[2014-10-10 00:03:35.304120+00:00]
datetime_updated=[2014-10-10 00:03:35.304151+00:00]
---------------------------------------------- id=[112] --
A:
Data mining (the analysis step of the "Knowledge Discovery in Databases" process, or KDD),[1] an interdisciplinary subfield of computer science,[2][3][4] is the computational process of discovering patterns in large data sets involving methods at the intersection of artificial intelligence, machine learning, statistics, and database systems.[2] The overall goal of the data mining process is to extract information from a data set and transform it into an understandable structure for further use.[2] Aside from the raw analysis step, it involves database and data management aspects, data pre-processing, model and inference considerations, interestingness metrics, complexity considerations, post-processing of discovered structures, visualization, and online updating.[2]
The term is a misnomer, because the goal is the extraction of patterns and knowledge from large amount of data, not the extraction of data itself.[5] It also is a buzzword,[6] and is frequently also applied to any form of large-scale data or information processing (collection, extraction, warehousing, analysis, and statistics) as well as any application of computer decision support system, including artificial intelligence, machine learning, and business intelligence. The popular book "Data mining: Practical machine learning tools and techniques with Java"[7] (which covers mostly machine learning material) was originally to be named just "Practical machine learning", and the term "data mining" was only added for marketing reasons.[8] Often the more general terms "(large scale) data analysis", or "analytics" – or when referring to actual methods, artificial intelligence and machine learning – are more appropriate.
The actual data mining task is the automatic or semi-automatic analysis of large quantities of data to extract previously unknown interesting patterns such as groups of data records (cluster analysis), unusual records (anomaly detection) and dependencies (association rule mining). This usually involves using database techniques such as spatial indices. These patterns can then be seen as a kind of summary of the input data, and may be used in further analysis or, for example, in machine learning and predictive analytics. For example, the data mining step might identify multiple groups in the data, which can then be used to obtain more accurate prediction results by a decision support system. Neither the data collection, data preparation, nor result interpretation and reporting are part of the data mining step, but do belong to the overall KDD process as additional steps.
The related terms data dredging, data fishing, and data snooping refer to the use of data mining methods to sample parts of a larger population data set that are (or may be) too small for reliable statistical inferences to be made about the validity of any patterns discovered. These methods can, however, be used in creating new hypotheses to test against the larger data populations.

[https://en.wikipedia.org/wiki/Data_mining][1]


  [1]: https://en.wikipedia.org/wiki/Data_mining

=== [1147] of [1277] ============================= id=[131] ==
Q:  What is "information retrieval"?
questiontag_set : ['unassimilated']
datetime_added  =[2014-10-10 00:00:31.586140+00:00]
datetime_updated=[2014-10-10 00:00:31.586172+00:00]
---------------------------------------------- id=[111] --
A:
Information retrieval is the activity of obtaining information resources relevant to an information need from a collection of information resources. Searches can be based on metadata or on full-text (or other content-based) indexing.
Automated information retrieval systems are used to reduce what has been called "information overload". Many universities and public libraries use IR systems to provide access to books, journals and other documents. Web search engines are the most visible IR applications.

[https://en.wikipedia.org/wiki/Information_retrieval][1]


  [1]: https://en.wikipedia.org/wiki/Information_retrieval

=== [1148] of [1277] ============================= id=[130] ==
Q:  What is Elasticsearch?
questiontag_set : ['software apps']
datetime_added  =[2014-10-09 23:55:39.438735+00:00]
datetime_updated=[2014-10-09 23:55:39.438766+00:00]
---------------------------------------------- id=[110] --
A:
Elasticsearch is a search server based on Lucene. It provides a distributed, multitenant-capable full-text search engine with a RESTful web interface and schema-free JSON documents. Elasticsearch is developed in Java and is released as open source under the terms of the Apache License.

[https://en.wikipedia.org/wiki/Elasticsearch][1]


  [1]: https://en.wikipedia.org/wiki/Elasticsearch

=== [1149] of [1277] ============================= id=[129] ==
Q:  What is SOLID?
questiontag_set : ['oop (object-oriented programming)']
datetime_added  =[2014-10-09 04:22:51.272303+00:00]
datetime_updated=[2014-10-09 04:22:51.272334+00:00]
---------------------------------------------- id=[109] --
A:
In computer programming, SOLID (Single responsibility, Open-closed, Liskov substitution, Interface segregation and Dependency inversion) is a mnemonic acronym introduced by Michael Feathers for the "first five principles" named by Robert C. Martin[1][2] in the early 2000s[3] that stands for five basic principles of object-oriented programming and design. The principles, when applied together, intend to make it more likely that a programmer will create a system that is easy to maintain and extend over time.[3] The principles of SOLID are guidelines that can be applied while working on software to remove code smells by causing the programmer to refactor the software's source code until it is both legible and extensible. It is part of an overall strategy of agile and adaptive programming.


Initial	Stands for
(acronym)	Concept
S	SRP 
Single responsibility principle
a class should have only a single responsibility (i.e. only one potential change in the software's specification should be able to affect the specification of the class)
O	OCP [5]	
Open/closed principle
“software entities … should be open for extension, but closed for modification.”
L	LSP [6]	
Liskov substitution principle
“objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.” See also design by contract.
I	ISP [7]	
Interface segregation principle
“many client-specific interfaces are better than one general-purpose interface.”[8]
D	DIP [9]	
Dependency inversion principle
one should “Depend upon Abstractions. Do not depend upon concretions.”[8]
Dependency injection is one method of following this principle.

[https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)][1]


  [1]: https://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29

=== [1150] of [1277] ============================= id=[128] ==
Q:  How do you see how much free memory there is on Linux?
questiontag_set : ['unix']
datetime_added  =[2014-10-07 23:23:32.696182+00:00]
datetime_updated=[2014-10-07 23:23:32.696219+00:00]
---------------------------------------------- id=[108] --
A:
grep MemFree /proc/meminfo

=== [1151] of [1277] ============================= id=[127] ==
Q:  What is an inverted index?
questiontag_set : ['computer science']
datetime_added  =[2014-10-07 16:53:57.289601+00:00]
datetime_updated=[2014-10-07 16:53:57.289632+00:00]
---------------------------------------------- id=[107] --
A:
In computer science, an inverted index (also referred to as postings file or inverted file) is an index data structure storing a mapping from content, such as words or numbers, to its locations in a database file, or in a document or a set of documents. The purpose of an inverted index is to allow fast full text searches, at a cost of increased processing when a document is added to the database. The inverted file may be the database file itself, rather than its index. It is the most popular data structure used in document retrieval systems, used on a large scale for example in search engines. Several significant general-purpose mainframe-based database management systems have used inverted list architectures, including ADABAS, DATACOM/DB, and Model 204.

There are two main variants of inverted indexes: A record level inverted index (or inverted file index or just inverted file) contains a list of references to documents for each word. A word level inverted index (or full inverted index or inverted list) additionally contains the positions of each word within a document. The latter form offers more functionality (like phrase searches), but needs more processing power and space to be created.


 **Applications**

The inverted index data structure is a central component of a typical search engine indexing algorithm. A goal of a search engine implementation is to optimize the speed of the query: find the documents where word X occurs. Once a forward index is developed, which stores lists of words per document, it is next inverted to develop an inverted index. Querying the forward index would require sequential iteration through each document and to each word to verify a matching document. The time, memory, and processing resources to perform such a query are not always technically realistic. Instead of listing the words per document in the forward index, the inverted index data structure is developed which lists the documents per word.

With the inverted index created, the query can now be resolved by jumping to the word id (via random access) in the inverted index.

In pre-computer times, concordances to important books were manually assembled. These were effectively inverted indexes with a small amount of accompanying commentary that required a tremendous amount of effort to produce.

In bioinformatics, inverted indexes are very important in the sequence assembly of short fragments of sequenced DNA. One way to find the source of a fragment is to search for it against a reference DNA sequence. A small number of mismatches (due to differences between the sequenced DNA and reference DNA, or errors) can be accounted for by dividing the fragment into smaller fragments—at least one subfragment is likely to match the reference DNA sequence. The matching requires constructing an inverted index of all substrings of a certain length from the reference DNA sequence. Since the human DNA contains more than 3 billion base pairs, and we need to store a DNA substring for every index and a 32-bit integer for index itself, the storage requirement for such an inverted index would probably be in the tens of gigabytes.

[https://en.wikipedia.org/wiki/Inverted_index][1]


  [1]: https://en.wikipedia.org/wiki/Inverted_index

=== [1152] of [1277] ============================= id=[126] ==
Q:  In vim, how do you tell the command-T plugin to ignore specified directories?
questiontag_set : ['vim']
datetime_added  =[2014-10-06 19:32:15.630516+00:00]
datetime_updated=[2014-10-06 19:32:15.630547+00:00]
---------------------------------------------- id=[106] --
A:
    :set wildignore+=my_dir/**
    :CommandTFlush


Note that `:CommandTFlush` will re-read in all the files/dirs with the new wildignore setting.

=== [1153] of [1277] ============================= id=[125] ==
Q:  What is the one single book that every Software Engineer must read?
questiontag_set : ['software engineering']
datetime_added  =[2014-09-29 23:16:04.992326+00:00]
datetime_updated=[2014-09-29 23:16:04.992358+00:00]
---------------------------------------------- id=[105] --
A:
- The Pragmatic Programmer
- Clean Code
- The Mythical Man Month
- Introduction to Algorithms by Cormen, Leiserson, Rivest and Stein
- Code Complete
- Structure and Interpretation of Computer Programs
- Design Patterns
- Beautiful Code
- everything by Joel On Software
- everything by Jeff Atwood (CodingHorror)
- blogs by Paul Graham
- blogs by Steve Yegge

[http://www.quora.com/What-programming-books-resources-should-I-read-follow-to-become-a-better-software-engineer][1]
[http://www.quora.com/What-is-the-one-single-book-that-every-Software-Engineer-must-read][2]


  [1]: http://www.quora.com/What-programming-books-resources-should-I-read-follow-to-become-a-better-software-engineer
  [2]: http://www.quora.com/What-is-the-one-single-book-that-every-Software-Engineer-must-read

=== [1154] of [1277] ============================= id=[124] ==
Q:  What habits made you a better software engineer?
questiontag_set : ['software engineering']
datetime_added  =[2014-09-29 23:11:05.042305+00:00]
datetime_updated=[2014-09-29 23:11:05.042335+00:00]
---------------------------------------------- id=[104] --
A:
- **write small prototypes**

One habit I've clung to is writing small prototypes when I'm trying to learn new concepts.

For example, I'll sit down with a book or a web page, and over the course of a few hours, write 30 or 40 programs all of them only a few dozen lines long.  Each program intended to demonstrate some simple concept.

This prototyping makes it very easy to try out many concepts in a short period of time.

Your time is precious, save as much of it as you can. Automate everything. Once your time is a commodity, you can achieve your next great innovation.

- Use a powerful IDE (like vim), and configure it to do as much as possible for you. Strive for single command Build/Test/Deploy/Run.
- If you find yourself doing things frequently, make them happen in one button press, or one click. Or better yet, make them happen automatically.
- Learn keyboard shortcuts and the unix command line. Almost any IDE will let you run complex build commands and even arbitrary terminal commands - these can be powerful and save you significant amounts of time.
- Ask questions, then ask more questions. If something is happening that you don't understand, ask why. Then ask why that is. Then go away and research alternatives, and propose them. Ask questions until you could explain in complete detail to the next new developer that asks why. I am frequently surprised at the number of developers that don't do this and just rely on the "because its always been/worked like that."
- Challenge the status quo by providing better alternative solutions - and make significant steps towards implementing them. If your tests are incomplete, or run once a day/week - then become the local Continuous Integration guru - pitch to your team the benefits and implement it. Once you are using it and it is helping you work better then get your team using it too.
- Don't just challenge others, challenge yourself. Never written a web app? Write one. Never done python? Hijack UAVs with python.
- Own something. Create something. Doesn't have to be a technical project, could be an event, like a meetup or a hackathon, could be a game, a website, a blog.
- Teach something. Java, public speaking, writing, chess, vim, tennis.
- Be a beacon of excellence. Got a class/component that is rubbish? Fix it. Write code the right way. Don't take shortcuts in your code. Make intelligent decisions and justify the pros and cons why you made that decision to those around you. Always make improvements to your code. Spot a TODO that would take less than an hour? Just Do It.
- Browse the Stack Exchange in a topic you are familiar - like your favourite language. When you find something new to you, bottom out your knowledge of it as fast as possible. Know C? Whats branch prediction? This post will tell you - learn.
- Browse the Stack Exchange in a topic you are unfamiliar - everyday's a school day.
- Learn to communicate. Written word, presenting, problem solving, small intense projects, large teams, small teams.
- Document everything you do as you go. You can refer back to why you did things and rely on your previous solution to similar problems when faced with them. It also helps to capture your thought process and key pieces of information you may forget. I frequently flick back through my diary over the previous few days' work.
- Document your code before you've written it. Use system diagrams, class hierarchies, flow charts to show how your code will work. If people have suggestions - and they will - you can make amendments much easily than when you have actually written the code. This is the other biggie that I see surprisingly few people do which can have the most negative effects.
- Be specific. So you've crafted your diagram for your new thing. Show it to everybody. Gather as much detail as possible. Ensure everybody agrees with the diagram, and if they don't change the diagram. If anybody puts pen on your diagram, add those additions/corrections to the diagram. Keep the diagram up-to-date.
- Learn about unconscious bias and male privilege. Learn about MBTI and which personality type you are and more importantly, how to interact best with other personality types. Learn about Emotional intelligence. Everybody in the world is different to you, and you need to know how to interact with them in the most efficient and constructive ways.
- Regularly do something for your team. Bring in cookies. Teach a magic trick. Cultivate a bit of culture and encourage others to do the same. Only praise other peoples' contributions. A cohesive team is hard to beat.
- Learn how to work with people. I personally really enjoyed The Pragmatic Programmer's "stone soup."
- Understand and use other people's code. If you are implementing your own xml parser or csv reader or git hook there is a good chance you are Doing It Wrong.
- Once you have written your code, and it works and passes your tests, go back and tidy it up. Re-run the tests. Now tidy it up some more. Each class should have a single responsibility and each function should do one thing. Functions should be less than 20 lines long in most instances. Use self documenting names for functions and variables. Spending time tidying up your code will be repaid 10-fold to you and the rest of your team.
- Get involved. Take responsibility. If something isn't right, fix it. If the deadlines are slipping suggest a solution and make others aware as soon as possible. Anybody can do this, even the most junior developers. This requires understanding of the bigger picture of the project, its direction and deadlines - so again - get involved. Save the day!
- Share lessons learned (when appropriate) with your team. Just figured out what happens when throwing an exception from inside a finally block in Java? Share it.


- I have a set of notes entitled "Brick walls". Every time I run into an unexpected problem that takes me an unnecessary amount of energy to solve, I log it in my list, along with the final solution, and suggested resources so I am prepared next time.  My progress is then measured by the amount of brick walls I encounter. If I stop logging to that list frequently, I'm probably not challenging myself. It also serves as a list of potential gaps in my knowledge.

- Questioning:-
I question everything , existing and new. I need to know why it was that way , why not some other way and so on.

- Incremental Development:
I build stuff incrementally . I always try to get something running end to end first with either proxies or mock code and then I fill in the details.  It helps me to avoid last minute integration nightmares and to understand the system as a whole before I delve into the details.

- Read code:-
I read code . A lot. Inside and outside my organization. It helps me to understand the overall pattern or vision for the system and correct some of my own blindspots.

- Lazy pair programming... namely each person in the pair is working on their own stuff but each know enough about the others work they can help with debugging and discussing various tradeoffs with
- Design top down and code bottom up
[http://www.quora.com/What-little-habits-made-you-a-better-software-engineer][1]


  [1]: http://www.quora.com/What-little-habits-made-you-a-better-software-engineer

=== [1155] of [1277] ============================= id=[123] ==
Q:  Who is Danny Greenfield?  (in the context of Python)
questiontag_set : ['python', 'django']
datetime_added  =[2014-09-29 22:51:36.392697+00:00]
datetime_updated=[2014-09-29 22:51:36.392727+00:00]
---------------------------------------------- id=[103] --
A:
Daniel Greenfield is also known as pydanny, and wrote "Two Scoops of Django" along with Audrey Roy.

[http://pydanny.com/][1]


  [1]: http://pydanny.com/

=== [1156] of [1277] ============================= id=[122] ==
Q:  What is Google Cloud Platform?
questiontag_set : ['unassimilated']
datetime_added  =[2014-09-29 22:45:51.838004+00:00]
datetime_updated=[2014-09-29 22:45:51.838034+00:00]
---------------------------------------------- id=[102] --
A:
Google Cloud Platform is a portfolio of cloud computing products by Google, that is offering hosting on the same supporting infrastructure that Google uses internally for end-user products like Google Search and YouTube.

Products

The Google Cloud Platform is composed of a family of products, each including a web interface, a command-line tool and a REST API.

- Google App Engine is a Platform as a Service for sandboxed web applications. App Engine offers automatic scaling with resources increased automatically to handle server load.
- Google Compute Engine is the Infrastructure as a Service component of the Google Cloud Platform that enables users to launch virtual machines (VMs) on demand.
- Google Cloud Storage is an online storage service for files.
- Google Cloud Datastore is a fully managed, highly available NoSQL data storage for non-relational data that includes a REST API.
- Google Cloud SQL is a fully managed MySQL database that lives in the Google Cloud infrastructure.
- Google BigQuery is a data analysis tool that uses SQL-like queries to process big datasets in seconds.
- Google Cloud Endpoints is a tool to create services inside App Engine that can be easily connected from iOS, Android and JavaScript clients.
- Google Cloud DNS is a DNS service hosted in the Google Cloud infrastructure.


Timeline

- Google App Engine was released as a preview in April 2008.
- On July 2012 Google creates the Google Cloud Platform Partner Program.
- On October 2012, shortly after the Amazon outage Google App Engine experienced a major outage that also affected Tumblr and Dropbox.
- BigQuery was first presented in March and got into General Availability (GA) in April 2012.
- After a 18-month preview on December 2013 Google Compute Engine was released GA.
- Google Cloud SQL was released as GA on February 2014.
- During the Google Cloud Platform Live event in March 2014 Google announced their biggest price drop affecting all products between a 30% and 85%.
- On March 2014 Google announced Managed Virtual Machines, a new feature to overcome the traditional limitations in Google App Engine.
- On March 2014 Google Cloud DNS was introduced. 

[https://en.wikipedia.org/wiki/Google_Cloud_Platform][1]


  [1]: https://en.wikipedia.org/wiki/Google_Cloud_Platform

=== [1157] of [1277] ============================= id=[121] ==
Q:  What is the name of Google's service that is the competitor to AWS?
questiontag_set : ['unassimilated']
datetime_added  =[2014-09-29 22:40:31.552049+00:00]
datetime_updated=[2014-09-29 22:40:31.552079+00:00]
---------------------------------------------- id=[101] --
A:
Google Compute Engine

> Google Compute Engine (GCE) is the Infrastructure as a Service (IaaS)
> component of Google Cloud Platform which is built on the global
> infrastructure that runs Google’s search engine, Gmail, YouTube and
> other services. Google Compute Engine enables users to launch virtual
> machines (VMs) on demand. Each VM is charged for a minimum of 10
> minutes followed by 1 minute increments, rounded up to the nearest
> minute. VMs can be launched from the standard images or custom images
> created by users. GCE users need to get authenticated based on OAuth
> 2.0 before launching the VMs. Google Compute Engine can be accessed via the Developer Console, RESTful API or Command Line Interface.  
> 
> On December 2, 2013, Google announced that GCE is generally available.
> It also expanded the OS support, enabled live migration of VMs,
> 16-core instances, faster persistent disks and lowered the price of
> standard instances. At the Google Cloud Platform Live event on March
> 25, 2014, Urs Hölzle, Senior VP of technical infrastructure announced
> sustained usage discounts, support for Microsoft Windows Server 2008
> R2, Cloud DNS and Cloud Deployment Manager. On May 28, 2014, Google
> announced optimizations for LXC containers along with dynamic
> scheduling of Docker containers across a fleet of VM instances.

[https://en.wikipedia.org/wiki/Google_Compute_Engine][1]


  [1]: https://en.wikipedia.org/wiki/Google_Compute_Engine

=== [1158] of [1277] ============================= id=[120] ==
Q:  What is a better alternative to W3Schools? 
questiontag_set : ['web development']
datetime_added  =[2014-09-29 03:05:54.952180+00:00]
datetime_updated=[2014-09-29 03:05:54.952210+00:00]
---------------------------------------------- id=[100] --
A:
MDN (Mozilla Developer Network): [https://developer.mozilla.org][1]


  [1]: https://developer.mozilla.org/en-US/

=== [1159] of [1277] ============================= id=[119] ==
Q:  What is an "attack vector" in computer security?
questiontag_set : ['computer security']
datetime_added  =[2014-09-26 20:15:24.929056+00:00]
datetime_updated=[2014-09-26 20:15:24.929087+00:00]
---------------------------------------------- id=[99] --
A:
An attack vector is a path or means by which a hacker (or cracker) can gain access to a computer or network server in order to deliver a payload or malicious outcome.   [http://searchsecurity.techtarget.com/definition/attack-vector][1]


A vector in computing, specifically when talking about malicious code such as viruses or worms, is the method that this code uses to propagate itself or infect the computer. This sense is similar to, and derived from, its meaning in biology.  [https://en.wikipedia.org/wiki/Vector_(malware)][2]

A "vulnerability" is a specific problem in the code having a security impact while an "attack vector" is a way of triggering / reaching the vulnerability.  [http://secunia.com/blog/vulnerabilities-vs-attack-vectors-97][3]


  [1]: http://searchsecurity.techtarget.com/definition/attack-vector
  [2]: https://en.wikipedia.org/wiki/Vector_%28malware%29
  [3]: http://secunia.com/blog/vulnerabilities-vs-attack-vectors-97

=== [1160] of [1277] ============================= id=[118] ==
Q:  What are the best-kept secrets of great programmers?

[http://www.quora.com/What-are-the-best-kept-secrets-of-great-programmers][1]


  [1]: http://www.quora.com/What-are-the-best-kept-secrets-of-great-programmers
questiontag_set : ['software architecture']
datetime_added  =[2014-09-26 01:04:33.972400+00:00]
datetime_updated=[2014-09-26 01:04:33.972431+00:00]
---------------------------------------------- id=[98] --
A:
**Code for composition.**  The better a problem can be decomposed into highly-focused pieces, the more readily one can reuse code.  Composition is about writing code so that bits and pieces are like components that can be snapped together to produce increasingly complex components.  Things compose better when they have a single, well-defined responsibility.  Keeping concerns separate naturally falls out of the idea of coding for composition.
 
**Code for readability.**  The better code articulates its intent, the better the code.  Don't be clever if it obfuscates the problem the code is attempting to solve.  By communicating intent, it makes it easier to notice when the code is not doing what the intent represents.

Programs must be written for people to read, and only incidentally for machines to execute. ~H. Abelson and G. Sussman

**Code in several fundamentally-different languages.**  Even if you don't actually use a language to make things, being able to read and understand its concepts opens up a world of ideas.  (You'll be able to watch talks and read posts you wouldn't have otherwise enjoyed.)  Whenever you learn a new language or library, mind the ideas more than the semantics.  Ideas are transferrable and reusable.  If you're literate in a single language, your exposure to ideas will be limited to those of a single community.  Don't tell yourself it's better to be great at one language than versed in several.  A diverse programmer knows more about using technology (and probably writing good code) than a programmer who put all his eggs in one basket/language.  Technology is fundamentally about experimenting with and executing ideas.  Being diverse opens doors to new ideas.

**Code for "good enough."**  Deadlines accompany professional work.  As a result, a system will never be as good as it could have been given more time.  Time is, however, a limited resource -- unless you're working on a pet project.  In that case, there are always features to be added and refactoring to be done.  The truth remains: good enough code that ships is always superior to godlike code that never does.  Great programmers write suboptimal code daily.  That's the nature of the beast.  There just isn't the time.

**Code to mitigate the risks of state.**   Functional languages embrace this; however, even imperative ones can reduce the number of moving parts.  Generally this is about being more declarative and relying more on immutable values and data structures than on functions.  The more moving parts, the sloppier the program. 
 
**Code for expected change.**  Programs endure for a time and will be changed before they're retired.  Simply effecting a change that solves a problem is naive.  There are dozens of options for solving a problem and each has its own characteristics.  An experienced programmer will attempt to choose an option that permits future changes to be more easily fit into the existing structure.  (The tricky part is learning to anticipate where change is likely to occur.)   In turn, future changes are more constructive than destructive.  At its best, new parts can be injected or plugged into a system without having to change existing parts.
 
**Code to keep components ignorant of each other.**  A component should be oblivious to the specifics of another.  A minimal public API aids in composition.  (The simplest component -- understanding just one message -- is a function.)  If we can avoid directly connecting components all the better.  This gives rise to messages, to queues, to asynchrony and to concurrency.  And once you're speaking in terms of messages, you can introduce a dispatcher who takes on the job of routing messages.  At this level, components can be blissfully ignorant of the world around them.

**Code using messages.**  The semantics of a function are give it an input and it returns an output.  The sender (the one giving the input) and the receiver (the one receiving the output) are the same abstract actor: the site of invocation itself.  While this kind of coding is necessary at the lowest level, at a higher level systems should be constructed with commands (fire-and-forget messages).  Commands effect state change and produce side effects.  (While we must constrain how and where we produce side effects, they are unavoidable if things are to get done.)   Ultimately, these effects should produce events.  This improves the semantics of input and output by allowing numerous receivers to act on events, potentially issuing other commands and producing other events. Flowing messages are at the heart of robust, interactive, and responsive systems.
 
**Code to interfaces.**  Abstract ideas compose better than concrete ones.  Whenever you have two things that speak in similar terms, an interface is in order.  This gives rise to polymorphism and eliminates conditional logic and anything that minimizes the number of logical paths through a system is good.  Few things are as valuable to a programmer as interfaces.  They are at the core of systems that are easy to extend and compose.


[http://www.quora.com/What-are-the-best-kept-secrets-of-great-programmers][1]


  [1]: http://www.quora.com/What-are-the-best-kept-secrets-of-great-programmers

=== [1161] of [1277] ============================= id=[117] ==
Q:  What parts of Google software engineering culture do you use and propagate after you left Google?
questiontag_set : ['software engineering culture']
datetime_added  =[2014-09-24 15:45:37.602960+00:00]
datetime_updated=[2014-09-24 15:45:37.602994+00:00]
---------------------------------------------- id=[97] --
A:
Here are six core principles that I took away from Google's engineering culture and that you might be able to learn from:

1.  **Dedicate engineering resources toward shared tools and abstractions.**   
From the very early days, Google has invested heavily in tools and abstractions like Protocol Buffers, MapReduce, BigTable, and more that are used throughout the engineering organization. The attitude of solving a problem really well once and then getting everyone internally to adopt it has had huge payoffs. Each team spends fewer mental cycles choosing which tools to use, dedicated tools teams can focus on improvements to engineering productivity, and those improvements easily propagate to everyone already using the tools or services. When contrasted with engineering organizations where each team might use vastly disparate tool chains, this philosophy also means that it's much easier to understand the designs behind many projects once you've learned the fundamental building blocks. The downside of this approach is that sometimes you might feel pressured to shoehorn your use case into a particular well-supported tool, even if it wasn't the best tool for the job.
1. **Invest in reusable training materials to onboard new engineers.**  
One reason I was able to quickly become productive within Google was because the company had invested so many resources into training documents called codelabs. Codelabs covered the core abstractions at the company, explained why they were designed, highlighted relevant snippets of the codebase, and then validated understanding through a few implementation exercises. Without them, it would've taken me much longer to learn about the multitude of technologies that I needed to know to be effective, and it would have meant that my teammates would have had to spend more time explaining them to me. My positive experience with codelabs at Google strongly shaped my later decision to push for codelabs in the onboarding process for new engineers at Quora.
1.  **Standardize on coding conventions.**   
Each convention on whitespace, capitalization, line length, whether to use smart pointers, etc., might individually seem trivial, but has huge implications when you hit Google's scale. I won't be the first to admit that it was annoying when code reviewers nitpicked my code because I indented a line incorrectly or added two characters past the prescribed line length. But because everyone followed the same conventions, it made browsing the source code significantly easier. There was little overhead to learn a new team's conventions when switching teams or working on cross-functional projects. Conventions are one of those things that's easy to ignore when your team is small but then takes increasingly more effort to change when the codebase and team get large enough such that you actually wished for some consistency. Agree on some set of consistent conventions early if possible, or just use the style guides that Google has open sourced.
1.  **Increase code quality through code reviews.**  
 Having code reviews required and programmatically enforced for every change slows down iteration speed but optimizes for code quality. New engineers received the feedback they needed to quickly pick up best practices and converge on accepted levels of code quality. The higher quality code overall also meant that new engineers modelling off of the code around them would also tend to write cleaner code to start. Code reviews therefore were instrumental in helping the company maintain high-quality software at large scale.
1.  **Having the right data (and lots of it) solves many problems.**  
 Peter Norvig, the Director of Research at Google, has frequently talked about the "unreasonable effectiveness of data" at solving otherwise complex problems. [6] [7]  The right data can help you understand users, slice through office politics, resolve arguments, and let you track progress. Developing logging and data infrastructure like Sawzall and MapReduce made it possible for engineers at Google to sift through massive amounts of it.
1.  **Automate testing to scale your code.**   
Google has an extremely strong culture of unit testing, for which "Testing on the Toilet" is but one illustrative example. Nearly every code change I worked on was accompanied by a unit test, and code reviewers would rigorously check for them. It made developing a given change slower, but it also meant that hundreds or thousands of engineers could scalably make changes to the same parts of the codebase without sacrificing too much quality or reliability. In the same way that Google invested in shared tools, it would also heavily in shared testing frameworks and educating people in best testing practices to make writing tests easier.


Every week, a group of Googlers would plaster the walls of bathroom stalls worldwide with one-page sheets that shared the week's testing tip. One week, the one-pager might 
discuss dependency injection and provide a simple example of how to use it in various languages; another week, it might share how to set up a tool for measuring test coverage of your team's codebase. The "Testing on the Toilet" initiative was a quirky and fun way to teach engineers something new and useful as they were doing their business. [1] It also highlighted one of the key strengths of Google's engineering culture: efficiently disseminating a consistent and opinionated set of best practices to a large engineering organization.


**Clear documentation on how to spawn the service end-to-end.**  
Stress test: A freshly hired intern with the right permissions should be able to do it a few hours max.

**Testing culture.**  
Unit, integration, end-to-end, to validate the numbers, etc.

**Mail and calendar culture.**  
I'm surprised most companies I get drawn into have neither "eng@ / bugs@" e-mail aliases nor the "OOO" calendar.

**Hiring bar.**  
I would never hire someone who did not write code on the whiteboard.
For at least two different problems.

**Single repository, if possible.**  
With coding style guides, regular code cleanups, etc.
[http://www.quora.com/What-parts-of-Google-software-engineering-culture-do-you-use-and-propagate-after-you-left-Google][1]


  [1]: http://www.quora.com/What-parts-of-Google-software-engineering-culture-do-you-use-and-propagate-after-you-left-Google

=== [1162] of [1277] ============================= id=[116] ==
Q:  What is prototypal inheritance?
questiontag_set : ['javascript']
datetime_added  =[2014-09-23 00:14:34.377879+00:00]
datetime_updated=[2014-09-23 00:14:34.377911+00:00]
---------------------------------------------- id=[96] --
A:
In a nutshell, prototypal inheritance is when an object inherits from another object. This differs from classical inheritance, in which a class inherits from another class.

In a classical language, classes typically define the structure of objects, but in a prototypal language, the objects themselves define their structure, and this structure can be inherited and modified by other objects at runtime.

Prototypal inheritance first appeared in Self and has since appeared in many other languages, but these days most people think of JavaScript when they think of prototypal inheritance.

Here's an example of prototypal inheritance in action in JavaScript:


    // This function serves as an object factory. It creates a new
    // object that uses the specified object as its prototype.
    function object(o) {
      function F() {};
      F.prototype = o;
      return new F();
    }
    
    // This is our parent object. It will be used as the prototype
    // for applePie below.
    var pie = {delicious: true};
    
    // This is a new object that inherits from pie. This creates a
    // lookup chain, so any properties we look up on applePie that
    // don't exist there will then be delegated to pie.
    var applePie = object(pie);
    
    // As you can see, pie is applePie's prototype. Note that the
    // __proto__ property is a nonstandard language extension that
    // isn't present in all implementations; it's just used here
    // for demonstration purposes.
    console.log(applePie.__proto__ === pie); // true
    
    // The "fruity" property exists on applePie, while the
    // "delicious" property exists on pie.
    applePie.fruity = true;
    console.log(applePie); // => {fruity: true, delicious: true}
    
    // We can change the "delicious" property on pie, and since
    // pie is applePie's prototype, that change will be reflected
    // in lookups from applePie as well.
    pie.delicious = 'totally!';
    console.log(applePie);
    // => {fruity: true, delicious: "totally!"}
    
    // If we add a "delicious" property to applePie, the lookup
    // will stop there instead of delegating to the prototype.
    applePie.delicious = 'you bet!';
    console.log(applePie);
    // => {fruity: true, delicious: "you bet!"}
    
    // But pie will not be modified.
    console.log(pie); // => {delicious: "totally!"}


The ability to alter prototypes at runtime provides a great deal of flexibility over classical inheritance (although there are class-based languages, like Smalltalk and Ruby, in which classes have similar dynamic capabilities).


I'll have to respectfully disagree with Ryan about what "prototypal inheritance" means. While it's true that JavaScript is just objects and not classes, I take issue with the word "inheritance" itself, as that name implies (from classical languages) a copy-operation where behavior from the "parent" is duplicated into the "child". This is not at all how JavaScript works.

In JavaScript, two objects end up linked to each other (via the technique Ryan showed), and this linkage is through the internal [[Prototype]] chain. As Tim Lind correctly explained in his answer, this linkage via [[Prototype]] is how when you ask for a property or method on an object, if it's not there, the internal [[Get]] lookup operation will traverse the [[Prototype]] chain and try to instead resolve the property/method on the linked object. If not found there, it will keep going up the [[Prototype]] chain until it either satisfies the lookup, or runs out of objects to traverse.

When you analyze the mechanism in this way, it's clear that, by default, JavaScript isn't "inheriting" by copying DOWN the chain, but rather delegating UP the chain. It's a completely different mechanism.

Many JavaScripters seem to think that adding "prototypal" to "inheritance" somehow means that they can fundamentally reverse the long-standing meaning of "inheritance", but I totally disagree. I think trying to do so is like comparing an apple to an orange, and saying 'No, no, that's not an apple, it's just a red orange'.

I say we should call an apple an apple and an orange an orange. Class-oriented languages have inheritance. Object-languages like JS have behavior delegation. They're two separate mechanisms, inherently opposite in their effect. They lead to, I think, very different patterns for how to model tasks.

And, in particular, I think the most confusion comes when trying to use deliberately conflated terms like "prototypal inheritance" and pretending that the reversal of the accepted meaning of the word is OK.

So, inheritance vs. behavior delegation is the proper contrast, IMO. To put it another way, "OO" means "object oriented" (which really means class oriented), so to contrast that, I came up with "OLOO", which means "objects linked to other objects". At the end of the day, no matter what syntax hoops you jump through in JS to try to convince yourself you're doing classes, what you end up with is just a bunch of objects that are each linked to another object: behavior delegation.

If you'd like to read more about my thoughts on the subject, I wrote JS Objects: Inherited a Mess awhile back that's an in depth exploration of this topic. I am also writing a series of books called You-Dont-Know-JS, where the title I'm currently writing ("this & Object Prototypes") is actually heavily about this exact topic.
 
[http://www.quora.com/What-is-prototypal-inheritance][1]


  [1]: http://www.quora.com/What-is-prototypal-inheritance

=== [1163] of [1277] ============================= id=[115] ==
Q:  What are the paradigms of 10X engineers when they are designing and implementing software?
Specifically what is different about how 10X engineers think about designing and implementing software that is responsible for their 10X results?

**Take the right routes.**

The right routes are effective. They have no blockers.

Getting stuck is a blocker. To comfortably say "it will be ready by tomorrow", one should have a plan that has none.

10x would rarely start executing on a plan on which hidden blockers may be encountered.

While growing and learning, focus first on eliminating the areas where "it would take fifteen minutes" can potentially become "it turned out to be much harder".


**Know the numbers.**

Not just Latency numbers every programmer should know.

Number of users, page requests, signup requests.
Number of terabytes of data stored overall and accessed daily.
Number of tables/rows affected by major user actions.

Number of servers that should run the service. Number of replicas the data should have.

QPS that internal and external APIs should handle.

Where would these numbers be growing.

Which ones to focus today, next week, a month from now and half a year from now.


**Rely on intuition, fundamental knowledge and 10x-s around.**

It is good to have broad knowledge of existing modules. The knowledge that would ring the bell "this has already been implemented".

It is great to have understanding and intuition that would say: "Wait! fundamentally the problem that module is solving is not the one we are facing. Relying on it will backfire soon."

Great is better than good.

It's awesome to know people to call and ask: "Hey, weren't you just choosing between X and Y for a big project? What research and experiments did you do? What did you discover? What did you settle on?"

Awesome is better than great.


**Follow and impose best engineering practices.**

"First, I believe that it is no harder to build something great than to build something good" -- Jim Collins, "Good to Great".

Best engineering practices are simple to follow and produce great results.

Clear bug tracking.
Code reviews and coding guides.
Unit, regression and integration tests, code coverage reports.
Design docs.
Dashboards and monitoring.
Alerts and paging.
Repeatability of intermediate results.

Above are just little things. Together they make big changes.


**Let the problem dictate the design and the tools.**

"I suppose it is tempting, if the only tool you have is a hammer, to treat everything as if it were a nail." (Law of the instrument)

10x is not necessarily about knowing all the tools. It is about having an open mind.

No matter how knowledgeable one is with certain method or technology, if there is different one that can potentially make the task significantly easier, it is worth a shot.

"Significantly" is important though. Being overly keen to try every new thing only fits a teenager or a hipster.


**Understand technical debt.**

Every solution and piece of code is eventually retired. Some live minutes, some months, some years.

Knowing in advance whether what one is about to be implementing is something that should outlive certain deadlines is very sobering. 

Yet, many people overestimate the lifespan of their designs and implementations.

If one has the confidence that the module they are working on is going to be actively supported for more than six months, open-sourcing it is something to be strongly considered.

One, who is capable of consistently demonstrating an understanding of what modules will be actively used 6+ months down the road, is very likely 10x.


**Design and develop for retirement.**

This naturally follows the previous bullet point.

There are hundreds of ways to design a system well.
They can be robust, scalable, easy to implement, easy to fix if broken, etc.

"Easy to retire and replace once obsolete" is one thing people often miss. Yet, it becomes crucial once the projects starts to acquire technical debt. This does mean "from day one".


**Strive for beauty.**

Engineering is amazingly exciting at the level where the horizons open up and understanding of the concepts, not tips and tricks, leads the way.

At that point engineering becomes an art, where perception of beauty takes over bean counting. Getting there is worth the journey.
 
[http://www.quora.com/What-are-the-paradigms-of-10X-engineers-when-they-are-designing-and-implementing-software][1]


  [1]: http://www.quora.com/What-are-the-paradigms-of-10X-engineers-when-they-are-designing-and-implementing-software
questiontag_set : ['software architecture', 'software engineering culture']
datetime_added  =[2014-09-19 16:28:42.153476+00:00]
datetime_updated=[2014-09-19 16:28:42.153508+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1164] of [1277] ============================= id=[114] ==
Q:  What makes a good engineering culture?

One of my favorite interview questions for engineering candidates is to tell me about one thing they liked and one thing they disliked about the engineering culture at their previous company. Over the course of a few hundred interviews, this interview question has given me a sense of what good engineers look for and what they're trying to avoid. I also reflected back on my own experiences from the past six years working across Google, Ooyala, and Quora and distilled some things that a team can do to build a good engineering culture:

1. Optimize for iteration speed.

Quick iteration speed increases work motivation and excitement. Infrastructural and bureaucratic barriers to deploying code and launching features are some of the most common and frustrating reasons that engineers cite during interviews for why they're leaving their current companies.

Organizationally, quick iteration speed means giving engineers and designers flexibility and autonomy to make day-to-day decisions without asking for permission. While I was at Google, any user-visible change to search results, even for low-traffic experiments, required Marissa Mayer's approval at a weekly UI review. Needless to say, while this allowed Google to protect its search brand, it significantly hampered innovation. Optimizing for iteration speed also means that there are well-defined processes for launching products, so that cancellations don't happen unexpectedly after significant time investment.

Infrastructurally, optimizing for iteration speed means building out continuous deployment with a fast deployment process, high test coverage to reduce build and site breakages, fast unit tests so that people run them, and fast and incremental compiles and reloads to reduce development time. Continuous deployment, where commits go immediately to production, deserves a special mention. Prior to using it at Quora, it would've been hard for me to internalize that the benefits it provides toward iteration speed outweigh the risks of site breakages, at least for small engineering teams. People are more excited about features and incentivized to fix bugs because changes see live traffic quickly. It's also significantly easier to reason about and pinpoint the source of errors for a narrow window of committed code rather a week or more's worth of batched changes.

Team-wise, fast iteration speed means having a set of strong leaders to help coordinate and drive team efforts. Key stakeholders in a decision need to decide effectively and commit to their choices. To borrow a phrase from Bill Walsh, a leader who coached the 49ers to 3 Super Bowls, strong leaders need to "commit, explode, recover," which means committing to a plan of attack, executing it, and then reacting to the results.  A team crippled with indecisiveness will just cause individual efforts to flounder. [1]

2. Push relentlessly toward automation.

In his tech talk "Scaling Instagram", Instagram co-founder Mike Krieger cited "optimize for minimal operational burden" as a key lesson his 13-person team learned in scaling the product to tens of millions of users. [2] As a product grows, so does the operational burden per engineer, as measured by the ratio of users to engineers or of features to engineers.  Facebook, for example, is well-known for touting scaling metrics like supporting over 1 million users per engineer. [3]

Automating solutions and scripting repetitive tasks are important because they free up the engineering team to work on the actual product. Ensuring that services restart automatically if possible when they fail and that services are easily and quickly replicated at peak traffic is the only sane way to manage complexity at scale. In the short-term, there's always the tempting tradeoff of applying a quick band-aid manually rather than automating and testing a long-term fix.

Etsy's motto of "measure anything, measure everything" [4] and its support of open-source monitoring and charting tools like graphite [5] and statsd [6] highlight an important aspect of automation -- that automation must be driven by data and monitoring. Without monitoring and logs to know what, how, or why something is going wrong, automation is difficult. A good follow-up motto would be to "measure anything, measure everything, and automate as much as possible."

3. Build the right software abstractions.

MIT Professor Daniel Jackson captures the importance of software abstractions well [7]:

"Pick the right ones, and programming will flow naturally from design; modules will have small and simple interfaces; and new functionality will more likely fit in without extensive reorganization. Pick the wrong ones, and programming will be a series of nasty surprises: interfaces will become baroque and clumsy as they are forced to accommodate unanticipated interactions, and even the simplest of changes will be hard to make."

Part of what allowed thousands of engineers to build scalable systems at Google is that really smart engineers like Jeff Dean and Sanjay Ghemawat built simple but versatile abstractions like MapReduce [8], SSTable [9], protocol buffers [10], and the like. Part of what allowed Facebook engineering to scale up is the focus on similarly core abstractions like Thrift [11], Scribe [12], and Hive [13].  And part of what allows designers to build products effectively at Quora is that Webnode and Livenode [14] are fairly easy to understand and build on top of.

Keeping core abstractions simple and general reduces the need for custom solutions and increases the team's familiarity and expertise with the common abstractions. The growing popularity and reliability of systems like Memcached, Redis, MongoDB, etc. have reduced the need to build custom storage and caching systems. Funneling the team's focus onto a small number of core abstractions rather than fragmenting it over many ad-hoc solutions means that common libraries get more robust, monitoring gets more intelligent, performance characteristics get better understood, and tests get more comprehensive. All of this helps contribute to a simpler system with reduced operational burden.

4. Develop a focus on high code quality with code reviews.

Maintaining a high-quality code base increases the productivity of the entire engineering team. Cleaner code is easier to reason about, quicker to develop on, more amenable to changes, and less susceptible to bugs. A healthy code review process makes this possible.

Establishing a process for timely code reviews, whether pre-commit or post-commit, improves code quality in a few ways.  First, the peer pressure of knowing that someone will be reviewing your code and that committing poorly written code will likely let down your teammates is a strong deterrent against hacky, unmaintainable, or untested code. Second, code reviews provide opportunities for the code reviewer and author to learn from each other to write better code.

If the code reviews are easily accessible to other members of the engineering team, then the reviews also bring along the benefits of a) increasing accountability for reviewing code in a timely manner, b) allowing team members -- particularly, newer ones -- to model off of others' good code reviews, and c) speeding up the dissemination of best coding practices.

Counter-arguments that nimble teams don't have time to spend on code reviews ignore the technical debt that can easily accumulate from poorly written code. Ooyala, in its very early startup days, used to optimize for cranking out as many features as possible, with an absence of code reviews; the result was that while the initial product may have gone to market more quickly, the resultant code became painful to modify, and we spent over a year just rewriting brittle code to eliminate technical debt.

Google, at its size, does pre-commit code reviews for all code, but smaller teams don't need to be as comprehensive or strict, and not all code needs to be reviewed with the same rigor. Ooyala later adopted post-commit reviews over email for core or risky changes while I was there. At Quora, we currently conduct all code reviews in Phabricator [15], mostly post-commit, and apply different standards for model or controller code and view code; for sensitive code or for code from newer engineers, we'll either do pre-commit reviews or try to review them within a few hours of the code being submitted.

5. Maintain a respectful work environment.

Respect among peers forms the foundation for any type of open communication. A place where people feel comfortable challenging each other's ideas is one where sound ideas get forged through debate. A place where people easily get offended is one where crucial feedback gets withheld.

In 1948, Alex Osborn outlined the familiar brainstorming approach that's been popular in work environments for the past few decades, where participants come together, set aside criticism and negative feedback, and collectively pool together creative ideas without fear of being judged. [16] Respectful deferment of judgment is key to this type of brainstorming session. Recent psychology research has started to overturn Osborn's approach, suggesting that encouraging debate in brainstorming sessions actually helps to avoid groupthink and generates more effective ideas. In light of this research, a respectful environment becomes even more critical so that attacks are directed toward ideas rather than being ad-hominem. [17]

Engineering often spans a wide range of areas (systems, machine learning, product, etc.) and not everyone has the same expertise in each area. A strong team in fact probably ought to have individuals who are uniquely strong in certain areas even if they end up being deficient in others. This sometimes makes it tricky for say, a systems engineer to evaluate the proficiency of a product engineer, but it's important in a healthy engineering culture to respect those differences and to not judge solely based on your own strengths.

6. Build shared ownership of code.

While it's natural for individuals to become proficient in various parts of the code base or infrastructure, no one person should feel that they own or are the sole maintainer of any one piece. While having individuals become experts that own certain areas for a year or more might increase effectiveness in the short run, this approach ends up hurting in the long run. 

Organizationally, shared code ownership provides three benefits. First, keeping the bus factor [18] greater than one relieves stress from the maintainer and reduces risk for the team in case the maintainer leaves. It also makes it difficult for that one person to take worry-free time off. I sure don't miss the days when I was the sole maintainer of Ooyala's logs processor and got texted by pager alerts while hiking on volcanoes in Hawaii.

Second, shared ownership empowers engineers who aren't knee-deep in the particular area to contribute fresh insights. It frees engineers from the sense that they're stuck on certain projects and encourages them to work on a diversity of projects, which helps to keep work interesting and boosts employee learning and motivation. In the long run, it reduces organizational risk that some engineer feels stagnated and decides to leave. [19]

Third, shared ownership also sets the foundation for having multiple team members swarm (a technique from agile development) together on a high-priority problem when necessary to finish a strategic goal more quickly. With siloed ownership, the burden typically falls on one or two people.

One mistake that many engineering organizations make too early on is dividing the entire team into subteams with tech leads when the team's still small. Subteams build walls of ownership that reduce incentive to cross those walls, since individuals will likely be assessed by their subteam's objectives. Ooyala had subteams while I was there, and one thing I missed out on was the opportunity to work with some folks on other teams; they've since adopted an agile development process with a much larger focus on shared code ownership that I've heard has made large strides in work happiness and productivity. One aspect of Quora that I've loved is that we've emphasized projects over teams, and I've had an opportunity to work on projects ranging from user growth, machine learning, moderation tools, recommendations, analytics, site speed, and spam detection.

7. Invest in automated testing.

Unit test coverage and some degree of integration test coverage is the only scalable way of managing a large codebase with a large group of people without constantly breaking the build or the product. Automated testing provides confidence in and meaningful protection against large-scale refactorings that are required to improve code quality. In the absence of rigorous automated testing, the time required for manual testing either by the engineering team or by an outsourced testing team easily becomes prohibitive, and it's easy to fall into a culture of fear for improving a piece of code just because it might break.

In practice, automated testing is a requirement for making continuous deployment work as the team grows. Codebase size grows over time as the product grows, but average familiarity with the codebase by team members decreases as new people join. Testing and validation are most easily done by the original code authors when the code is fresh in their minds than by those who try to modify the code months or years later. Encouraging a strong unit testing culture shifts the validation responsibility toward the authors.

8. Allot 20% time.

Gmail found its roots in Paul Buchheit's 20% project, and he hacked together the first version in a single day. [20] Google News, Google Transit, and Google Suggest also started and launched as 20% projects. I used 20% time while at Google to write a python framework that made it significantly easier to build search page demos.  While Google's 20% time may be less productive now than during the early days of the company [21], the notion of letting engineers spend 20% of their time working on something not on their product map remains a cradle of innovation for smaller engineering organizations.

Ooyala didn't officially have 20% time while I was there, but I took some anyway and wrote a command-line build tool for Flex and Actionscript that sped up the team's build times, just as Adobe's Flex Builder tool chain started to degrade, and the tool's still in use today even though the engineering team has nearly tripled in size. Atlassian adopted 20% time after experimenting it for year. [22] A variation of 20% time that Facebook's fond of and that Ooyala added later is periodic hackathons -- all-night events where the rule is that you can work on anything except your normal project. [23]

Top-down approaches to product planning, while necessary for focusing the overall direction of the company, can't account to for the multitude of ideas that might arise from engineers closer to the ground. As long as engineers are accountable for their 20% time and focus on what can be high-impact changes, these projects can lead to large steps forward in progress. Without official 20% time, it's still possible but much more difficult for engineers and designers to try out crazy ideas -- the dedicated ones basically have to find weekends or vacation days to do it.

9. Build a culture of learning and continuous improvement.

Learning and being sufficiently challenged are requirements for what psychology professor Mihaly Csikszentmihalyi calls a state of "flow", where someone is so completely focused and motivated by what they're doing that they even lose track of time. [24] The direct and immediate feedback loop provided by faster iteration cycles is another requirement.

Weekly tech talks provide forums for engineers to share their designs or what they've built, creating an opportunity for engineers to take pride in their work and for the team to learn more outside their immediate scope of work.  Documenting processes internally like how a email service works or how to make ranking changes to a search service also empowers engineers to learn and explore new things on their own, nicely complementing 20% time.  At Quora, we do this by running an internal instance of Quora where we ask product- and development-related questions.

A corollary of building a culture of learning is focusing on mentoring and training to make sure that everyone has the basic algorithms, systems, and product skills necessary for success.  The more an engineering organization grows and the more effort gets spent on recruiting (particularly college recruiting), the more effort needs to be invested into mentoring and training. It might seem burdensome for a single mentor to spend an hour per day for a new hire's first 4 weeks on the job, but that investment represents less than 1% of the total time that hire will spend in a year and has significantly high leverage in determining whether the person is set up for success.

10. Hire the best.

Hiring the best is the foundation for many of the other philosophies listed. It's hard to respect someone if you think they're a B-level engineer. It's hard to give someone autonomy in product development if you don't trust their product instincts. It's hard to recognize the right abstraction to build without enough engineering experience. It's easy to fall into a trap of building something complex without other smart people to challenge your ideas and drive you toward simplicity.

There's a saying around Silicon Valley, coined by Steve Jobs, that "A players hire A players. B players hire C players." [25,26]  Focusing on recruiting and hiring the right people is hard but critical to effectively growing an engineering organization.  Yishan Wong, who previously was an engineering manager and director at Facebook, argued that hiring has to be the number one priority for everyone in the engineering organization, not just for managers, but for engineers as well. [27]  He also quite rightly points out the difference between "hiring the best" and "hiring the best candidate that you've interviewed."

In the early days of Ooyala, we were so overwhelmed with the queue of inbound customer work that we nearly caved in to lowering our hiring bar so that we could hire enough people to get all our work done.  I'm glad that we didn't, as the technical debt from lower quality code and weaker engineers on the team would've ended up hurting the team and the product.

Building a good engineering culture is certainly a lot of work, but the resulting work environment is well worth it.

11. Seriously consider open allocation. 

What's that? Open allocation means people choose what projects to work on and are responsible for delivering value to the firm, but trusted to pick projects. It's not a free-for-all. If you can't lead (and you actually have to lead if you want followers because projects aren't staffed by managerial authority) then you are expected to follow and work on other peoples' ideas until you have the credibility that will encourage others to follow you. People who can't lead and don't follow and therefore never produce anything will be fired, although they should be given the benefit of the doubt for a while so long as they aren't hurting anyone.

Right now, the current typical arrangement is to get people to do undesirable work by threatening to turn off their income. Some people are "allocated" to it and have to do it or transfer is not an option: they're fired from the whole company. That doesn't work very well because the good people leave bad projects, but that often requires them to leave the whole company because of headcount idiocy and baroque transfer policies, and the bad ones stay, but they don't do a good job. 

Valve puts wheels under each employee's desk. If you want to transfer to another project, just move. It works better than any alternative. 

Consider it a 2-by-2 matrix (yeah, I know) of interesting vs. unpleasant projects and important vs. unimportant. Interesting, important projects everyone wants. Getting people to do them is no problem. Interesting, unimportant projects should be allowed on a "20% time" basis, because they might become important. Unpleasant, important projects need a bounty. Think of it like a German-style board game: put victory-point chips or doubloons (i.e. promotion opportunities) on it until the market clears. Unpleasant, unimportant projects won't be done under open allocation-- and they shouldn't be done. 

12. Mentor subtracters, fire dividers. 

Subtracters are people who currently cost more than they're worth to the company. That's pretty much everyone in the first few months. They may require some oversight and mentoring, but they'll get better. Dividers are the ones who make other people unproductive. They damage the culture, start fights, and tend to create technical problems through bad decision-making. Fire them. Don't waste their time and yours on a so-called "performance improvement plan" (you'll have a "walking dead" employee in the office for months, and that's bad for morale). Cut a severance check and get rid of them, same-day. Make non-disparagement and non-disclosure (in addition to non-litigation) terms of the severance offer so no one knows that a fired employee was paid to go away (or even, for sure, that the employee was fired.) 

13. Mentor adders, too.

You want the adders to be multipliers: people whose work makes other people be productive. That shouldn't require a transition into "people management". Let them take IC roles in increasingly important infrastructural positions. This is what engineering ladders should actually represent. Not, "this person is better than you because he's a Staff Engineer XVI and you're a Software Engineer II" but "this person has shown multiplier-level contributions at the large scale".

14. Deadlines are toxic. 

I'm going to quote How I Met Your Mother: nothing good happens after 2:00 am. That's not literally true; peoples' sleep cycles are all different. Change it to "nothing good happens in crunch time". So much technical debt is piled on in the name of deadlines that it's not funny. If there's a deadline, there has to be a solid, existential reason for it. Otherwise, you need to trust your engineers to work at a reasonable pace without expecting them to cut corners on code integrity. 

15. Eschew "because I say so" and make it a learning experience. 

If an order has to be followed and it comes from the business side, then people need to know why the decisions was made. Turn it into an opportunity for engineers to learn more about the business ("this is what I have to do in order to keep paying you, and this is what you have to do so I can do my job") and, if the decision is undesirable, ask them for input regarding possible alternatives. Some engineers won't like this, but many will appreciate the opportunity to learn something different. 

16. Small-program methodology is right, and large-program is usually wrong. 

The contemporary "Java culture" loves huge programs with 15 developers on them at any given time, because that allows executives to track headcount, but that's stupid. Large single programs are almost always a mistake. Make it a system and give it the respect a system deserves. The programmer:program relationship should be one-to-many, not many-to-one. 

The data science/machine learning community is increasingly turning to small-program methodologies because when the problems are actually hard (mathematically speaking) large-program development just doesn't work. If you actually have to think instead of following orders, it's much easier to be productive in a world of small programs where it's still possible for a program to fit in one person's head.

There's one counterexample. Databases are large programs with a lot of features and requirements that all have to work together. They have a very complex implementation despite a fairly simple (SQL, in the relational world) interface. They need to be big programs. However, it has taken decades for people to get that stuff right. Postgres is awesome, but inventing another one is not something you should stake your business on. 

17. Know what the "commodity programmer" phenomenon is and reject it. 

Much of the software engineering world in the enterprise is, unfortunately, optimized toward making mediocre programmers marginally employable rather than making good ones great. Hence the mediocre tools and slow development processes and dismal permissions systems. These will get you average/"commodity" programmers and average results. Average is failure. For startups, literally. For big companies, it's paying $10 million a year to retain 100 mediocre programmers when 4 really good ones, at a total of about $800,000 per year, would do just as well. 

You need to know what that culture is so you can differentiate yourself from it. See Edmond's point about fast iteration.
 

[http://www.quora.com/What-makes-a-good-engineering-culture][1]


  [1]: http://www.quora.com/What-makes-a-good-engineering-culture
questiontag_set : ['software engineering culture']
datetime_added  =[2014-09-19 16:03:23.527679+00:00]
datetime_updated=[2014-09-19 16:03:23.527748+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1165] of [1277] ============================= id=[113] ==
Q:  What is the purpose of the Trapit mom Surrogate class and QuickCheck SURROGATE type?
questiontag_set : ['trapit', 'trapit_mom']
datetime_added  =[2014-09-15 21:53:55.853245+00:00]
datetime_updated=[2014-09-15 21:53:55.853276+00:00]
---------------------------------------------- id=[95] --
A:
It represents a class of objects rather than a specific object.  The specific case it was initially implemented for is source traps.  Instead of having a QuickCheck object for every source trap, we just have a single surrogate object to represent all of them.

=== [1166] of [1277] ============================= id=[112] ==
Q:  In Elzar, for classes subclassed from Handler or NewHandler, what is `req.vars` ?
questiontag_set : ['trapit', 'trapit_elzar']
datetime_added  =[2014-09-13 20:08:09.072886+00:00]
datetime_updated=[2014-09-13 20:08:09.072923+00:00]
---------------------------------------------- id=[94] --
A:
`req.vars` contains the variables from the url endpoint (not from the query string), e.g., for the endpoint

    /v3/{org}/bookmarks/{user_id}/{trap_id}/

req.vars might look like:

    req.vars == {
        'org' : 'pdx',
        'user_id' : 'ffdd5744bc114627b8cc3dcac8d5f54c',
        'trap_id' : '9ec83362176f42e6a74bb7d4cbf821f8',
    }

=== [1167] of [1277] ============================= id=[111] ==
Q:  In the Elzar Handler and NewHandler, what does the `get_resource()` method do?
questiontag_set : ['trapit_elzar', 'trapit']
datetime_added  =[2014-09-13 19:57:35.626854+00:00]
datetime_updated=[2014-09-13 19:57:35.626895+00:00]
---------------------------------------------- id=[93] --
A:
`get_resource()` returns req.resource if it is not none, else it calls `load_resource()`, which must then be defined by the subclass.

`resource` is typically the REST resource being accessed.  e.g., for `/v3/{org}/traps/{trap_id}/`, the resource is the trap with the `{trap_id}`

    def get_resource(self, req):
        # TODO: (ec) remove try: except when Yaro is fixed not to break
        # getattr.
        try:
            if getattr(req, 'resource', None) is not None:
                return req.resource
        except KeyError:  # pragma: nocover
            pass  # pragma: nocover
        req.resource = self.load_resource(req)
        return req.resource

=== [1168] of [1277] ============================= id=[110] ==
Q:  How do Redis quickcheck records get created when traps are added or a member is added to a team?
questiontag_set : ['trapit', 'trapit_mom']
datetime_added  =[2014-09-12 23:44:30.754530+00:00]
datetime_updated=[2015-01-30 19:46:13.970909+00:00]
---------------------------------------------- id=[92] --
A:
`mom.model.trap.Trap.cache_perms()` calls:

    env.get_quickcheck().set_perms(self.uid.hex,
                                           'TRAP',
                                           self.org_id,
                                           self.owner_id,
                                           self.id,
                                           teams={t.id for t in self._teams})

`cache_perms()` is called by `update_teams()`  
`update_teams()` is called by:

      elzar.resources.trap.V3TrapHandler.set_teams()
      elzar.tests.__init__.ElzarTestCase.standard_org()
      elzar.tests.__init__.ElzarTestCase.create_trap()

=== [1169] of [1277] ============================= id=[109] ==
Q:  Startups: What are some common architectural design flaws at the early stages of a website, which might later make it difficult to scale?

Here are the basic design flaws I have seen at a few of the start-ups I have worked for.

**Flaw #1: failure to instrument**

You need to start logging and reporting on "what's happening" early on. It needs to be baked into the system. 

If your product has a "User Profile" page, you should have a ready report on how often that page was visited and how long it took to load, how many queries were involved (to cache and db). In fact, you should have that for basically every page in the system. If you have a "single-page" app, you should have it for every AJAX call to the server.

You should be able to count the number of calls to any given public method or API end-point. You should be able to graph this stuff over time.

This should be baked into the system. It should happen with minimal developer intervention. It should just work.

The same logic applies to servers. Take a look at Nagios/Cacti/Munin/Zabbix or something hosted like ServerDensity (pick one). Regardless of which one you choose, it should be running on every server you deploy. Make it part of your default VM image. Put it on your production box and your Dev boxes.

Make this server health stuff visible to your developers. They will be the cause of most of the issues, they need access to debug this stuff.

**Flaw #2: failure to exception log**

You will get exceptions, they will not always be evident to users of the app. They need to be logged to the box on which they happen and a centralized store. 

You need a centralized store.

Any non-trivial system will soon have multiple boxes that will all be logging exceptions. It's way too time consuming logging into multiple boxes hunting for logs.

**Flaw #3: no change history on data**

Most modern data systems have two types of data: core data & transactional data. (think Users vs. User actions)

In such systems, the footprint of the core data is generally small. But changes to that core data tend to have a far-reaching impact.

You should add hooks to your core data that tracks any and all changes automatically. So if I update my User Profile Name, the old name should be logged to some form of UserProfileHistory table.

This is really easy to bake in (especially with relational databases), but a pain to add later. 

Additionally, every core data object should have CreatedDate and ModifiedDate fields. These should "just work" within whatever ORM / data mapping tool you have. Developers should not have to code for this, they should have to take extra steps to remove this data.

Failure to have this data will bite you if you don't have it. It's free once you bake it in. It's expensive later.

**Flaw #4: failure to consider deletes**

Most core data can never be physically deleted, so you need to write in logical deletes from the beginning. This means identifying data that requires logical deletes and clarifying the related data that also gets logically deleted.

I have seen a lot of "first draft" code with zero delete support. People just don't think about deletes early on.

Don't be caught in this trap. Identify delete cases early on and ensure that your framework supports logical deletions out of the box. This can be as simple as the existence of an "IsDeleted" column in the data store / data object.

In any case, it should be immediately obvious from the code that an object is physical or logical delete. It should be immediately obvious from the code how this delete "cascades" to other related tables.

**Flaw #4a: failure to consider deletes part 2**

Your system will probably have a bunch of transactional data. (like your exceptions logs from #2). Certain classes of transactional data will have limited life spans.

Identify these early and plan for these deletions. Remember that normal deletions in a DB carry the same cost as inserts. So every piece of transactional data that you plan to delete will effectively be "written twice".

Most DBs have a way around this, some form of "truncate table", but it generally only works if you actually plan for it in advance.

Plan for it.

Interlude: But this isn't scaling?

If you look at the suggestions above, none of them seem to really address "scaling" directly. These seem like just "good practices". Honestly, most scaling is centered around "good practices".

If you ignore the practices above, you will hit a # of servers and suddenly realize how important it would be to have these in place. In many cases, lack of the above practices will completely hamstring your ability to debug a scaling problem. You will end up retro-fitting this stuff late at night just to figure out where the bottleneck is.

**Flaw #5: Poor deployment process**

Deploying your system should be easy. It should be a one or two-step process, every developer and ops person should know how to do it.

You should also be able to deploy "new environments" quickly. I should be able to get the latest code, tweak some configs and deploy a working system to bunch of VMs running locally.

If you're running "in the cloud", you should have processes to add "workers" to the system. If you need a new web server, you should have a "push-button" deploy process that fires up the appropriate VM, grabs the newest code, registers itself with the Monitoring system and adds itself to the load balancer.

You should test this stuff on a regular basis. As your system gets larger the odds of losing a node go to 100%. That means that every node has to be treated as frail, everything has to have a fail-over (and the fail-over should be tested).

Tools like Chef and Puppet are typically key to making this stuff work. 

New PaaS providers (Heroku, Azure, CloudFoundry, etc.) are really focusing on making this stuff much easier.

A good mindset here is to think of your operating environment as something that you can "check in".

**Flaw #6: High Coupling**

This is the big one.

Small systems rarely fail (at least it feels that way), big systems fail all of the time. As you move from small to big, the part of the code that grows the most is the part that handles failure.

Sadly, this part of the process is not really easy to quantify. What qualifies as "too much coupling" or "too little"? This is the stuff people write books and PhD theses about.

Here's my rule of thumb on the subject: build sub-systems & vertical slices.

To make a system "scalable" it needs to be built from small composable pieces that can themselves be scaled.

Need to send e-mails? There should be an e-mail sub-system with basic hooks for "send this" and "that e-mail was bounced" and "I got an unsub request". Maybe it does very little to start with, maybe it just makes some simple SMTP call with a string of text. But you want to isolate it because some day it will be doing much more "at scale". It will be batching and sending with SendGrid and tracking unsubs for a daily roll-up and firing off data logging to other parts of the system, etc.

E-mail is just one simple example. Look around at your system and you will see lots of these pieces. If you can start by defining interfaces or contracts for these pieces early on, you will naturally build a system where pieces can be moved around, expanded, managed by different teams, etc.

**Flaw #7: this is not free**

Done correctly, a system built with scalability in mind will be less expensive to manage over the long-term and easier to build out. It will need less people, be easier to QA and easier to debug.

But it's not free in the short term. There are known patterns for much of this stuff, but there are lots of pieces and separate providers. You need experienced developers to make decisions about how to implement these best practices. And it's going to delay your initial product launch.

[http://www.quora.com/Startups/What-are-some-common-architectural-design-flaws-at-the-early-stages-of-a-website-which-might-later-make-it-difficult-to-scale?share=1][1]


  [1]: http://www.quora.com/Startups/What-are-some-common-architectural-design-flaws-at-the-early-stages-of-a-website-which-might-later-make-it-difficult-to-scale?share=1
questiontag_set : ['software architecture']
datetime_added  =[2014-09-12 20:21:57.672396+00:00]
datetime_updated=[2014-09-13 16:17:46.031007+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1170] of [1277] ============================= id=[108] ==
Q:  In Python, how do you delete a file?
questiontag_set : ['python']
datetime_added  =[2014-09-12 06:10:45.607952+00:00]
datetime_updated=[2014-09-12 06:10:45.607986+00:00]
---------------------------------------------- id=[91] --
A:
    import os
    os.path.remove("/tmp/myfile")

=== [1171] of [1277] ============================= id=[107] ==
Q:  In Python, how you check to see if a file exists?
questiontag_set : ['python']
datetime_added  =[2014-09-12 06:09:50.958700+00:00]
datetime_updated=[2014-09-12 06:09:50.958738+00:00]
---------------------------------------------- id=[90] --
A:
    import os
    assert os.path.exists("/tmp/foo") == True

=== [1172] of [1277] ============================= id=[106] ==
Q:  In Python, how can you create an empty file?
questiontag_set : ['python']
datetime_added  =[2014-09-12 06:08:38.201425+00:00]
datetime_updated=[2014-09-12 06:08:38.201460+00:00]
---------------------------------------------- id=[89] --
A:
    open('/tmp/myfile', 'a').close()

=== [1173] of [1277] ============================= id=[105] ==
Q:  How do you grep for "foo" through all the files in a git repository?
questiontag_set : ['git']
datetime_added  =[2014-09-11 19:40:59.574691+00:00]
datetime_updated=[2014-09-11 19:40:59.574722+00:00]
---------------------------------------------- id=[88] --
A:
    git grep foo

=== [1174] of [1277] ============================= id=[104] ==
Q:  In Python, what does the following evaluate to?

    5 or 7
questiontag_set : ['python']
datetime_added  =[2014-09-11 19:23:21.261464+00:00]
datetime_updated=[2014-09-11 19:23:21.261496+00:00]
---------------------------------------------- id=[87] --
A:
5

> The expression x or y first evaluates x; if x is true, its value is
> returned; otherwise, y is evaluated and the resulting value is
> returned.
> 
> (Note that neither and nor or restrict the value and type
> they return to False and True, but rather return the last evaluated
> argument. This is sometimes useful, e.g., if s is a string that should
> be replaced by a default value if it is empty, the expression s or
> 'foo' yields the desired value. Because not has to invent a value
> anyway, it does not bother to return a value of the same type as its
> argument, so e.g., not 'foo' yields False, not ''.)

[https://docs.python.org/2/reference/expressions.html#boolean-operations][1]

    >>> x = ''
    >>> x = x or 55
    >>> x
    55

  [1]: https://docs.python.org/2/reference/expressions.html#boolean-operations



=== [1175] of [1277] ============================= id=[103] ==
Q:  In Python, what does the following evaluate to:

    5 and 7
questiontag_set : ['python']
datetime_added  =[2014-09-11 18:12:30.671762+00:00]
datetime_updated=[2014-09-11 18:12:30.671793+00:00]
---------------------------------------------- id=[86] --
A:
7

> The expression x and y first evaluates x; if x is false, its value is
> returned; otherwise, y is evaluated and the resulting value is
> returned. 

> (Note that neither and nor or restrict the value and type
> they return to False and True, but rather return the last evaluated
> argument. This is sometimes useful, e.g., if s is a string that should
> be replaced by a default value if it is empty, the expression s or
> 'foo' yields the desired value. Because not has to invent a value
> anyway, it does not bother to return a value of the same type as its
> argument, so e.g., not 'foo' yields False, not ''.)

[https://docs.python.org/2/reference/expressions.html#boolean-operations][1]


  [1]: https://docs.python.org/2/reference/expressions.html#boolean-operations

=== [1176] of [1277] ============================= id=[102] ==
Q:  In Linux, how do you get info about a package (description, etc.)?
questiontag_set : ['unix']
datetime_added  =[2014-09-10 17:53:22.574964+00:00]
datetime_updated=[2014-09-10 17:53:22.574997+00:00]
---------------------------------------------- id=[85] --
A:
    sudo apt-cache show some_package

=== [1177] of [1277] ============================= id=[101] ==
Q:  In git, if I have branched off of `master` with `my-branch`, and `master` has since changed, how do I rebase onto `master`?
questiontag_set : ['git']
datetime_added  =[2014-09-10 00:14:38.088706+00:00]
datetime_updated=[2014-09-10 00:14:38.088741+00:00]
---------------------------------------------- id=[84] --
A:
      git checkout master
      git pull --rebase
        (or:
            git fetch origin
            git rebase origin/master
        )
      git checkout my-branch
      git rebase master  (or git merge master)

'

=== [1178] of [1277] ============================= id=[100] ==
Q:  In Python, what is the operator precedence for the following operator categories:

    in, not in, is, is not, <, <=, >, >=, <>, !=, ==
    and
    or
    not x


questiontag_set : ['python']
datetime_added  =[2014-09-09 22:31:44.026761+00:00]
datetime_updated=[2014-09-09 22:31:44.026793+00:00]
---------------------------------------------- id=[83] --
A:
    or  (lowest)
    and
    not x
    in, not in, is, is not, <, <=, >, >=, <>, !=, == (highest)

(note that "lowest" and "highest" just refer to this group of operators, not all the operators)

example:

    >>> False and False or True  # "and" is evaluated before "or"
    True
    >>> (False and False) or True  # equivalent to this
    True
    >>> False and (False or True)  # not equivalent to this
    False



=== [1179] of [1277] ============================= id=[99] ==
Q:  In Elzar, each piece of data for a request is passed either in the body as JSON or as query string parameters (in the url).

In the Elzar behavioral tests, `elzar.client.APIClient.request(query, data)` is called:
 
* `query` - a dict whose items are added into the url as query string parameters  
*  `data` - a variable that is converted to json via` json.dumps(data)` and then passed as the `body` argument to `http.request(body)`
* (url endpoint) - the url itself can contain data, e.g., the id of the trap being referenced

On the server, the data is available here:

* `req.body` -- the json (as a string)
* `req.json()` -- a method that converts `req.body` from a json string and returns it as a dict
* `req.query` -- the query string parameters (as a dict)
* `req.vars` -- the parameters in the url endpoint (e.g., the trap id) (as a dict)

`req.json()` data is validated with a `val` schema in the `validate_input()` method of `wsgi.Handler` or `wsgi.NewHandler` 
questiontag_set : ['trapit_elzar', 'trapit']
datetime_added  =[2014-09-09 19:34:02.826640+00:00]
datetime_updated=[2015-07-19 20:35:16.703601+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1180] of [1277] ============================= id=[98] ==
Q:  What is the term for the GET/PUT/POST/DELETE/... field of an http request?
questiontag_set : ['web development']
datetime_added  =[2014-09-09 18:37:29.804462+00:00]
datetime_updated=[2014-09-09 18:37:29.804495+00:00]
---------------------------------------------- id=[82] --
A:
method

=== [1181] of [1277] ============================= id=[97] ==
Q:  What is the `:` command used for in sh and bash?  (name 5 different uses)
questiontag_set : ['bash']
datetime_added  =[2014-09-09 14:32:09.784210+00:00]
datetime_updated=[2015-02-07 20:34:00.970251+00:00]
---------------------------------------------- id=[81] --
A:
1) Inserting comments into a string of commands:

    echo one;  : this is a comment ; echo two
    
2) An alias for `true`:

    while : ; do 
        command
    done
    
3) For the empty command in a loop:
    
    for ((x=0;x<100000;++x)) ; do 
    : 
    done

4) To enable/disable variable commands:

    if [[ "$VERBOSE" == "" || "$VERBOSE" == "0" ]]; then
        vecho=":"     # no "verbose echo"
    else
        vecho=echo    # enable "verbose echo"
    fi
    
    $vecho "Verbose echo is ON"

5) To execute a command without displaying it's stdout (but still displaying stderr):

    : `echo foo`

(a better alternative would be `echo foo > /dev/null`)


=== [1182] of [1277] ============================= id=[96] ==
Q:  In the shell, how do you print out a date in the format `2014-09-05-Fri-17:04:11` ?
questiontag_set : ['bash']
datetime_added  =[2014-09-06 00:06:18.731454+00:00]
datetime_updated=[2014-09-06 00:06:18.731486+00:00]
---------------------------------------------- id=[80] --
A:
    date +%Y-%m-%d-%a-%H:%M:%S

=== [1183] of [1277] ============================= id=[95] ==
Q:  In Python's pdb, how do you start the program over?
questiontag_set : ['python', 'pdb']
datetime_added  =[2014-09-06 00:03:14.413602+00:00]
datetime_updated=[2014-09-06 00:03:14.413654+00:00]
---------------------------------------------- id=[79] --
A:
`restart` or `run`

=== [1184] of [1277] ============================= id=[94] ==
Q:  In Elzar, where is a good place to put a breakpoint / set_trace() before the handler is called?
questiontag_set : ['trapit', 'trapit_elzar']
datetime_added  =[2014-09-04 22:53:26.203220+00:00]
datetime_updated=[2014-09-04 22:53:26.203250+00:00]
---------------------------------------------- id=[78] --
A:
In wsgi.container() at the beginning of the function, or right before `handler(req)` is called.

=== [1185] of [1277] ============================= id=[93] ==
Q:  In Elzar, what does the Handler `from_resource` method do?  
 (what automatically calls it, and is done with the output from it?)

questiontag_set : ['trapit', 'trapit_elzar']
datetime_added  =[2014-09-04 17:58:28.419741+00:00]
datetime_updated=[2015-07-24 12:49:19.507641+00:00]
---------------------------------------------- id=[77] --
A:
After the wsgi application has called the handler, it calls `render_output` which calls `from_resource()` if it is defined, and makes the output from that the response output.

=== [1186] of [1277] ============================= id=[92] ==
Q:  In git, how do you create a new branch and check it out in a single command?
questiontag_set : ['git']
datetime_added  =[2014-09-03 21:00:44.199458+00:00]
datetime_updated=[2014-09-03 21:00:44.199490+00:00]
---------------------------------------------- id=[76] --
A:
    git checkout -b my_branch

=== [1187] of [1277] ============================= id=[91] ==
Q:  Who is the author of the Swift programming language?
questiontag_set : ['programming languages']
datetime_added  =[2014-09-03 14:34:31.140970+00:00]
datetime_updated=[2014-09-03 14:34:31.141003+00:00]
---------------------------------------------- id=[75] --
A:
Chris Lattner

[http://en.wikipedia.org/wiki/Swift_(programming_language)][1]


  [1]: http://en.wikipedia.org/wiki/Swift_%28programming_language%29

=== [1188] of [1277] ============================= id=[90] ==
Q:  Who is the author of Scala?
questiontag_set : ['programming languages']
datetime_added  =[2014-09-03 14:31:19.935506+00:00]
datetime_updated=[2014-09-03 14:31:19.935537+00:00]
---------------------------------------------- id=[74] --
A:
Martin Odersky

[http://james-iry.blogspot.com/2009/05/brief-incomplete-and-mostly-wrong.html][1]


  [1]: http://james-iry.blogspot.com/2009/05/brief-incomplete-and-mostly-wrong.html

=== [1189] of [1277] ============================= id=[89] ==
Q:  Who is the author of Ruby?

[http://james-iry.blogspot.com/2009/05/brief-incomplete-and-mostly-wrong.html][1]


  [1]: http://james-iry.blogspot.com/2009/05/brief-incomplete-and-mostly-wrong.html
questiontag_set : ['programming languages']
datetime_added  =[2014-09-03 14:28:13.845259+00:00]
datetime_updated=[2014-09-03 14:28:13.845291+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1190] of [1277] ============================= id=[88] ==
Q:  Who is the author of Java?
questiontag_set : ['programming languages']
datetime_added  =[2014-09-03 14:26:38.707224+00:00]
datetime_updated=[2014-09-03 14:26:38.707270+00:00]
---------------------------------------------- id=[73] --
A:
James Gosling

=== [1191] of [1277] ============================= id=[87] ==
Q:  In a makefile, what is the difference between:  

    my_variable=$(shell date)

and:  

    my_variable:=$(shell date)


questiontag_set : ['make']
datetime_added  =[2014-09-03 00:34:49.240459+00:00]
datetime_updated=[2014-09-03 00:34:49.240492+00:00]
---------------------------------------------- id=[72] --
A:
`:=` expands the variable now, and `=` just holds the syntax and expands it later.

[http://stackoverflow.com/questions/10024279/how-to-use-shell-commands-in-makefile][1]


  [1]: http://stackoverflow.com/questions/10024279/how-to-use-shell-commands-in-makefile

=== [1192] of [1277] ============================= id=[86] ==
Q:  In `val`, what is the effect of adding `object : object` into a schema?  
e.g.,

    from val import Schema
    
    schema = Schema({'foo' : str, object : object})
questiontag_set : ['val', 'trapit_elzar', 'trapit']
datetime_added  =[2014-09-02 18:54:44.079917+00:00]
datetime_updated=[2014-09-02 18:54:44.079949+00:00]
---------------------------------------------- id=[71] --
A:
It allows you to add 0 or more optional fields that can be anything.  This means that only the fields that you specify will be validated, and other fields will just be ignored.

    >>> schema = Schema({object:object})
    >>> schema.validate({'foo':'bar'})
    {'foo': 'bar'}

    >>> schema2 = Schema({'rob': str, object:object})
    >>> schema2.validate({'rob' : 'bednark'})
    {'rob': 'bednark'}
    >>> schema2.validate({'rob' : 'bednark', 1:3})
    {1: 3, 'rob': 'bednark'}
    >>> schema2.validate({'rob' : 'bednark', 1:3, 2:4})
    {1: 3, 'rob': 'bednark', 2: 4}
    >>> schema2.validate({1:3})
    Traceback...
    ...
    val.NotValid: missing key: 'rob'
    
    >>> schema3 = Schema({'rob': str})
    >>> schema3.validate({'rob':'bednark'})
    {'rob': 'bednark'}
    >>> schema3.validate({'rob':'bednark', 1:3})
    Traceback (most recent call last):
    ...
     val.NotValid: 1: 3 not matched

=== [1193] of [1277] ============================= id=[85] ==
Q:  What is `selector` in Elzar?
questiontag_set : ['trapit', 'trapit_elzar']
datetime_added  =[2014-09-02 17:46:02.031045+00:00]
datetime_updated=[2014-09-02 17:46:02.031076+00:00]
---------------------------------------------- id=[70] --
A:
`selector` is the package written and open-sourced by Luke which does WSGI request delegation / routing.  It maps the url endpoints to the handler, calling the handler with the request.

[https://github.com/lukearno/selector][1]


  [1]: https://github.com/lukearno/selector

=== [1194] of [1277] ============================= id=[84] ==
Q:  Which popular video game was written by a single developer in assembly?

1. name of the game?
1. name of the developer?
1. year released?
questiontag_set : ['software apps']
datetime_added  =[2014-09-01 02:57:15.738346+00:00]
datetime_updated=[2014-09-01 02:57:15.738384+00:00]
---------------------------------------------- id=[69] --
A:
1. RollerCoaster Tycoon
1. developed by Chris Sawyer
1. released in 1999

=== [1195] of [1277] ============================= id=[83] ==
Q:  Create a query to find the number of rows for each "name".
questiontag_set : ['postgresql', 'sql']
datetime_added  =[2014-08-30 01:42:59.602250+00:00]
datetime_updated=[2014-08-30 01:42:59.602280+00:00]
---------------------------------------------- id=[68] --
A:
    SELECT DISTINCT name, COUNT(name)
        FROM my_table
        GROUP BY name
        ORDER BY count DESC;

=== [1196] of [1277] ============================= id=[82] ==
Q:  What does the following query do:
    SELECT DISTINCT name FROM my_table;
questiontag_set : ['sql']
datetime_added  =[2014-08-30 01:37:01.126626+00:00]
datetime_updated=[2014-08-30 01:37:01.126658+00:00]
---------------------------------------------- id=[67] --
A:
It selects all distinct names.  If there are multiple rows with a given name, only one instance of that name will be returned.

=== [1197] of [1277] ============================= id=[81] ==
Q:  In the following Elzar test code, where is `api.users()` defined?

    def test_walk(self):
        org = self.standard_org(1)
        api = self.get_api(org.testusers['admin1'])
        resp = api.users()
questiontag_set : ['trapit']
datetime_added  =[2014-08-30 00:47:31.530374+00:00]
datetime_updated=[2014-08-30 00:47:31.530426+00:00]
---------------------------------------------- id=[66] --
A:
    elzar.client.APIClient.users()

=== [1198] of [1277] ============================= id=[80] ==
Q:  For the Elzar behavioral tests, where is the `self.get_api()` method defined?
questiontag_set : ['trapit']
datetime_added  =[2014-08-30 00:28:27.138865+00:00]
datetime_updated=[2014-08-30 00:33:42.267249+00:00]
---------------------------------------------- id=[65] --
A:
    tests.__init__.ElzarTestCase.get_api()

=== [1199] of [1277] ============================= id=[79] ==
Q:  How do you tell nosetests to run all the tests that failed in the last test run?
questiontag_set : ['nosetests']
datetime_added  =[2014-08-29 22:01:04.241332+00:00]
datetime_updated=[2014-08-29 22:01:04.241364+00:00]
---------------------------------------------- id=[64] --
A:
    nosetests --failed

**However**, note that you must run the tests the first time with the `nosetests --with-id` option.

=== [1200] of [1277] ============================= id=[78] ==
Q:  Visit: [http://www.quora.com/What-are-5-essential-skills-any-Web-Developer-should-have][1]


  [1]: http://www.quora.com/What-are-5-essential-skills-any-Web-Developer-should-have
questiontag_set : ['programming', 'web development']
datetime_added  =[2014-08-26 19:49:27.443576+00:00]
datetime_updated=[2014-08-26 19:49:27.443607+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1201] of [1277] ============================= id=[77] ==
Q:  Visit: [http://www.spoj.com/][1]


  [1]: http://www.spoj.com/
questiontag_set : ['programming']
datetime_added  =[2014-08-26 19:46:45.165758+00:00]
datetime_updated=[2014-08-26 19:46:45.165789+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1202] of [1277] ============================= id=[76] ==
Q:  Visit this site: [http://noexcuselist.com/][1]


  [1]: http://noexcuselist.com/
questiontag_set : ['learning']
datetime_added  =[2014-08-26 19:44:01.571733+00:00]
datetime_updated=[2014-08-26 19:44:01.571765+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1203] of [1277] ============================= id=[75] ==
Q:  Visit: http://www.tutorialspoint.com/
questiontag_set : ['learning']
datetime_added  =[2014-08-26 19:42:12.062369+00:00]
datetime_updated=[2014-08-26 19:42:12.062406+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1204] of [1277] ============================= id=[74] ==
Q:  Visit this site: [http://www.quora.com/What-are-the-top-10-websites-computer-science-students-must-visit][1]


  [1]: http://www.quora.com/What-are-the-top-10-websites-computer-science-students-must-visit
questiontag_set : ['programming']
datetime_added  =[2014-08-26 19:37:14.966766+00:00]
datetime_updated=[2014-08-26 19:37:14.966823+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1205] of [1277] ============================= id=[73] ==
Q:  What would you lose if _____?

e.g., “What would you lose if the cancer was healed?” She finally replied:
“I would be lonely again”.

Secondary gain may be defined as ‘a hidden benefit that is derived from the problem’.

[http://benralston.blogspot.com/2011/08/reason-why-most-alternative-healing.html][1]


  [1]: http://benralston.blogspot.com/2011/08/reason-why-most-alternative-healing.html
questiontag_set : ['psychology']
datetime_added  =[2014-08-26 19:28:09.695360+00:00]
datetime_updated=[2014-08-26 19:28:26.305346+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1206] of [1277] ============================= id=[72] ==
Q:  Review this page of Python patterns: [https://github.com/faif/python-patterns][1]


  [1]: https://github.com/faif/python-patterns
questiontag_set : ['python']
datetime_added  =[2014-08-25 22:40:26.991721+00:00]
datetime_updated=[2014-08-25 22:40:26.991756+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1207] of [1277] ============================= id=[71] ==
Q:  Review this page: The Hitchhiker's Guide to Python [http://docs.python-guide.org/en/latest/][1]


  [1]: http://docs.python-guide.org/en/latest/
questiontag_set : ['python']
datetime_added  =[2014-08-25 22:37:09.532395+00:00]
datetime_updated=[2014-11-18 05:27:21.241538+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1208] of [1277] ============================= id=[70] ==
Q:  Review this page, which is a list of Python frameworks, libraries, and software: [https://github.com/vinta/awesome-python][1]


  [1]: https://github.com/vinta/awesome-python
questiontag_set : ['python']
datetime_added  =[2014-08-25 22:35:24.467675+00:00]
datetime_updated=[2014-08-25 22:35:24.467706+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1209] of [1277] ============================= id=[69] ==
Q:  Review this page of  simple programming projects / code katas and solutions:

[https://github.com/karan/Projects][1]


  [1]: https://github.com/karan/Projects
questiontag_set : ['python', 'code katas']
datetime_added  =[2014-08-25 22:33:04.751767+00:00]
datetime_updated=[2014-08-25 22:33:04.751797+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1210] of [1277] ============================= id=[68] ==
Q:  In pdb, how do you tell it to execute the inputted code where the code conflicts with a pdb command (e.g., `c = 3` (`c` conflicts with the `c` pdb command for `continue`)
questiontag_set : ['python']
datetime_added  =[2014-08-23 22:20:14.772943+00:00]
datetime_updated=[2014-08-23 22:20:14.772975+00:00]
---------------------------------------------- id=[63] --
A:
Use an exclamation point, e.g.,

    pdb> !c = 3

=== [1211] of [1277] ============================= id=[67] ==
Q:  How do you disable all logging with nosetests?
questiontag_set : ['python']
datetime_added  =[2014-08-23 22:02:38.316053+00:00]
datetime_updated=[2014-08-23 22:02:38.316085+00:00]
---------------------------------------------- id=[62] --
A:
    nosetests --logging-filter=none

(give it a name of a non-existent logger)

>  --logging-filter=FILTER
>               Specify  which  statements  to filter in/out. By default, everything is captured. If
>               the output is too verbose, use this option to filter out needless output.   Example:
>               filter=foo will capture statements issued ONLY to
>                foo  or foo.what.ever.sub but not foobar or other logger.  Specify multiple loggers
>               with comma: filter=foo,bar,baz.  If any logger name is prefixed  with  a  minus,  eg
>               filter=-foo, it will be excluded rather than included. Default: exclude logging mes-
>               sages from nose itself (-nose). [NOSE_LOGFILTER]

=== [1212] of [1277] ============================= id=[66] ==
Q:  How to display NULL values in psql with something other than just space?
questiontag_set : ['postgresql']
datetime_added  =[2014-08-20 18:59:06.621493+00:00]
datetime_updated=[2014-08-20 18:59:06.621524+00:00]
---------------------------------------------- id=[61] --
A:
    \pset null '_NULL_'

(can add this to `.psqlrc` file)

=== [1213] of [1277] ============================= id=[65] ==
Q:  What is the `poll_stats` field for a feed?
questiontag_set : ['trapit', 'trapit_zoidberg']
datetime_added  =[2014-08-19 19:34:11.345991+00:00]
datetime_updated=[2014-08-19 19:34:11.346022+00:00]
---------------------------------------------- id=[60] --
A:
It shows the last 10 polls for the feed, where there are 3 fields for each poll:
  

    status, bozo, datetime.utcnow()

(bozo is 1 if a non-well-formed feed, 0 otherwise)


=== [1214] of [1277] ============================= id=[64] ==
Q:  What is `bozo` in Zoidberg?
questiontag_set : ['trapit', 'trapit_zoidberg']
datetime_added  =[2014-08-19 19:11:58.463007+00:00]
datetime_updated=[2014-08-19 19:11:58.463038+00:00]
---------------------------------------------- id=[59] --
A:
Note that zoidberg uses `feedparser` which is a PyPI package, and `bozo` is a flag that is set on the output from feedparser.

> Universal Feed Parser can parse feeds whether they are well-formed XML
> or not. However, since some applications may wish to reject or warn
> users about non-well-formed feeds, Universal Feed Parser sets the bozo
> bit when it detects that a feed is not well-formed.

[https://pythonhosted.org/feedparser/bozo.html][1]


  [1]: https://pythonhosted.org/feedparser/bozo.html

=== [1215] of [1277] ============================= id=[63] ==
Q:  How do you capitalize an entire word?
questiontag_set : ['vim']
datetime_added  =[2014-08-19 18:34:50.535325+00:00]
datetime_updated=[2014-08-19 18:34:50.535356+00:00]
---------------------------------------------- id=[58] --
A:
gUw

From ":help gU":

> gU{motion}        => make Nmove text uppercase

=== [1216] of [1277] ============================= id=[62] ==
Q:  How do you remove a column from a table?
questiontag_set : ['postgresql', 'sql']
datetime_added  =[2014-08-19 17:49:07.073290+00:00]
datetime_updated=[2014-08-19 17:49:07.073322+00:00]
---------------------------------------------- id=[57] --
A:
    ALTER TABLE my_table DROP COLUMN my_column;

=== [1217] of [1277] ============================= id=[61] ==
Q:  In Postgres, how do you create a temporary table from the results of a query?
questiontag_set : ['postgresql', 'sql']
datetime_added  =[2014-08-19 17:42:38.450132+00:00]
datetime_updated=[2014-08-19 17:42:38.450163+00:00]
---------------------------------------------- id=[56] --
A:
    CREATE TEMP TABLE tmp_rob_feeds 
        AS SELECT * FROM feeds WHERE feed_url ILIKE '%beautyandwell%';

=== [1218] of [1277] ============================= id=[60] ==
Q:  What is a synonym for the verb `aggregate`?
questiontag_set : ['vocabulary']
datetime_added  =[2014-08-19 15:26:48.793084+00:00]
datetime_updated=[2014-08-19 15:26:48.793136+00:00]
---------------------------------------------- id=[55] --
A:
combine

ag·gre·gate  
noun  
ˈagrigit/  

1. a whole formed by combining several (typically disparate) elements.
"the council was an aggregate of three regional assemblies"
2. a material or structure formed from a loosely compacted mass of fragments or particles.
synonyms:	collection, mass, agglomeration, conglomerate, assemblage; More
pieces of broken or crushed stone or gravel used to make concrete, or more generally in building and construction work.

adjective

1. formed or calculated by the combination of many separate units or items; total.
"the aggregate amount of grants made"
synonyms:	total, combined, gross, overall, composite
"an aggregate score"
BOTANY
(of a group of species) comprising several very similar species formerly regarded as a single species.
ECONOMICS
denoting the total supply or demand for goods and services in an economy at a particular time.
"aggregate demand"

verb  
3rd person present: aggregates; past tense: aggregated; past participle: aggregated; gerund or present participle: aggregating  
-ˌgāt/  
1. form or group into a class or cluster.
"the butterflies aggregate in dense groups"

=== [1219] of [1277] ============================= id=[59] ==
Q:  What does `GROUP BY 1` mean?
questiontag_set : ['sql', 'postgresql']
datetime_added  =[2014-08-19 15:09:18.942672+00:00]
datetime_updated=[2014-08-19 15:09:18.942731+00:00]
---------------------------------------------- id=[54] --
A:
It means to group by the first column regardless of what it's called. You can do the same with ORDER BY.

e.g., 

    SELECT id FROM orgs GROUP BY 1;

[http://stackoverflow.com/questions/7392730/what-does-sql-group-by-clause-group-by-1-mean][1]


  [1]: http://stackoverflow.com/questions/7392730/what-does-sql-group-by-clause-group-by-1-mean

=== [1220] of [1277] ============================= id=[58] ==
Q:  When are columns allowed / not allowed in a select for a `GROUP BY` in Postgres?
questiontag_set : ['postgresql']
datetime_added  =[2014-08-19 15:04:55.295133+00:00]
datetime_updated=[2014-08-19 15:04:55.295164+00:00]
---------------------------------------------- id=[53] --
A:
Paraphrase:  there must only be one possible value to return for an ungrouped column (e.g., a primary key of the table containing the ungrouped column).

> Aggregate functions, if any are used, are computed across all rows
> making up each group, producing a separate value for each group
> (whereas without GROUP BY, an aggregate produces a single value
> computed across all the selected rows).
> 
> When GROUP BY is present, it is not valid for the SELECT list
> expressions to refer to ungrouped columns except within aggregate
> functions or if the ungrouped column is functionally dependent on the
> grouped columns, since there would otherwise be more than one possible
> value to return for an ungrouped column. A functional dependency
> exists if the grouped columns (or a subset thereof) are the primary
> key of the table containing the ungrouped column.

[http://www.postgresql.org/docs/9.1/static/sql-select.html#SQL-GROUPBY][1]  
[http://stackoverflow.com/questions/22788073/why-is-postgres-allowing-me-have-columns-not-in-the-group-by][2]


  [1]: http://www.postgresql.org/docs/9.1/static/sql-select.html#SQL-GROUPBY
  [2]: http://stackoverflow.com/questions/22788073/why-is-postgres-allowing-me-have-columns-not-in-the-group-by

=== [1221] of [1277] ============================= id=[57] ==
Q:  Review this page: [http://pypi-ranking.info/alltime][1]


  [1]: http://pypi-ranking.info/alltime
questiontag_set : ['python']
datetime_added  =[2014-08-17 16:33:25.588246+00:00]
datetime_updated=[2014-08-17 16:33:25.588279+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1222] of [1277] ============================= id=[56] ==
Q:  Review this page: [http://pythonhackers.com/open-source/][1] (the top 400 Python projects on GitHub)


  [1]: http://pythonhackers.com/open-source/
questiontag_set : ['python']
datetime_added  =[2014-08-17 16:32:34.683211+00:00]
datetime_updated=[2014-08-17 16:32:34.683245+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1223] of [1277] ============================= id=[55] ==
Q:  How to select all values for column1 that have 2 or more rows?
questiontag_set : ['sql', 'postgresql']
datetime_added  =[2014-08-13 21:48:07.735149+00:00]
datetime_updated=[2014-08-13 21:48:07.735180+00:00]
---------------------------------------------- id=[52] --
A:
    SELECT feed_url,count(feed_url) FROM feeds GROUP BY feed_url HAVING count(feed_url) > 1;

=== [1224] of [1277] ============================= id=[54] ==
Q:  In Postgresql SQL, what is the syntax for comments?
questiontag_set : ['postgresql', 'sql']
datetime_added  =[2014-08-13 06:14:25.144007+00:00]
datetime_updated=[2014-08-13 06:14:25.144038+00:00]
---------------------------------------------- id=[51] --
A:
    -- double dashes for a single line comment
    
    /*
      for a multiline comment,
      use the slash and asterisk
    */

=== [1225] of [1277] ============================= id=[53] ==
Q:  In Postgres's `psql`, what is used for editing the commands and how do you change it to vi mode?
questiontag_set : ['postgresql']
datetime_added  =[2014-08-13 04:13:28.392846+00:00]
datetime_updated=[2014-08-13 04:13:28.392897+00:00]
---------------------------------------------- id=[50] --
A:
`GNU Readline Library` is used for editing.  To set to vi:

    set editing-mode vi


[http://www.postgresql.org/docs/9.2/static/app-psql.html][1]  
[http://cnswww.cns.cwru.edu/php/chet/readline/readline.html][2]


  [1]: http://www.postgresql.org/docs/9.2/static/app-psql.html
  [2]: http://cnswww.cns.cwru.edu/php/chet/readline/readline.html

=== [1226] of [1277] ============================= id=[52] ==
Q:  In Postgres, how do you make a copy of a database?
questiontag_set : ['postgresql']
datetime_added  =[2014-08-13 00:27:02.049463+00:00]
datetime_updated=[2014-08-13 00:27:02.049502+00:00]
---------------------------------------------- id=[49] --
A:
    CREATE DATABASE newdb WITH TEMPLATE originaldb OWNER dbuser;

This copies all schema and all data.

(note that the db should not be in use by any users or you may get an error)

[http://stackoverflow.com/questions/876522/creating-a-copy-of-a-database-in-postgres][1]


  [1]: http://stackoverflow.com/questions/876522/creating-a-copy-of-a-database-in-postgres

=== [1227] of [1277] ============================= id=[51] ==
Q:  In SQLAlchemy, when doing an execute(), how do you show how many rows were affected by the select/insert/update/delete?
questiontag_set : ['sqlalchemy']
datetime_added  =[2014-08-12 15:56:24.415376+00:00]
datetime_updated=[2014-08-12 15:56:24.415408+00:00]
---------------------------------------------- id=[48] --
A:
Use the `rowcount` attribute of the ResultProxy that is returned, e.g.,

    result_proxy = session.execute('select * from my_table')
    print "Number of rows selected = [%s]" % result_proxy.rowcount

=== [1228] of [1277] ============================= id=[50] ==
Q:  What is an access token?
questiontag_set : []
datetime_added  =[2014-08-07 17:18:06.531259+00:00]
datetime_updated=[2014-08-07 17:18:06.531292+00:00]
---------------------------------------------- id=[47] --
A:
> In computer systems, an access token contains the security credentials
> for a login session and identifies the user, the user's groups, the
> user's privileges, and, in some cases, a particular application.

http://en.wikipedia.org/wiki/Access_token

=== [1229] of [1277] ============================= id=[49] ==
Q:  What is OAuth?
questiontag_set : []
datetime_added  =[2014-08-07 17:09:18.987071+00:00]
datetime_updated=[2014-08-07 17:09:18.987104+00:00]
---------------------------------------------- id=[46] --
A:
> OAuth provides client applications a 'secure delegated access' to
> server resources on behalf of a resource owner. It specifies a process
> for resource owners to authorize third-party access to their server
> resources without sharing their credentials. Designed specifically to
> work with Hypertext Transfer Protocol (HTTP), OAuth essentially allows
> access tokens to be issued to third-party clients by an authorization
> server, with the approval of the resource owner, or end-user. The
> client then uses the access token to access the protected resources
> hosted by the resource server. OAuth is commonly used as a way for
> web surfers to log into third party web sites using their Google,
> Facebook or Twitter accounts, without worrying about their access
> credentials being compromised.
> 
> OAuth is a service that is complementary to, and therefore distinct
> from, OpenID.

http://en.wikipedia.org/wiki/OAuth

=== [1230] of [1277] ============================= id=[48] ==
Q:  How to connect with psql to a database using a connection string?
questiontag_set : ['postgresql']
datetime_added  =[2014-08-06 21:32:04.774896+00:00]
datetime_updated=[2014-08-06 21:32:04.774926+00:00]
---------------------------------------------- id=[45] --
A:
    psql postgres://my_username:my_password@db_host/db_name

=== [1231] of [1277] ============================= id=[47] ==
Q:  In `psql`, how do you tell it to format the output horizontally if there is enough room, and if not, format it vertically?
questiontag_set : ['postgresql']
datetime_added  =[2014-08-05 19:06:05.533109+00:00]
datetime_updated=[2014-08-05 19:06:05.533141+00:00]
---------------------------------------------- id=[44] --
A:
    psql> \x auto

Can also set this in the `.psqlrc` file, though I haven't got it to work for me yet:

    \x auto

=== [1232] of [1277] ============================= id=[46] ==
Q:  How do you show the rows that were deleted in SQL when doing a DELETE?
questiontag_set : ['sql']
datetime_added  =[2014-08-05 18:02:43.674624+00:00]
datetime_updated=[2014-08-05 18:02:43.674659+00:00]
---------------------------------------------- id=[43] --
A:
Use the `RETURNING` clause, e.g.,

    DELETE FROM my_table RETURNING *;

=== [1233] of [1277] ============================= id=[45] ==
Q:  How to delete all rows from a table in SQL?
questiontag_set : ['sql']
datetime_added  =[2014-08-05 18:00:29.682240+00:00]
datetime_updated=[2014-08-05 18:00:29.682270+00:00]
---------------------------------------------- id=[42] --
A:
DELETE * FROM my_table;

=== [1234] of [1277] ============================= id=[44] ==
Q:  How do I tell psql to output rows in vertical format instead of horizontal format?
questiontag_set : ['postgresql']
datetime_added  =[2014-08-04 22:33:48.553200+00:00]
datetime_updated=[2014-08-04 22:33:48.553231+00:00]
---------------------------------------------- id=[41] --
A:
psql> \pset expanded

> expanded (or x) If value is specified it must be either on or off
> which will enable or disable expanded mode. If value is omitted the
> command toggles between regular and expanded mode. When expanded mode
> is enabled, query results are displayed in two columns, with the
> column name on the left and the data on the right. This mode is useful
> if the data wouldn't fit on the screen in the normal "horizontal"
> mode.
> 
> \x Toggles expanded table formatting mode. As such it is equivalent to
> \pset expanded.
> 
> -x
> --expanded Turn on the expanded table formatting mode. This is equivalent to the \x command.

http://www.postgresql.org/docs/9.1/static/app-psql.html

=== [1235] of [1277] ============================= id=[43] ==
Q:  What is the visibility of TEMP tables in Postgres?
questiontag_set : ['postgresql']
datetime_added  =[2014-08-04 21:20:48.491125+00:00]
datetime_updated=[2014-08-04 21:20:48.491156+00:00]
---------------------------------------------- id=[40] --
A:
TEMP tables are only visible to the session that created them.

> Temporary tables in other sessions are invisible by design. It makes
> no difference if two sessions have the same user.

http://dba.stackexchange.com/questions/5236/is-there-a-way-to-access-temporary-tables-of-other-sessions-in-postgres

=== [1236] of [1277] ============================= id=[42] ==
Q:  How do you tell SQLAlchemy to show all the rows returned in the log?
questiontag_set : ['sqlalchemy']
datetime_added  =[2014-08-04 20:58:22.748532+00:00]
datetime_updated=[2014-08-04 20:58:22.748563+00:00]
---------------------------------------------- id=[39] --
A:
for the `create_engine()` call, set:

    echo="debug"

e.g.,

     engine = create_engine(connect_string, echo='debug')



Alternatively:

    # sqlalchemy.engine - controls SQL echoing. set to logging.INFO for SQL query output, logging.DEBUG for query + result set output.
    import logging
    logging.basicConfig()
    # setting sqlalchemy.engine - controls SQL echoing. set to logging.INFO for SQL query output, logging.DEBUG for query + result set output.
    logging.getLogger('sqlalchemy.engine').setLevel(logging.DEBUG)

http://docs.sqlalchemy.org/en/rel_0_9/core/engines.htm

=== [1237] of [1277] ============================= id=[41] ==
Q:  How do you configure PostgreSQL to terminate statements that take longer than n milliseconds?
questiontag_set : ['postgresql']
datetime_added  =[2014-08-04 17:13:56.305084+00:00]
datetime_updated=[2014-08-04 17:13:56.305119+00:00]
---------------------------------------------- id=[38] --
A:
postgresql.conf:

    statement_timeout = 1000 # in milliseconds

=== [1238] of [1277] ============================= id=[40] ==
Q:  What are the sqlalchemy methods for creating and dropping all tables that are described in all the models?
questiontag_set : ['sqlalchemy']
datetime_added  =[2014-08-01 23:07:23.360686+00:00]
datetime_updated=[2014-08-01 23:07:23.360717+00:00]
---------------------------------------------- id=[37] --
A:
    from sqlalchemy.ext.declarative import declarative_base
    from sqlalchemy import create_engine
    
    base = declarative_base()
    engine = create_engine('sqlite:////tmp/my_sqlite_database.db', echo='debug')
    base.metadata.create_all(engine)
    base.metadata.drop_all(engine)

=== [1239] of [1277] ============================= id=[39] ==
Q:  In Postgresql, what is the difference between peer authentication and password authentication?  What do you do to be able to login with psql as a different user?
questiontag_set : ['postgresql']
datetime_added  =[2014-08-01 22:08:02.399365+00:00]
datetime_updated=[2014-08-01 22:08:02.399396+00:00]
---------------------------------------------- id=[36] --
A:
    1. CREATE USER myuser;
    2. ALTER USER myuser WITH password 'mypassword';
    3. echo 'localhost:5432:mydbname:myuser:mypassword' >> ~/.pgpass  # only needed if you don't want to be prompted for a password
    4. chmod go-rwx ~/.pgpass
    5. psql -h localhost --dbname=mydbname --username myusername
    (note that the -h localhost part is important: it tells the psql client to connect using a TCP connection (which is configured to use password authentication), and not by a PEER connection (which does not care about the password))
    http://stackoverflow.com/questions/2942485/psql-fatal-ident-authentication-failed-for-user-postgres

pg_hba.conf file:

    local   all             postgres                                peer

"peer" can also be set to "md5"

> Peer authentication
> 
> The peer authentication method works by obtaining the client's
> operating system user name from the kernel and using it as the allowed
> database user name (with optional user name mapping). This method is
> only supported on local connections.
> 
> Password authentication
> 
> The password-based authentication methods are md5 and password. These
> methods operate similarly except for the way that the password is sent
> across the connection, namely MD5-hashed and clear-text respectively.
> 
> If you are at all concerned about password "sniffing" attacks then md5
> is preferred. Plain password should always be avoided if possible.
> However, md5 cannot be used with the db_user_namespace feature. If the
> connection is protected by SSL encryption then password can be used
> safely (though SSL certificate authentication might be a better choice
> if one is depending on using SSL).

http://www.postgresql.org/docs/9.3/static/auth-methods.html

=== [1240] of [1277] ============================= id=[38] ==
Q:  What setting is causing SQL statements to be logged in Higgs for Trapit?
questiontag_set : ['trapit', 'postgresql']
datetime_added  =[2014-08-01 16:20:33.611972+00:00]
datetime_updated=[2014-08-01 16:20:33.612003+00:00]
---------------------------------------------- id=[35] --
A:
    SHOW ALL;
    ...
    log_min_duration_statement      | 1s                                                       | Sets the minimum execution time above which statements will be logged.

=== [1241] of [1277] ============================= id=[37] ==
Q:  How large is PCC Sylvania (in acres)?
questiontag_set : ['portland']
datetime_added  =[2014-08-01 14:51:00.572290+00:00]
datetime_updated=[2014-08-01 14:51:00.572346+00:00]
---------------------------------------------- id=[34] --
A:
122 acres

http://bond.pcc.edu/campus/sylvania-campus/

=== [1242] of [1277] ============================= id=[36] ==
Q:  What are the two mindsets that Carol Dweck has identified?
questiontag_set : ['psychology']
datetime_added  =[2014-07-31 18:51:32.939704+00:00]
datetime_updated=[2014-07-31 18:51:32.939737+00:00]
---------------------------------------------- id=[33] --
A:
**fixed** mindset -- encounters are test of worthiness; success based on innate ability; goal is to look smart and never dumb; dread failure  
**growth** mindset -- encounters are opportunities to improve; talents and abilities are developed through effort

> Some believe their success is based on innate ability; these are said
> to have a "fixed" theory of intelligence (fixed mindset). Others, who
> believe their success is based on hard work, learning, training and
> doggedness are said to have a "growth" or an "incremental" theory of
> intelligence (growth mindset). Individuals may not necessarily be
> aware of their own mindset, but their mindset can still be discerned
> based on their behavior. It is especially evident in their reaction to
> failure. Fixed-mindset individuals dread failure because it is a
> negative statement on their basic abilities, while growth mindset
> individuals don't mind or fear failure as much because they realize
> their performance can be improved and learning comes from failure.
> These two mindsets play an important role in all aspects of a person's
> life. Dweck argues that the growth mindset will allow a person to live
> a less stressful and more successful life. Dweck's definition of fixed
> and growth mindsets from a 2012 interview:
> 
> "In a fixed mindset students believe their basic abilities, their
> intelligence, their talents, are just fixed traits. They have a
> certain amount and that's that, and then their goal becomes to look
> smart all the time and never look dumb. In a growth mindset students
> understand that their talents and abilities can be developed through
> effort, good teaching and persistence. They don't necessarily think
> everyone's the same or anyone can be Einstein, but they believe
> everyone can get smarter if they work at it."

http://en.wikipedia.org/wiki/Carol_Dweck

=== [1243] of [1277] ============================= id=[35] ==
Q:  What is a non-codependent way of expressing an emotion?
questiontag_set : ['codependence']
datetime_added  =[2014-07-31 18:43:42.073859+00:00]
datetime_updated=[2014-07-31 18:43:42.073900+00:00]
---------------------------------------------- id=[32] --
A:
"I feel... when you... because..." communication

I feel \_\_\_ when you \_\_\_ because \_\_\_.  
I want \_\_\_.

[http://en.wikipedia.org/wiki/I-message][1]  
[http://www.thirteen.org/peaceful/strate.html][2]  
[http://www.selba.org/EngTaster/Social/Communication/ObsFeelNeedRequest.html][3]  
[https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=i%20feel%20when%20you%20because%20communication][4]


  [1]: http://en.wikipedia.org/wiki/I-message
  [2]: http://www.thirteen.org/peaceful/strate.html
  [3]: http://www.selba.org/EngTaster/Social/Communication/ObsFeelNeedRequest.html
  [4]: https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=i%20feel%20when%20you%20because%20communication

=== [1244] of [1277] ============================= id=[34] ==
Q:  Whenever you are feeling less than good, if you will stop and say, Nothing is more important than that I feel good—I want to find a reason now to feel good, you will find an improved thought.

Anytime you feel negative emotion, you are in the mode of resisting something that you want, and that resistance takes its toll on you. It takes its toll on your physical body, and it takes its toll on the amount of wonderful things that you are allowing to come into your experience.  

---Abraham  
Excerpted from the workshop: Money and the Law of Attraction on August 31, 2008

questiontag_set : ['abraham']
datetime_added  =[2014-07-31 15:14:13.341162+00:00]
datetime_updated=[2014-07-31 15:14:13.341193+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1245] of [1277] ============================= id=[33] ==
Q:  In Postgres, what is the difference between single quotes and double quotes?
questiontag_set : ['postgresql']
datetime_added  =[2014-07-30 20:56:30.338499+00:00]
datetime_updated=[2014-07-30 20:56:30.338529+00:00]
---------------------------------------------- id=[31] --
A:
double quotes => values (e.g., `WHERE name = "John"`)  
single quotes => system identifiers (field names, table names, ...) (e.g., `WHERE 'first name' = "John"`)

> MySQL uses ' or " to quote values (i.e. WHERE name = "John"). This is
> not the ANSI standard for databases. PostgreSQL uses only single
> quotes for this (i.e. WHERE name = 'John'). Double quotes are used to
> quote system identifiers; field names, table names, etc. (i.e. WHERE
> "last name" = 'Smith').

[https://wiki.postgresql.org/wiki/Things_to_find_out_about_when_moving_from_MySQL_to_PostgreSQL][1]


  [1]: https://wiki.postgresql.org/wiki/Things_to_find_out_about_when_moving_from_MySQL_to_PostgreSQL

=== [1246] of [1277] ============================= id=[32] ==
Q:  In Unix, how do you tell **less** to exit without clearing the screen of the contents of **less**?
questiontag_set : ['unix']
datetime_added  =[2014-07-24 15:01:05.334973+00:00]
datetime_updated=[2014-07-24 15:01:05.335005+00:00]
---------------------------------------------- id=[30] --
A:
    less --no-init

-or-

    less -X



=== [1247] of [1277] ============================= id=[31] ==
Q:  In the Trapit code, how do you enable SQLAlchemy to show all SQL statements?
questiontag_set : ['trapit']
datetime_added  =[2014-07-23 03:58:17.741962+00:00]
datetime_updated=[2014-07-23 03:58:17.741993+00:00]
---------------------------------------------- id=[29] --
A:
    def load_engine(env):
        engine = create_engine(connect_string, echo=True)
                                                    ^^^^
in:

    mom.mom.__init__.load_engine()

or, set this in the .test.conf file:

    [mom]
    echo: True

or set logging in the code like this:

    import logging, sys
    stdoutHandler = logging.StreamHandler(sys.stdout)
    log = logging.getLogger('sqlalchemy.engine')
    log.setLevel(logging.DEBUG)  # INFO ==> log queries
    log.addHandler(stdoutHandler)

=== [1248] of [1277] ============================= id=[30] ==
Q:  In SQLAlchemy, what is the difference between the SQL Expression Language and the ORM?
questiontag_set : ['sqlalchemy']
datetime_added  =[2014-07-23 00:25:09.883728+00:00]
datetime_updated=[2014-07-23 00:25:09.883759+00:00]
---------------------------------------------- id=[28] --
A:
> The SQLAlchemy Expression Language presents a system of representing
> relational database structures and expressions using Python
> constructs. These constructs are modeled to resemble those of the
> underlying database as closely as possible, while providing a modicum
> of abstraction of the various implementation differences between
> database backends. While the constructs attempt to represent
> equivalent concepts between backends with consistent structures, they
> do not conceal useful concepts that are unique to particular subsets
> of backends. The Expression Language therefore presents a method of
> writing backend-neutral SQL expressions, but does not attempt to
> enforce that expressions are backend-neutral.
> 
> The Expression Language is in contrast to the Object Relational
> Mapper, which is a distinct API that builds on top of the Expression
> Language. Whereas the ORM, introduced in Object Relational Tutorial,
> presents a high level and abstracted pattern of usage, which itself is
> an example of applied usage of the Expression Language, the Expression
> Language presents a system of representing the primitive constructs of
> the relational database directly without opinion.
> 
> While there is overlap among the usage patterns of the ORM and the
> Expression Language, the similarities are more superficial than they
> may at first appear. One approaches the structure and content of data
> from the perspective of a user-defined domain model which is
> transparently persisted and refreshed from its underlying storage
> model. The other approaches it from the perspective of literal schema
> and SQL expression representations which are explicitly composed into
> messages consumed individually by the database.
> 
> A successful application may be constructed using the Object
> Relational Mapper exclusively. In advanced situations, an application
> constructed with the ORM may make occasional usage of the Expression
> Language directly in certain areas where specific database
> interactions are required.

[http://docs.sqlalchemy.org/en/latest/core/tutorial.html][1]


  [1]: http://docs.sqlalchemy.org/en/latest/core/tutorial.html

=== [1249] of [1277] ============================= id=[29] ==
Q:  In SQLAlchemy, what is the difference between a classical mapping and the declarative system?
questiontag_set : ['sqlalchemy']
datetime_added  =[2014-07-22 22:30:26.754095+00:00]
datetime_updated=[2014-07-22 22:30:26.754124+00:00]
---------------------------------------------- id=[27] --
A:
A Declarative Mapping simply specifies the class, whereas a Classical Mapping specifies a class and maps it to a Table object.

[http://docs.sqlalchemy.org/en/rel_0_9/orm/mapper_config.html?highlight=classical][1]

> SQLAlchemy object-relational configuration involves the combination of
> Table, mapper(), and class objects to define a mapped class.
> declarative allows all three to be expressed at once within the class
> declaration.
[http://docs.sqlalchemy.org/en/rel_0_9/orm/extensions/declarative.html][2]


  [1]: http://docs.sqlalchemy.org/en/rel_0_9/orm/mapper_config.html?highlight=classical
  [2]: http://docs.sqlalchemy.org/en/rel_0_9/orm/extensions/declarative.html

=== [1250] of [1277] ============================= id=[28] ==
Q:  In SQLAlchemy, what is the term for describing the process of creating an instance of an object, adding some relations to it, and those relations automatically added to the session?
questiontag_set : ['sqlalchemy']
datetime_added  =[2014-07-22 05:16:32.953269+00:00]
datetime_updated=[2014-07-22 05:16:32.953330+00:00]
---------------------------------------------- id=[26] --
A:
**cascading**

    >>> jack = User(name='jack', fullname='Jack Bean', password='gjffdd')
    >>> jack.addresses
    []

We are free to add Address objects on our User object. In this case we just assign a full list directly:

    >>> jack.addresses = [
    ...                 Address(email_address='jack@google.com'),
    ...                 Address(email_address='j25@yahoo.com')]

When using a bidirectional relationship, elements added in one direction automatically become visible in the other direction. This behavior occurs based on attribute on-change events and is evaluated in Python, without using any SQL:

    >>> jack.addresses[1]
    <Address(email_address='j25@yahoo.com')>
    
    >>> jack.addresses[1].user
    <User(name='jack', fullname='Jack Bean', password='gjffdd')>

Let’s add and commit Jack Bean to the database. jack as well as the two Address members in the corresponding addresses collection are both added to the session at once, using a process known as **cascading**:

    >>> session.add(jack)
    >>> session.commit()

[http://docs.sqlalchemy.org/en/latest/orm/tutorial.html][1]


  [1]: http://docs.sqlalchemy.org/en/latest/orm/tutorial.html

=== [1251] of [1277] ============================= id=[27] ==
Q:  How do you tell nosetests to show logging output, even if the test passes?
questiontag_set : ['python', 'nosetests']
datetime_added  =[2014-07-18 14:55:26.239846+00:00]
datetime_updated=[2014-07-18 14:55:26.239878+00:00]
---------------------------------------------- id=[25] --
A:
    nosetests --debug=DEBUG --nocapture --nologcapture

=== [1252] of [1277] ============================= id=[26] ==
Q:  In SQLAlchemy, how do you create a "last_modified" column that automatically gets updated when a record is updated?
questiontag_set : ['sqlalchemy']
datetime_added  =[2014-07-18 12:05:19.564125+00:00]
datetime_updated=[2014-07-18 12:05:19.564163+00:00]
---------------------------------------------- id=[24] --
A:
    from datetime import datetime
    ...
    Column(’last_modified’, DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

=== [1253] of [1277] ============================= id=[25] ==
Q:  How do you change a git repository to use ssh instead of https for it's authentication with origin?
questiontag_set : ['git']
datetime_added  =[2014-07-18 11:30:34.211807+00:00]
datetime_updated=[2014-07-18 11:30:34.211880+00:00]
---------------------------------------------- id=[23] --
A:
    $ git remote set-url origin git@github.com:rbednark/my_repo.git


=== [1254] of [1277] ============================= id=[24] ==
Q:  Suppose you have these tables:

    users table:  name  org_id
    orgs table:   name  id

Do a query to select all users and show the name of their associated org.
questiontag_set : ['sql']
datetime_added  =[2014-07-18 09:20:13.139814+00:00]
datetime_updated=[2014-07-18 09:20:13.139863+00:00]
---------------------------------------------- id=[22] --
A:
    SELECT users.name, orgs.name
      FROM users
      LEFT JOIN orgs
        ON orgs.id = users.org_id;

=== [1255] of [1277] ============================= id=[23] ==
Q:  Difference between LEFT/RIGHT/INNER/OUTER JOINS

Example: Lets say you have a Students table (100 students, 70 of which have lockers), and a Lockers table (50 lockers, 40 with at least one student).

Each student can be assigned to a locker, so there is a "LockerNumber" column in the student table. More than one student could potentially be in a single locker, but especially at the begining of the school year, you may have some incoming students without lockers and some lockers that have no students assigned.

    Student table:
    id  student  locker_id
    -- -------   -------
    1   Rob        1
    2   Sara       NULL

    Locker table:
    id  locker
    -- -----
    1   a
    2   b

For the sake of this example, lets say you have 100 students, 70 of which have lockers. You have a total of 50 lockers, 40 of which have at least 1 student.

Describe each of the following:

1. INNER JOIN
1. LEFT OUTER JOIN
1. RIGHT OUTER JOIN
1. FULL OUTER JOIN
1. CROSS JOIN

http://stackoverflow.com/questions/448023/what-is-the-difference-between-left-right-outer-and-inner-joins

questiontag_set : ['sql']
datetime_added  =[2014-07-18 08:26:26.341462+00:00]
datetime_updated=[2015-02-10 15:34:30.825487+00:00]
---------------------------------------------- id=[21] --
A:
Summary:

1. INNER JOIN - all students with lockers (returns 70 rows)
1. LEFT OUTER JOIN - all students, and show locker if they have one (returns 100 rows)
1. RIGHT OUTER JOIN - all lockers, and students assigned to locker if there are any (returns 80 rows)
1. FULL OUTER JOIN - all students and all lockers, match up where you can (returns 110 rows)
1. CROSS JOIN - every possible student-to-locker pairing (returns 5000 rows)


> INNER JOIN is equivalent to "show me all students with lockers". Any
> students without lockers, or any lockers without students are missing.
> Returns 70 rows
> 
> LEFT OUTER JOIN would be "show me all students, with their
> corresponding locker if they have one". This might be a general
> student list, or could be used to identify students with no locker.
> Returns 100 rows [I think this is equivalent to a LEFT JOIN --Rob
> Bednark 10/27/13]
> 
> RIGHT OUTER JOIN would be "show me all lockers, and the students
> assigned to them if there are any". This could be used to identify
> lockers that have no students assigned, or lockers that have too many
> students. Returns 80 rows (list of 70 students in the 40 lockers, plus
> the 10 lockers with no student)
> 
> FULL OUTER JOIN would be silly and probably not much use. Something
> like "show me all students and all lockers, and match them up where
> you can" Returns 110 rows (all 100 students, including those without
> lockers. Plus the 10 lockers with no student)
> 
> CROSS JOIN is also fairly silly in this scenario. It doesn't use the
> linked "lockernumber" field in the students table, so you basically
> end up with a big giant list of every possible student-to-locker
> pairing, whether or not it actually exists. Returns 5000 rows (100
> students x 50 lockers). Could be useful (with filtering) as a starting
> point to match up the new students with the empty lockers.

[http://stackoverflow.com/questions/448023/what-is-the-difference-between-left-right-outer-and-inner-joins][1]


  [1]: http://stackoverflow.com/questions/448023/what-is-the-difference-between-left-right-outer-and-inner-joins

=== [1256] of [1277] ============================= id=[22] ==
Q:  What is a materialized view in Postgres?
questiontag_set : ['postgresql']
datetime_added  =[2014-07-16 21:40:06.035516+00:00]
datetime_updated=[2014-07-16 21:40:06.035550+00:00]
---------------------------------------------- id=[20] --
A:
> Materialized views in PostgreSQL use the rule system like views do,
> but persist the results in a table-like form. The main differences
> between:
> 
>     CREATE MATERIALIZED VIEW mymatview AS SELECT * FROM mytab; and:
> 
>     CREATE TABLE mymatview AS SELECT * FROM mytab; 
> are that the
> materialized view cannot subsequently be directly updated and that the
> query used to create the materialized view is stored in exactly the
> same way that a view's query is stored, so that fresh data can be
> generated for the materialized view with:
> 
>     REFRESH MATERIALIZED VIEW mymatview;

[http://www.postgresql.org/docs/9.3/static/rules-materializedviews.html][1]


  [1]: http://www.postgresql.org/docs/9.3/static/rules-materializedviews.html

=== [1257] of [1277] ============================= id=[21] ==
Q:  How can you get the doc_id and trap_id for a document from the UI?
questiontag_set : ['trapit']
datetime_added  =[2014-07-16 16:34:14.619876+00:00]
datetime_updated=[2014-07-16 16:34:14.619907+00:00]
---------------------------------------------- id=[19] --
A:
In the browser in Storm or Vulcan:

1. go into Developer Tools > Network
1. make a request to do something with the document (e.g., rate, feature, publish, share, edit)
1. Look at the parameters in the network request

=== [1258] of [1277] ============================= id=[20] ==
Q:  Daniel Dennet on how to compose a successful critical commentary

1. You should attempt to re-express your target’s position so clearly, vividly, and fairly that your target says, “Thanks, I wish I’d thought of putting it that way.

2. You should list any points of agreement (especially if they are not matters of general or widespread agreement).

3. You should mention anything you have learned from your target.

4. Only then are you permitted to say so much as a word of rebuttal or criticism.

- Daniel Dennet
questiontag_set : ['unassimilated']
datetime_added  =[2014-07-15 22:15:19.659331+00:00]
datetime_updated=[2014-07-15 22:15:19.659368+00:00]
---------------------------------------------- id=[18] --
A:
> Daniel Dennet on how to compose a successful critical commentary:
> 
> 1. You should attempt to re-express your target’s position so clearly, vividly, and fairly that your target says, “Thanks, I wish I’d thought
> of putting it that way.
> 
> 2. You should list any points of agreement (especially if they are not matters of general or widespread agreement).
> 
> 3. You should mention anything you have learned from your target.
> 
> 4. Only then are you permitted to say so much as a word of rebuttal or criticism.
> 
> \- Daniel Dennet

http://www.swiss-miss.com/2014/07/how-to-compose-a-successful-critical-commentary.html

=== [1259] of [1277] ============================= id=[19] ==
Q:  Review the Python wiki: [https://wiki.python.org/moin/][1]


  [1]: https://wiki.python.org/moin/
questiontag_set : ['python']
datetime_added  =[2014-07-15 21:37:01.625205+00:00]
datetime_updated=[2014-08-17 16:28:17.764288+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1260] of [1277] ============================= id=[18] ==
Q:  Review the sqlite data types:  [http://www.sqlite.org/datatype3.html][1]


  [1]: http://www.sqlite.org/datatype3.html
questiontag_set : ['sqlite3']
datetime_added  =[2014-07-15 19:02:50.214161+00:00]
datetime_updated=[2015-02-09 20:24:42.142922+00:00]
---------------------------------------------- id=[17] --
A:
Summary:

Per [http://www.sqlite.org/datatype3.html][1] :

> 1.0 Storage Classes and Datatypes
> 
> Each value stored in an SQLite database (or manipulated by the
> database engine) has one of the following storage classes:
> 
> NULL. The value is a NULL value.
> 
> INTEGER. The value is a signed integer, stored in 1, 2, 3, 4, 6, or 8
> bytes depending on the magnitude of the value.
> 
> REAL. The value is a floating point value, stored as an 8-byte IEEE
> floating point number.
> 
> TEXT. The value is a text string, stored using the database encoding
> (UTF-8, UTF-16BE or UTF-16LE).
> 
> BLOB. The value is a blob of data, stored exactly as it was input.
> 
> Note that a storage class is slightly more general than a datatype.
> The INTEGER storage class, for example, includes 6 different integer
> datatypes of different lengths. This makes a difference on disk. But
> as soon as INTEGER values are read off of disk and into memory for
> processing, they are converted to the most general datatype (8-byte
> signed integer). And so for the most part, "storage class" is
> indistinguishable from "datatype" and the two terms can be used
> interchangeably.
> 
> Any column in an SQLite version 3 database, except an INTEGER PRIMARY
> KEY column, may be used to store a value of any storage class.
> 
> All values in SQL statements, whether they are literals embedded in
> SQL statement text or parameters bound to precompiled SQL statements
> have an implicit storage class. Under circumstances described below,
> the database engine may convert values between numeric storage classes
> (INTEGER and REAL) and TEXT during query execution.
> 
> 1.1 Boolean Datatype
> 
> SQLite does not have a separate Boolean storage class. Instead,
> Boolean values are stored as integers 0 (false) and 1 (true).
> 
> 1.2 Date and Time Datatype
> 
> SQLite does not have a storage class set aside for storing dates
> and/or times. Instead, the built-in Date And Time Functions of SQLite
> are capable of storing dates and times as TEXT, REAL, or INTEGER
> values:
> 
> TEXT as ISO8601 strings ("YYYY-MM-DD HH:MM:SS.SSS"). REAL as Julian
> day numbers, the number of days since noon in Greenwich on November
> 24, 4714 B.C. according to the proleptic Gregorian calendar. INTEGER
> as Unix Time, the number of seconds since 1970-01-01 00:00:00 UTC.
> Applications can chose to store dates and times in any of these
> formats and freely convert between formats using the built-in date and
> time functions.
> 
> 2.2 Affinity Name Examples
> 
> The following table shows how many common datatype names from more
> traditional SQL implementations are converted into affinities by the
> five rules of the previous section. This table shows only a small
> subset of the datatype names that SQLite will accept. Note that
> numeric arguments in parentheses that following the type name (ex:
> "VARCHAR(255)") are ignored by SQLite - SQLite does not impose any
> length restrictions (other than the large global SQLITE_MAX_LENGTH
> limit) on the length of strings, BLOBs or numeric values.
> 

    |Example Typenames From The|                  |                               |
    |CREATE TABLE Statement    |Resulting Affinity|Rule Used To Determine Affinity|
    |or CAST Expression        |                  |                               |
    |             INT          |                  |                               |
    |           INTEGER        |                  |                               |
    |           TINYINT        |                  |                               |
    |           SMALLINT       |                  |                               |
    |          MEDIUMINT       |        INTEGER   |                      1        |
    |            BIGINT        |                  |                               |
    |       UNSIGNED BIG INT   |                  |                               |
    |             INT2         |                  |                               |
    |             INT8         |                  |                               |
    --------------------------------------------------------------------------------
    |       CHARACTER(20)      |                  |                               |
    |        VARCHAR(255)      |                  |                               |
    |   VARYING CHARACTER(255) |                  |                               |
    |         NCHAR(55)        |          TEXT    |                      2        |
    |    NATIVE CHARACTER(70)  |                  |                               |
    |       NVARCHAR(100)      |                  |                               |
    |            TEXT          |                  |                               |
    |            CLOB          |                  |                               |
    --------------------------------------------------------------------------------
    |            BLOB          |          NONE    |                      3        |
    |   no datatype specified  |                  |                               |
    ------------------------------------------------------------------------------
    |             REAL         |                  |                               |
    |            DOUBLE        |          REAL    |                      4        |
    |       DOUBLE PRECISION   |                  |                               |
    |            FLOAT         |                  |                               |
    -------------------------------------------------------------------------------
    |            NUMERIC       |                  |                               |
    |         DECIMAL(10,5)    |                  |                               |
    |            BOOLEAN       |        NUMERIC   |                      5        |
    |              DATE        |                  |                               |
    |            DATETIME      |                  |                               |

Note that a declared type of "FLOATING POINT" would give INTEGER affinity, not REAL affinity, due to the "INT" at the end of "POINT". And the declared type of "STRING" has an affinity of NUMERIC, not TEXT.


  [1]: http://www.sqlite.org/datatype3.html

=== [1261] of [1277] ============================= id=[17] ==
Q:  In psql, how do you show the data definition (columns, etc.) for a table?  (how to show basic, and how to show additional)
questiontag_set : ['postgresql']
datetime_added  =[2014-07-15 15:51:17.859867+00:00]
datetime_updated=[2015-02-09 20:20:40.529660+00:00]
---------------------------------------------- id=[16] --
A:
    psql> \d my_table

or to show more information:

    psql> \d+ my_table



=== [1262] of [1277] ============================= id=[16] ==
Q:  In SQLAlchemy, how do you enable logging to show all the SQL commands?
questiontag_set : ['sqlalchemy']
datetime_added  =[2014-07-15 15:16:57.293155+00:00]
datetime_updated=[2014-07-15 15:16:57.293187+00:00]
---------------------------------------------- id=[15] --
A:
1) Use the `echo=True` argument to `check_engine()`, e.g.,

    engine = create_engine('postgres://my_username:my_password@localhost/my_database', echo=True)

-or-

2) Use logging, e.g.,

    import logging
    logging.basicConfig()
    logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)  # INFO ==> log queries
    logging.getLogger('sqlalchemy.engine').setLevel(logging.DEBUG)  # DEBUG ==> queries + result set

=== [1263] of [1277] ============================= id=[15] ==
Q:  In Markdown, how do you add code after a list?
questiontag_set : ['markdown']
datetime_added  =[2014-07-15 14:41:51.175530+00:00]
datetime_updated=[2014-07-15 14:41:51.175562+00:00]
---------------------------------------------- id=[14] --
A:
Add an html element after the list, e.g.,

    1. list item

    <!-- html element -->

         indented code

e.g.,

1. list item

<!-- html element -->

    code

=== [1264] of [1277] ============================= id=[14] ==
Q:  How do you redirect only stderr to a file?
questiontag_set : ['bash', 'sh']
datetime_added  =[2014-07-15 14:03:05.197272+00:00]
datetime_updated=[2014-07-15 14:03:05.197303+00:00]
---------------------------------------------- id=[13] --
A:
Use `2>`, e.g.,

     grep asdf asdf 2> /dev/null

=== [1265] of [1277] ============================= id=[13] ==
Q:  What does the SQLAlchemy PostgreSQL connect string look like?  How many different components are there?
questiontag_set : ['sqlalchemy', 'postgresql']
datetime_added  =[2014-07-15 13:55:49.839318+00:00]
datetime_updated=[2014-07-15 13:55:49.839348+00:00]
---------------------------------------------- id=[12] --
A:
There are 7 components (some of them optional):

1.  dialect
1.  driver
1.  username
1.  password
1.  host
1.  port
1.  database


        # dialect+driver://username:password@host:port/database
        # engine = create_engine('{DATABASE_TYPE}+{DRIVER}://{USERNAME}:{PASSWORD}@{HOST}:{PORT}/{DB_NAME}')
        engine = create_engine('postgres://my_username:my_password@localhost/my_database')

=== [1266] of [1277] ============================= id=[12] ==
Q:  What does this code do?

    from sqlalchemy import create_engine
    from sqlalchemy.org import sessionmaker
    
    engine = create_engine('postgres://postgres:postgres@localhost/%s' % DB, echo=True)
    Session = sessionmaker(bind=engine)
    session = Session()
questiontag_set : ['sqlalchemy']
datetime_added  =[2014-07-15 01:13:35.411567+00:00]
datetime_updated=[2014-07-15 01:13:35.411605+00:00]
---------------------------------------------- id=[11] --
A:
It creates a session instance that can then be used to communicate with the ORM (insert rows, query, ...).

=== [1267] of [1277] ============================= id=[11] ==
Q:  What is the code to construct the interface to communicate with the ORM?  (2 import's and 3 lines of code)
questiontag_set : ['sqlalchemy']
datetime_added  =[2014-07-15 01:12:20.852488+00:00]
datetime_updated=[2015-01-23 14:53:48.081244+00:00]
---------------------------------------------- id=[10] --
A:
    from sqlalchemy import create_engine
    from sqlalchemy.org import sessionmaker
    
    engine = create_engine('postgres://postgres:postgres@localhost/%s' % DB, echo=True)
    Session = sessionmaker(bind=engine)
    session = Session()

=== [1268] of [1277] ============================= id=[10] ==
Q:  What version of SQLAlchemy is Trapit using?
questiontag_set : []
datetime_added  =[2014-07-14 19:40:29.154814+00:00]
datetime_updated=[2014-07-14 19:40:29.154860+00:00]
---------------------------------------------- id=[9] --
A:
0.8.2

Note that it is unpinned in mom.  0.8.2 is the only version on president.  I don't know why the "wr update-package-index" hasn't updated it on president.  The latest PyPI version as of 7/14/14 is 0.9.6

=== [1269] of [1277] ============================= id=[9] ==
Q:  In Postgres, how do you list the data types? (user-defined, system-defined, enums, ...)  (note: there is a different modifier for system-defined types)
questiontag_set : ['postgresql']
datetime_added  =[2014-07-14 18:02:19.909455+00:00]
datetime_updated=[2015-02-09 19:59:34.332099+00:00]
---------------------------------------------- id=[8] --
A:
List user-defined data types:

    psql> \dT+

List system data types as well:

    psql> \dTS+



=== [1270] of [1277] ============================= id=[8] ==
Q:  In Postgres, how do you create a table with a column that is an enumerated type?
questiontag_set : ['postgresql']
datetime_added  =[2014-07-14 17:58:20.303263+00:00]
datetime_updated=[2014-07-14 17:58:20.303294+00:00]
---------------------------------------------- id=[7] --
A:
    CREATE TYPE mood AS ENUM ('happy', 'joyful', 'ecstatic');
    CREATE TABLE person (
        name text,
        current_mood mood
    );
    INSERT INTO person VALUES ('Rob', 'joyful');

=== [1271] of [1277] ============================= id=[7] ==
Q:  In SQLAlchemy, what is the difference between the **ORM** and the **SQLAlchemy Expression Language**?
questiontag_set : ['sqlalchemy']
datetime_added  =[2014-07-14 15:29:44.644649+00:00]
datetime_updated=[2014-07-14 15:29:44.644681+00:00]
---------------------------------------------- id=[6] --
A:
ORM is constructed on the SQLAlchemy Expression Language.  ORM is high-level, related to Python objects.  The Expression Language is low-level, related to the schema.

> The ORM is in contrast to the SQLAlchemy Expression Language, upon
> which the ORM is constructed. Whereas the SQL Expression Language,
> introduced in SQL Expression Language Tutorial, presents a system of
> representing the primitive constructs of the relational database
> directly without opinion, the ORM presents a high level and abstracted
> pattern of usage, which itself is an example of applied usage of the
> Expression Language.
> 
> While there is overlap among the usage patterns of the ORM and the
> Expression Language, the similarities are more superficial than they
> may at first appear. One approaches the structure and content of data
> from the perspective of a user-defined domain model which is
> transparently persisted and refreshed from its underlying storage
> model. The other approaches it from the perspective of literal schema
> and SQL expression representations which are explicitly composed into
> messages consumed individually by the database.
> 
> A successful application may be constructed using the Object
> Relational Mapper exclusively. In advanced situations, an application
> constructed with the ORM may make occasional usage of the Expression
> Language directly in certain areas where specific database
> interactions are required.
[ http://docs.sqlalchemy.org/en/rel_0_8/orm/tutorial.html ]

=== [1272] of [1277] ============================= id=[6] ==
Q:  What is a **unit of work** in SQLAlchemy?
questiontag_set : ['sqlalchemy']
datetime_added  =[2014-07-14 15:23:29.775086+00:00]
datetime_updated=[2014-07-14 15:23:29.775180+00:00]
---------------------------------------------- id=[5] --
A:
A unit of work is changes in state between Python objects and their related db rows.

[SQLAlchemy] includes a system that transparently synchronizes all changes in state between objects and their related rows, called a unit of work.   
 [http://docs.sqlalchemy.org/en/rel_0_8/orm/tutorial.html][1] 
 [http://martinfowler.com/eaaCatalog/unitOfWork.html][2]


  [1]: http://docs.sqlalchemy.org/en/rel_0_8/orm/tutorial.html
  [2]: http://martinfowler.com/eaaCatalog/unitOfWork.html

=== [1273] of [1277] ============================= id=[5] ==
Q:  What are the 8 Selenium locators that can be used to select elements?
questiontag_set : ['selenium']
datetime_added  =[2014-07-13 22:40:57.799444+00:00]
datetime_updated=[2014-07-13 22:40:57.799492+00:00]
---------------------------------------------- id=[4] --
A:
1.  Identifier
1.  Id
1.  Name
1.  Link
1.  DOM
1.  XPath
1.  CSS
1.  UI-element

=== [1274] of [1277] ============================= id=[4] ==
Q:  Glance at this PDF that shows the ways in which you can select elements in Selenium.

[https://www.simple-talk.com/dotnet/.net-framework/xpath,-css,-dom-and-selenium-the-rosetta-stone/][1]


  [1]: https://www.simple-talk.com/dotnet/.net-framework/xpath,-css,-dom-and-selenium-the-rosetta-stone/
questiontag_set : ['selenium']
datetime_added  =[2014-07-13 22:39:14.172617+00:00]
datetime_updated=[2014-07-13 22:39:14.172649+00:00]
--------------------------------------------------------------------------------
(no answer)

=== [1275] of [1277] ============================= id=[3] ==
Q:  What does the X-Ray Goggles website by Mozilla allow you to do?  
[https://goggles.webmaker.org][1]


  [1]: https://goggles.webmaker.org
questiontag_set : ['css']
datetime_added  =[2014-07-08 01:15:42.314139+00:00]
datetime_updated=[2014-07-13 15:26:24.891754+00:00]
---------------------------------------------- id=[3] --
A:
Remix and share web pages instantly.  (edit, modify)

=== [1276] of [1277] ============================= id=[2] ==
Q:  What does this code do?

    <script>
      function clickHandler() {
         alert("Hello, World!");
      }
    </script>
    <span onclick="clickHandler();">Click Here</span>

[http://jsfiddle.net/rbednark/uGuMR/][1]


  [1]: http://jsfiddle.net/rbednark/uGuMR/
questiontag_set : ['javascript']
datetime_added  =[2014-07-08 01:10:02.574012+00:00]
datetime_updated=[2015-01-23 01:32:16.668586+00:00]
---------------------------------------------- id=[2] --
A:
When you click on the "Click Here" text, an alert box will pop up that says "Hello World!" 

[http://jsfiddle.net/rbednark/uGuMR/][1]


  [1]: http://jsfiddle.net/rbednark/uGuMR/

=== [1277] of [1277] ============================= id=[1] ==
Q:  What is sometimes a problem with having a local pip2pi package repository and rsync'ing to it?
questiontag_set : ['trapit']
datetime_added  =[2014-07-08 01:00:58.433961+00:00]
datetime_updated=[2014-07-08 01:00:58.433994+00:00]
---------------------------------------------- id=[1] --
A:
If:

1. a user does a "wr update-package-index" which gets all the recent versions of packages from PiPy
2. the user does a release which does an rsync to president
3. the release was done in a package (e.g., mom) that has a package (e.g., docopt) not pinned
4. the package that is not pinned (e.g., docopt) is pinned in another required package (e.g., redbike has docopt==0.6.1)
5. the tests pass and the release is created

then:  

  - there will be a runtime error when the package is deployed, e.g.,  

    pkg_resources.VersionConflict: (docopt 0.6.2 (/trapit/mom/76e8972c-fd81-11e3-9512-1285db2c24cb/.virt/lib/python2.7/site-packages), Requirement.parse('docopt==0.6.1'))

     

