--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: auth_group; Type: TABLE; Schema: public; Owner: quizme; Tablespace: 
--

CREATE TABLE auth_group (
    id integer NOT NULL,
    name character varying(80) NOT NULL
);


ALTER TABLE public.auth_group OWNER TO quizme;

--
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: quizme
--

CREATE SEQUENCE auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.auth_group_id_seq OWNER TO quizme;

--
-- Name: auth_group_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: quizme
--

ALTER SEQUENCE auth_group_id_seq OWNED BY auth_group.id;


--
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: quizme; Tablespace: 
--

CREATE TABLE auth_group_permissions (
    id integer NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_group_permissions OWNER TO quizme;

--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: quizme
--

CREATE SEQUENCE auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.auth_group_permissions_id_seq OWNER TO quizme;

--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: quizme
--

ALTER SEQUENCE auth_group_permissions_id_seq OWNED BY auth_group_permissions.id;


--
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: quizme; Tablespace: 
--

CREATE TABLE auth_permission (
    id integer NOT NULL,
    name character varying(50) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);


ALTER TABLE public.auth_permission OWNER TO quizme;

--
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: quizme
--

CREATE SEQUENCE auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.auth_permission_id_seq OWNER TO quizme;

--
-- Name: auth_permission_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: quizme
--

ALTER SEQUENCE auth_permission_id_seq OWNED BY auth_permission.id;


--
-- Name: django_admin_log; Type: TABLE; Schema: public; Owner: quizme; Tablespace: 
--

CREATE TABLE django_admin_log (
    id integer NOT NULL,
    action_time timestamp with time zone NOT NULL,
    user_id integer NOT NULL,
    content_type_id integer,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);


ALTER TABLE public.django_admin_log OWNER TO quizme;

--
-- Name: django_admin_log_id_seq; Type: SEQUENCE; Schema: public; Owner: quizme
--

CREATE SEQUENCE django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.django_admin_log_id_seq OWNER TO quizme;

--
-- Name: django_admin_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: quizme
--

ALTER SEQUENCE django_admin_log_id_seq OWNED BY django_admin_log.id;


--
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: quizme; Tablespace: 
--

CREATE TABLE django_content_type (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);


ALTER TABLE public.django_content_type OWNER TO quizme;

--
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: quizme
--

CREATE SEQUENCE django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.django_content_type_id_seq OWNER TO quizme;

--
-- Name: django_content_type_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: quizme
--

ALTER SEQUENCE django_content_type_id_seq OWNED BY django_content_type.id;


--
-- Name: django_session; Type: TABLE; Schema: public; Owner: quizme; Tablespace: 
--

CREATE TABLE django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);


ALTER TABLE public.django_session OWNER TO quizme;

--
-- Name: django_site; Type: TABLE; Schema: public; Owner: quizme; Tablespace: 
--

CREATE TABLE django_site (
    id integer NOT NULL,
    domain character varying(100) NOT NULL,
    name character varying(50) NOT NULL
);


ALTER TABLE public.django_site OWNER TO quizme;

--
-- Name: django_site_id_seq; Type: SEQUENCE; Schema: public; Owner: quizme
--

CREATE SEQUENCE django_site_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.django_site_id_seq OWNER TO quizme;

--
-- Name: django_site_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: quizme
--

ALTER SEQUENCE django_site_id_seq OWNED BY django_site.id;


--
-- Name: emailusername_user; Type: TABLE; Schema: public; Owner: quizme; Tablespace: 
--

CREATE TABLE emailusername_user (
    id integer NOT NULL,
    password character varying(128) NOT NULL,
    last_login timestamp with time zone NOT NULL,
    email character varying(255) NOT NULL,
    is_active boolean NOT NULL,
    is_admin boolean NOT NULL
);


ALTER TABLE public.emailusername_user OWNER TO quizme;

--
-- Name: emailusername_user_id_seq; Type: SEQUENCE; Schema: public; Owner: quizme
--

CREATE SEQUENCE emailusername_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.emailusername_user_id_seq OWNER TO quizme;

--
-- Name: emailusername_user_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: quizme
--

ALTER SEQUENCE emailusername_user_id_seq OWNED BY emailusername_user.id;


--
-- Name: questions_answer; Type: TABLE; Schema: public; Owner: quizme; Tablespace: 
--

CREATE TABLE questions_answer (
    id integer NOT NULL,
    datetime_added timestamp with time zone NOT NULL,
    datetime_updated timestamp with time zone NOT NULL,
    user_id integer,
    answer text NOT NULL
);


ALTER TABLE public.questions_answer OWNER TO quizme;

--
-- Name: questions_answer_id_seq; Type: SEQUENCE; Schema: public; Owner: quizme
--

CREATE SEQUENCE questions_answer_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.questions_answer_id_seq OWNER TO quizme;

--
-- Name: questions_answer_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: quizme
--

ALTER SEQUENCE questions_answer_id_seq OWNED BY questions_answer.id;


--
-- Name: questions_attempt; Type: TABLE; Schema: public; Owner: quizme; Tablespace: 
--

CREATE TABLE questions_attempt (
    id integer NOT NULL,
    datetime_added timestamp with time zone NOT NULL,
    datetime_updated timestamp with time zone NOT NULL,
    user_id integer,
    attempt text NOT NULL,
    question_id integer NOT NULL
);


ALTER TABLE public.questions_attempt OWNER TO quizme;

--
-- Name: questions_attempt_id_seq; Type: SEQUENCE; Schema: public; Owner: quizme
--

CREATE SEQUENCE questions_attempt_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.questions_attempt_id_seq OWNER TO quizme;

--
-- Name: questions_attempt_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: quizme
--

ALTER SEQUENCE questions_attempt_id_seq OWNED BY questions_attempt.id;


--
-- Name: questions_hint; Type: TABLE; Schema: public; Owner: quizme; Tablespace: 
--

CREATE TABLE questions_hint (
    id integer NOT NULL,
    datetime_added timestamp with time zone NOT NULL,
    datetime_updated timestamp with time zone NOT NULL,
    user_id integer,
    answer_id integer,
    hint text NOT NULL
);


ALTER TABLE public.questions_hint OWNER TO quizme;

--
-- Name: questions_hint_id_seq; Type: SEQUENCE; Schema: public; Owner: quizme
--

CREATE SEQUENCE questions_hint_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.questions_hint_id_seq OWNER TO quizme;

--
-- Name: questions_hint_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: quizme
--

ALTER SEQUENCE questions_hint_id_seq OWNED BY questions_hint.id;


--
-- Name: questions_question; Type: TABLE; Schema: public; Owner: quizme; Tablespace: 
--

CREATE TABLE questions_question (
    id integer NOT NULL,
    datetime_added timestamp with time zone NOT NULL,
    datetime_updated timestamp with time zone NOT NULL,
    user_id integer,
    question text NOT NULL,
    answer_id integer
);


ALTER TABLE public.questions_question OWNER TO quizme;

--
-- Name: questions_question_id_seq; Type: SEQUENCE; Schema: public; Owner: quizme
--

CREATE SEQUENCE questions_question_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.questions_question_id_seq OWNER TO quizme;

--
-- Name: questions_question_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: quizme
--

ALTER SEQUENCE questions_question_id_seq OWNED BY questions_question.id;


--
-- Name: questions_questiontag; Type: TABLE; Schema: public; Owner: quizme; Tablespace: 
--

CREATE TABLE questions_questiontag (
    id integer NOT NULL,
    datetime_added timestamp with time zone NOT NULL,
    datetime_updated timestamp with time zone NOT NULL,
    user_id integer,
    question_id integer NOT NULL,
    tag_id integer NOT NULL,
    enabled boolean NOT NULL
);


ALTER TABLE public.questions_questiontag OWNER TO quizme;

--
-- Name: questions_questiontag_id_seq; Type: SEQUENCE; Schema: public; Owner: quizme
--

CREATE SEQUENCE questions_questiontag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.questions_questiontag_id_seq OWNER TO quizme;

--
-- Name: questions_questiontag_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: quizme
--

ALTER SEQUENCE questions_questiontag_id_seq OWNED BY questions_questiontag.id;


--
-- Name: questions_quiz; Type: TABLE; Schema: public; Owner: quizme; Tablespace: 
--

CREATE TABLE questions_quiz (
    id integer NOT NULL,
    datetime_added timestamp with time zone NOT NULL,
    datetime_updated timestamp with time zone NOT NULL,
    user_id integer,
    name character varying(1000) NOT NULL
);


ALTER TABLE public.questions_quiz OWNER TO quizme;

--
-- Name: questions_quiz_id_seq; Type: SEQUENCE; Schema: public; Owner: quizme
--

CREATE SEQUENCE questions_quiz_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.questions_quiz_id_seq OWNER TO quizme;

--
-- Name: questions_quiz_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: quizme
--

ALTER SEQUENCE questions_quiz_id_seq OWNED BY questions_quiz.id;


--
-- Name: questions_tag; Type: TABLE; Schema: public; Owner: quizme; Tablespace: 
--

CREATE TABLE questions_tag (
    id integer NOT NULL,
    datetime_added timestamp with time zone NOT NULL,
    datetime_updated timestamp with time zone NOT NULL,
    user_id integer,
    name character varying(1000) NOT NULL
);


ALTER TABLE public.questions_tag OWNER TO quizme;

--
-- Name: questions_tag_id_seq; Type: SEQUENCE; Schema: public; Owner: quizme
--

CREATE SEQUENCE questions_tag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.questions_tag_id_seq OWNER TO quizme;

--
-- Name: questions_tag_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: quizme
--

ALTER SEQUENCE questions_tag_id_seq OWNED BY questions_tag.id;


--
-- Name: questions_usertag; Type: TABLE; Schema: public; Owner: quizme; Tablespace: 
--

CREATE TABLE questions_usertag (
    id integer NOT NULL,
    user_id integer NOT NULL,
    tag_id integer NOT NULL,
    enabled boolean NOT NULL
);


ALTER TABLE public.questions_usertag OWNER TO quizme;

--
-- Name: questions_usertag_id_seq; Type: SEQUENCE; Schema: public; Owner: quizme
--

CREATE SEQUENCE questions_usertag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.questions_usertag_id_seq OWNER TO quizme;

--
-- Name: questions_usertag_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: quizme
--

ALTER SEQUENCE questions_usertag_id_seq OWNED BY questions_usertag.id;


--
-- Name: south_migrationhistory; Type: TABLE; Schema: public; Owner: quizme; Tablespace: 
--

CREATE TABLE south_migrationhistory (
    id integer NOT NULL,
    app_name character varying(255) NOT NULL,
    migration character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);


ALTER TABLE public.south_migrationhistory OWNER TO quizme;

--
-- Name: south_migrationhistory_id_seq; Type: SEQUENCE; Schema: public; Owner: quizme
--

CREATE SEQUENCE south_migrationhistory_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.south_migrationhistory_id_seq OWNER TO quizme;

--
-- Name: south_migrationhistory_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: quizme
--

ALTER SEQUENCE south_migrationhistory_id_seq OWNED BY south_migrationhistory.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY auth_group ALTER COLUMN id SET DEFAULT nextval('auth_group_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY auth_group_permissions ALTER COLUMN id SET DEFAULT nextval('auth_group_permissions_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY auth_permission ALTER COLUMN id SET DEFAULT nextval('auth_permission_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY django_admin_log ALTER COLUMN id SET DEFAULT nextval('django_admin_log_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY django_content_type ALTER COLUMN id SET DEFAULT nextval('django_content_type_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY django_site ALTER COLUMN id SET DEFAULT nextval('django_site_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY emailusername_user ALTER COLUMN id SET DEFAULT nextval('emailusername_user_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_answer ALTER COLUMN id SET DEFAULT nextval('questions_answer_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_attempt ALTER COLUMN id SET DEFAULT nextval('questions_attempt_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_hint ALTER COLUMN id SET DEFAULT nextval('questions_hint_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_question ALTER COLUMN id SET DEFAULT nextval('questions_question_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_questiontag ALTER COLUMN id SET DEFAULT nextval('questions_questiontag_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_quiz ALTER COLUMN id SET DEFAULT nextval('questions_quiz_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_tag ALTER COLUMN id SET DEFAULT nextval('questions_tag_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_usertag ALTER COLUMN id SET DEFAULT nextval('questions_usertag_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY south_migrationhistory ALTER COLUMN id SET DEFAULT nextval('south_migrationhistory_id_seq'::regclass);


--
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: quizme
--

COPY auth_group (id, name) FROM stdin;
\.


--
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quizme
--

SELECT pg_catalog.setval('auth_group_id_seq', 1, false);


--
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: quizme
--

COPY auth_group_permissions (id, group_id, permission_id) FROM stdin;
\.


--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quizme
--

SELECT pg_catalog.setval('auth_group_permissions_id_seq', 1, false);


--
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: quizme
--

COPY auth_permission (id, name, content_type_id, codename) FROM stdin;
1	Can add permission	1	add_permission
2	Can change permission	1	change_permission
3	Can delete permission	1	delete_permission
4	Can add group	2	add_group
5	Can change group	2	change_group
6	Can delete group	2	delete_group
7	Can add content type	3	add_contenttype
8	Can change content type	3	change_contenttype
9	Can delete content type	3	delete_contenttype
10	Can add session	4	add_session
11	Can change session	4	change_session
12	Can delete session	4	delete_session
13	Can add site	5	add_site
14	Can change site	5	change_site
15	Can delete site	5	delete_site
16	Can add log entry	6	add_logentry
17	Can change log entry	6	change_logentry
18	Can delete log entry	6	delete_logentry
19	Can add migration history	7	add_migrationhistory
20	Can change migration history	7	change_migrationhistory
21	Can delete migration history	7	delete_migrationhistory
22	Can add user	8	add_user
23	Can change user	8	change_user
24	Can delete user	8	delete_user
25	Can add question	9	add_question
26	Can change question	9	change_question
27	Can delete question	9	delete_question
28	Can add answer	10	add_answer
29	Can change answer	10	change_answer
30	Can delete answer	10	delete_answer
31	Can add attempt	11	add_attempt
32	Can change attempt	11	change_attempt
33	Can delete attempt	11	delete_attempt
34	Can add hint	12	add_hint
35	Can change hint	12	change_hint
36	Can delete hint	12	delete_hint
37	Can add tag	13	add_tag
38	Can change tag	13	change_tag
39	Can delete tag	13	delete_tag
40	Can add quiz	14	add_quiz
41	Can change quiz	14	change_quiz
42	Can delete quiz	14	delete_quiz
43	Can add question tag	15	add_questiontag
44	Can change question tag	15	change_questiontag
45	Can delete question tag	15	delete_questiontag
46	Can add user tag	16	add_usertag
47	Can change user tag	16	change_usertag
48	Can delete user tag	16	delete_usertag
\.


--
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quizme
--

SELECT pg_catalog.setval('auth_permission_id_seq', 48, true);


--
-- Data for Name: django_admin_log; Type: TABLE DATA; Schema: public; Owner: quizme
--

COPY django_admin_log (id, action_time, user_id, content_type_id, object_id, object_repr, action_flag, change_message) FROM stdin;
1	2014-07-07 17:47:12.936258-07	1	13	1	Trapit	1	
2	2014-07-07 18:00:53.318019-07	1	10	1	<Answer answer=[If:\r\n  - a user does a "wr update-package-index" which gets all the recent versions of packages from PiPy\r\n  - the user does a release which does an rsync to president\r\n  - the release	1	
3	2014-07-07 18:00:58.442215-07	1	9	1	<Question question=[What is sometimes a problem with having a local pip2pi package repository and rsync'ing to it?] datetime_added=[2014-07-08 01:00:58.433961+00:00]>	1	
4	2014-07-07 18:05:13.526302-07	1	13	2	JavaScript	1	
5	2014-07-07 18:09:55.263242-07	1	10	2	<Answer answer=[When you click on the "Click Here" text, an alert box will pop up that says "Hello World!" \r\n\r\nhttp://jsfiddle.net/rbednark/uGuMR/] datetime_added=[2014-07-08 01:09:55.261371+00:00]>	1	
6	2014-07-07 18:10:02.578382-07	1	9	2	<Question question=[What does this code do?\r\n\r\n<script>\r\n  function clickHandler() {\r\n     alert("Hello, World!");\r\n  }\r\n</script>\r\n<span onclick="clickHandler();">Click Here</span>] datetime_added=[2	1	
7	2014-07-07 18:14:53.346035-07	1	13	3	CSS	1	
8	2014-07-07 18:15:24.298012-07	1	10	3	<Answer answer=[Remix and share web pages instantly.] datetime_added=[2014-07-08 01:15:24.293974+00:00]>	1	
9	2014-07-07 18:15:42.326342-07	1	9	3	<Question question=[What does the X-Ray Goggles website allow you to do?\r\nhttps://goggles.webmaker.org] datetime_added=[2014-07-08 01:15:42.314139+00:00]>	1	
10	2014-07-13 08:26:24.895808-07	1	9	3	<Question question=[What does the X-Ray Goggles website by Mozilla allow you to do?  \r\n[https://goggles.webmaker.org][1]\r\n\r\n\r\n  [1]: https://goggles.webmaker.org] datetime_added=[2014-07-08 01:15:42.3	2	Changed question.
11	2014-07-13 08:30:35.296628-07	1	10	1	<Answer answer=[If:\r\n\r\n1. a user does a "wr update-package-index" which gets all the recent versions of packages from PiPy\r\n2. the user does a release which does an rsync to president\r\n3. the release 	2	Changed answer.
12	2014-07-13 08:30:56.390106-07	1	10	2	<Answer answer=[When you click on the "Click Here" text, an alert box will pop up that says "Hello World!" \r\n\r\n[http://jsfiddle.net/rbednark/uGuMR/][1]\r\n\r\n\r\n  [1]: http://jsfiddle.net/rbednark/uGuMR/]	2	Changed answer.
13	2014-07-13 08:31:28.553125-07	1	9	2	<Question question=[What does this code do?\r\n\r\n    <script>\r\n      function clickHandler() {\r\n         alert("Hello, World!");\r\n      }\r\n    </script>\r\n    <span onclick="clickHandler();">Click Here</	2	Changed question.
14	2014-07-13 15:38:39.878311-07	1	13	4	Selenium	1	
15	2014-07-13 15:39:14.183678-07	1	9	4	<Question question=[Glance at this PDF that shows the ways in which you can select elements in Selenium.\r\n\r\n[https://www.simple-talk.com/dotnet/.net-framework/xpath,-css,-dom-and-selenium-the-rosetta-	1	
16	2014-07-13 15:40:47.798785-07	1	10	4	<Answer answer=[1.  Identifier\r\n1.  Id\r\n1.  Name\r\n1.  Link\r\n1.  DOM\r\n1.  XPath\r\n1.  CSS\r\n1.  UI-element] datetime_added=[2014-07-13 22:40:47.796514+00:00]>	1	
17	2014-07-13 15:40:57.811469-07	1	9	5	<Question question=[What are the 8 Selenium locators that can be used to select elements?] datetime_added=[2014-07-13 22:40:57.799444+00:00]>	1	
18	2014-07-14 08:23:04.292433-07	1	10	5	<Answer answer=[A unit of work is changes in state between Python objects and their related db rows.\r\n\r\n[SQLAlchemy] includes a system that transparently synchronizes all changes in state between obje	1	
19	2014-07-14 08:23:25.55499-07	1	13	5	SQLAlchemy	1	
20	2014-07-14 08:23:29.786671-07	1	9	6	<Question question=[What is a **unit of work** in SQLAlchemy?] datetime_added=[2014-07-14 15:23:29.775086+00:00]>	1	
21	2014-07-14 08:29:42.023775-07	1	10	6	<Answer answer=[ORM is constructed on the SQLAlchemy Expression Language.  ORM is high-level, related to Python objects.  The Expression Language is low-level, related to the schema.\r\n\r\n> The ORM is i	1	
22	2014-07-14 08:29:44.64711-07	1	9	7	<Question question=[In SQLAlchemy, what is the difference between the **ORM** and the **SQLAlchemy Expression Language**?] datetime_added=[2014-07-14 15:29:44.644649+00:00]>	1	
23	2014-07-14 10:57:14.524948-07	1	13	6	PostgreSQL	1	
24	2014-07-14 10:57:55.251918-07	1	10	7	<Answer answer=[    CREATE TYPE mood AS ENUM ('happy', 'joyful', 'ecstatic');\r\n    CREATE TABLE person (\r\n        name text,\r\n        current_mood mood\r\n    );\r\n    INSERT INTO person VALUES ('Rob', '	1	
25	2014-07-14 10:58:20.312466-07	1	9	8	<Question question=[In Postgres, how do you create a table with a column that is an enumerated type?] datetime_added=[2014-07-14 17:58:20.303263+00:00]>	1	
26	2014-07-14 11:01:39.804883-07	1	10	8	<Answer answer=[List user-defined data types:\r\n\r\n    psql> \\dT+\r\n\r\nList system data types as well:\r\n\r\n    psql> \\dTS+\r\n\r\n] datetime_added=[2014-07-14 18:01:39.803848+00:00]>	1	
27	2014-07-14 11:02:19.913745-07	1	9	9	<Question question=[In Postgres, how do you list the data types? (user-defined, system-defined, enums, ...)] datetime_added=[2014-07-14 18:02:19.909455+00:00]>	1	
28	2014-07-14 12:16:26.738625-07	1	10	9	<Answer answer=[0.8.2] datetime_added=[2014-07-14 19:16:26.734731+00:00]>	1	
29	2014-07-14 12:40:29.160893-07	1	9	10	<Question question=[What version of SQLAlchemy is Trapit using?] datetime_added=[2014-07-14 19:40:29.154814+00:00]>	1	
30	2014-07-14 13:46:01.759518-07	1	10	9	<Answer answer=[0.8.2\r\n\r\nNote that it is unpinned in mom.  0.8.2 is the only version on president.  I don't know why the "wr update-package-index" hasn't updated it on president.  The latest PyPI vers	2	Changed answer.
31	2014-07-14 18:11:58.38745-07	1	10	10	<Answer answer=[    from sqlalchemy import create_engine\r\n    from sqlalchemy.org import sessionmaker\r\n    \r\n    engine = create_engine('postgres://postgres:postgres@localhost/%s' % DB, echo=True)\r\n  	1	
32	2014-07-14 18:12:20.863044-07	1	9	11	<Question question=[What is the code to construct the interface to communicate with the ORM?] datetime_added=[2014-07-15 01:12:20.852488+00:00]>	1	
33	2014-07-14 18:13:26.044592-07	1	10	11	<Answer answer=[It creates a session instance that can then be used to communicate with the ORM (insert rows, query, ...).] datetime_added=[2014-07-15 01:13:26.043615+00:00]>	1	
34	2014-07-14 18:13:35.414829-07	1	9	12	<Question question=[What does this code do?\r\n\r\n    from sqlalchemy import create_engine\r\n    from sqlalchemy.org import sessionmaker\r\n    \r\n    engine = create_engine('postgres://postgres:postgres@loc	1	
35	2014-07-15 06:55:26.913938-07	1	10	12	<Answer answer=[    # dialect+driver://username:password@host:port/database\r\n    # engine = create_engine('{DATABASE_TYPE}://{USERNAME}:{PASSWORD}@{HOST}/{DB_NAME}')\r\n    engine = create_engine('postg	1	
36	2014-07-15 06:55:49.850806-07	1	9	13	<Question question=[What does the SQLAlchemy PostgreSQL connect string look like?  How many different components are there?] datetime_added=[2014-07-15 13:55:49.839318+00:00]>	1	
37	2014-07-15 06:57:42.156026-07	1	10	12	<Answer answer=[There are 7 components (some of the optional):\r\n\r\n1.  dialect\r\n1.  driver\r\n1.  username\r\n1.  password\r\n1.  host\r\n1.  port\r\n1.  database\r\n\r\n    # dialect+driver://username:password@host	2	Changed answer.
38	2014-07-15 06:59:58.327124-07	1	10	12	<Answer answer=[There are 7 components (some of the optional):\r\n\r\n1.  dialect\r\n1.  driver\r\n1.  username\r\n1.  password\r\n1.  host\r\n1.  port\r\n1.  database\r\n\r\n        # dialect+driver://username:password@	2	Changed answer.
39	2014-07-15 07:01:57.478014-07	1	13	7	bash	1	
40	2014-07-15 07:02:11.105425-07	1	13	8	sh	1	
41	2014-07-15 07:03:02.666211-07	1	10	13	<Answer answer=[Use `2>`, e.g.,\r\n\r\n     grep asdf asdf 2> /dev/null] datetime_added=[2014-07-15 14:03:02.665088+00:00]>	1	
42	2014-07-15 07:03:05.200219-07	1	9	14	<Question question=[How do you redirect only stderr to a file?] datetime_added=[2014-07-15 14:03:05.197272+00:00]>	1	
43	2014-07-15 07:21:12.487377-07	1	10	12	<Answer answer=[There are 7 components (some of the optional):\r\n\r\n1.  dialect\r\n1.  driver\r\n1.  username\r\n1.  password\r\n1.  host\r\n1.  port\r\n1.  database\r\n\r\n<!-- html needed here to separate above list 	2	Changed answer.
44	2014-07-15 07:23:11.385877-07	1	13	9	markdown	1	
45	2014-07-15 07:41:46.419039-07	1	10	14	<Answer answer=[Add an html element after the list, e.g.,\r\n\r\n    1. list item\r\n\r\n    <!-- html element -->\r\n\r\n         indented code\r\n\r\ne.g.,\r\n\r\n1. list item\r\n\r\n<!-- html element -->\r\n\r\n    code] date	1	
46	2014-07-15 07:41:51.178185-07	1	9	15	<Question question=[In Markdown, how do you add code after a list?] datetime_added=[2014-07-15 14:41:51.175530+00:00]>	1	
47	2014-07-15 08:16:52.867929-07	1	10	15	<Answer answer=[Use the `echo=True` argument to `check_engine()`, e.g.,\r\n\r\n    engine = create_engine('postgres://my_username:my_password@localhost/my_database', echo=True)] datetime_added=[2014-07-15	1	
48	2014-07-15 08:16:57.300826-07	1	9	16	<Question question=[In SQLAlchemy, how do you enable logging to show all the SQL commands?] datetime_added=[2014-07-15 15:16:57.293155+00:00]>	1	
49	2014-07-15 08:51:15.938175-07	1	10	16	<Answer answer=[    psql> \\d my_table\r\n\r\nor to show more information:\r\n\r\n    psql> \\d+ my_table\r\n\r\n] datetime_added=[2014-07-15 15:51:15.937199+00:00]>	1	
50	2014-07-15 08:51:17.865655-07	1	9	17	<Question question=[In psql, how do you show the data definition (columns, etc.) for a table?] datetime_added=[2014-07-15 15:51:17.859867+00:00]>	1	
51	2014-07-15 11:57:05.102758-07	1	13	10	sqlite3	1	
52	2014-07-15 12:02:37.833072-07	1	10	17	<Answer answer=[Summary:\r\n\r\nPer http://www.sqlite.org/datatype3.html :\r\n\r\n> 1.0 Storage Classes and Datatypes\r\n> \r\n> Each value stored in an SQLite database (or manipulated by the\r\n> database engine) 	1	
53	2014-07-15 12:02:50.224226-07	1	9	18	<Question question=[Review the sqlite data types:  http://www.sqlite.org/datatype3.html] datetime_added=[2014-07-15 19:02:50.214161+00:00]>	1	
54	2014-07-15 14:36:56.135727-07	1	13	11	python	1	
55	2014-07-15 14:37:01.640028-07	1	9	19	<Question question=[Review the Python wiki: https://wiki.python.org/moin/] datetime_added=[2014-07-15 21:37:01.625205+00:00]>	1	
56	2014-07-15 15:12:52.237949-07	1	13	12	unassimilated	1	
57	2014-07-15 15:15:16.207583-07	1	10	18	<Answer answer=[> Daniel Dennet on how to compose a successful critical commentary:\r\n> \r\n> 1. You should attempt to re-express your target’s position so clearly, vividly, and fairly that your target s	1	
58	2014-07-15 15:15:19.66943-07	1	9	20	<Question question=[Daniel Dennet on how to compose a successful critical commentary\r\n\r\n1. You should attempt to re-express your target’s position so clearly, vividly, and fairly that your target says	1	
59	2014-07-16 09:08:51.9765-07	1	10	19	<Answer answer=[In the browser in Storm or Vulcan:\r\n\r\n1. go into Developer Tools > Network\r\n1. make a request to do something with the document (e.g., rate, feature, publish, share, edit)\r\n1. Look at 	1	
60	2014-07-16 09:34:14.65708-07	1	9	21	<Question question=[How can you get the doc_id and trap_id for a document from the UI?] datetime_added=[2014-07-16 16:34:14.619876+00:00]>	1	
61	2014-07-16 14:40:01.083445-07	1	10	20	<Answer answer=[> Materialized views in PostgreSQL use the rule system like views do,\r\n> but persist the results in a table-like form. The main differences\r\n> between:\r\n> \r\n>     CREATE MATERIALIZED V	1	
62	2014-07-16 14:40:06.045839-07	1	9	22	<Question question=[What is a materialized view in Postgres?] datetime_added=[2014-07-16 21:40:06.035516+00:00]>	1	
63	2014-07-18 01:18:49.185726-07	1	13	13	SQL	1	
64	2014-07-18 01:23:25.38401-07	1	10	21	<Answer answer=[Summary:\r\n\r\n1. INNER JOIN - all students with lockers (returns 70 rows)\r\n1. LEFT OUTER JOIN - all students, and show locker if they have one (returns 100 rows)\r\n1. RIGHT OUTER JOIN - a	1	
65	2014-07-18 01:26:26.352478-07	1	9	23	<Question question=[Difference between LEFT/RIGHT/INNER/OUTER JOINS\r\n\r\nExample: Lets say you have a Students table (100 students, 70 of which have lockers), and a Lockers table (50 lockers, 40 with at	1	
66	2014-07-18 02:20:07.771733-07	1	10	22	<Answer answer=[    SELECT users.name, orgs.name\r\n      FROM users\r\n      LEFT JOIN orgs\r\n        ON orgs.id = users.org_id;] datetime_added=[2014-07-18 09:20:07.766997+00:00]>	1	
67	2014-07-18 02:20:13.149115-07	1	9	24	<Question question=[Suppose you have these tables:\r\n\r\n    users table:  name  org_id\r\n    orgs table:   name  id\r\n\r\nDo a query to select all users and show the name of their associated org.] datetime_	1	
68	2014-07-18 04:10:24.347534-07	1	13	14	git	1	
69	2014-07-18 04:12:23.110561-07	1	10	23	<Answer answer=[    $ git remote set-url origin git@github.com:rbednark/my_repo.git\r\n] datetime_added=[2014-07-18 11:12:23.104737+00:00]>	1	
70	2014-07-18 04:30:34.228536-07	1	9	25	<Question question=[How do you change a git repository to use ssh instead of https for it's authentication with origin?] datetime_added=[2014-07-18 11:30:34.211807+00:00]>	1	
71	2014-07-18 05:05:14.95343-07	1	10	24	<Answer answer=[    from datetime import datetime\r\n    ...\r\n    Column(’last_modified’, DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)] datetime_added=[2014-07-18 12:05:14.946462+00:00]>	1	
72	2014-07-18 05:05:19.578142-07	1	9	26	<Question question=[In SQLAlchemy, how do you create a "last_modified" column that automatically gets updated when a record is updated?] datetime_added=[2014-07-18 12:05:19.564125+00:00]>	1	
73	2014-07-18 07:55:02.889635-07	1	13	15	nosetests	1	
74	2014-07-18 07:55:23.715775-07	1	10	25	<Answer answer=[    nosetests --nologcapture] datetime_added=[2014-07-18 14:55:23.710197+00:00]>	1	
75	2014-07-18 07:55:26.252862-07	1	9	27	<Question question=[How do you tell nosetests to show logging output, even if the test passes?] datetime_added=[2014-07-18 14:55:26.239846+00:00]>	1	
76	2014-07-18 07:58:58.367347-07	1	10	25	<Answer answer=[    nosetests --debug=DEBUG --nocapture --nologcapture] datetime_added=[2014-07-18 14:55:23.710197+00:00]>	2	Changed answer.
77	2014-07-21 22:16:29.738319-07	1	10	26	<Answer answer=[**cascading**\r\n\r\n    >>> jack = User(name='jack', fullname='Jack Bean', password='gjffdd')\r\n    >>> jack.addresses\r\n    []\r\n\r\nWe are free to add Address objects on our User object. In 	1	
78	2014-07-21 22:16:32.965771-07	1	9	28	<Question question=[In SQLAlchemy, what is the term for describing the process of creating an instance of an object, adding some relations to it, and those relations automatically added to the session	1	
79	2014-07-22 15:30:22.100721-07	1	10	27	<Answer answer=[Declarative uses simply specify the class, whereas Declarative specifies a class and maps it to a Table object.] datetime_added=[2014-07-22 22:30:22.095061+00:00]>	1	
80	2014-07-22 15:30:26.790162-07	1	9	29	<Question question=[In SQLAlchemy, what is the difference between a classical mapping and the declarative system?] datetime_added=[2014-07-22 22:30:26.754095+00:00]>	1	
81	2014-07-22 17:25:05.864793-07	1	10	28	<Answer answer=[> The SQLAlchemy Expression Language presents a system of representing\r\n> relational database structures and expressions using Python\r\n> constructs. These constructs are modeled to res	1	
82	2014-07-22 17:25:09.897379-07	1	9	30	<Question question=[In SQLAlchemy, what is the difference between the SQL Expression Language and the ORM?] datetime_added=[2014-07-23 00:25:09.883728+00:00]>	1	
83	2014-07-22 20:58:12.455302-07	1	10	29	<Answer answer=[    def load_engine(env):\r\n        engine = create_engine(connect_string, echo=True)\r\n                                                    ^^^^] datetime_added=[2014-07-23 03:58:12.4487	1	
84	2014-07-22 20:58:17.754815-07	1	9	31	<Question question=[In the Trapit code, how do you enable SQLAlchemy to show all SQL statements?] datetime_added=[2014-07-23 03:58:17.741962+00:00]>	1	
85	2014-07-24 07:58:42.451855-07	1	13	16	Unix	1	
86	2014-07-24 08:01:03.085957-07	1	10	30	<Answer answer=[    less --no-init\r\n\r\n-or-\r\n\r\n    less -X\r\n\r\n] datetime_added=[2014-07-24 15:01:03.077668+00:00]>	1	
87	2014-07-24 08:01:05.372082-07	1	9	32	<Question question=[In Unix, how do you tell **less** to exit without clearing the screen of the contents of **less**?] datetime_added=[2014-07-24 15:01:05.334973+00:00]>	1	
88	2014-07-30 13:56:15.48163-07	1	10	31	<Answer answer=[> MySQL uses ' or " to quote values (i.e. WHERE name = "John"). This is\r\n> not the ANSI standard for databases. PostgreSQL uses only single\r\n> quotes for this (i.e. WHERE name = 'John'	1	
89	2014-07-30 13:56:30.348931-07	1	9	33	<Question question=[In Postgres, what is the difference between single quotes and double quotes?] datetime_added=[2014-07-30 20:56:30.338499+00:00]>	1	
90	2014-07-30 13:57:48.568568-07	1	10	31	<Answer answer=[single quotes => values (e.g., `WHERE name = "John"`)  \r\ndouble quotes => system identifiers (field names, table names, ...)\r\n\r\n> MySQL uses ' or " to quote values (i.e. WHERE name = "	2	Changed answer.
91	2014-07-30 14:02:13.165855-07	1	10	31	<Answer answer=[double quotes => values (e.g., `WHERE name = "John"`)  \r\nsingle quotes => system identifiers (field names, table names, ...) (e.g., `WHERE 'first name' = "John"`)\r\n\r\n> MySQL uses ' or 	2	Changed answer.
92	2014-07-31 08:13:23.267105-07	1	13	17	Abraham	1	
93	2014-07-31 08:14:13.354557-07	1	9	34	<Question question=[Whenever you are feeling less than good, if you will stop and say, Nothing is more important than that I feel good—I want to find a reason now to feel good, you will find an improv	1	
94	2014-07-31 11:35:10.733978-07	1	13	18	codependence	1	
95	2014-07-31 11:43:26.706221-07	1	10	32	<Answer answer=["I feel... when you... because..." communication\r\n\r\nI feel \\_\\_\\_ when you \\_\\_\\_ because \\_\\_\\_.  \r\nI want \\_\\_\\_.\r\n\r\nhttp://en.wikipedia.org/wiki/I-message  \r\nhttp://www.thirteen.org	1	
96	2014-07-31 11:43:42.109507-07	1	9	35	<Question question=[What is a non-codependent way of expressing an emotion?] datetime_added=[2014-07-31 18:43:42.073859+00:00]>	1	
97	2014-07-31 11:44:13.719098-07	1	13	19	psychology	1	
98	2014-07-31 11:49:22.909075-07	1	10	33	<Answer answer=[**fixed** mindset -- encounters are test of worthiness; success based on innate ability; goal is to look smart and never dumb; dread failure  \r\n**growth** mindset -- encounters are opp	1	
99	2014-07-31 11:51:32.942347-07	1	9	36	<Question question=[What are the two mindsets that Carol Dweck has identified?] datetime_added=[2014-07-31 18:51:32.939704+00:00]>	1	
100	2014-08-01 07:50:29.105696-07	1	13	20	SW Portland	1	
101	2014-08-01 07:50:58.0865-07	1	10	34	<Answer answer=[122 acres\r\n\r\nhttp://bond.pcc.edu/campus/sylvania-campus/] datetime_added=[2014-08-01 14:50:58.079505+00:00]>	1	
102	2014-08-01 07:51:00.609376-07	1	9	37	<Question question=[How large is PCC Sylvania (in acres)?] datetime_added=[2014-08-01 14:51:00.572290+00:00]>	1	
103	2014-08-01 09:20:31.63762-07	1	10	35	<Answer answer=[    SHOW ALL;\r\n    ...\r\n    log_min_duration_statement      | 1s                                                       | Sets the minimum execution time above which statements will be 	1	
104	2014-08-01 09:20:33.624248-07	1	9	38	<Question question=[What setting is causing SQL statements to be logged in Higgs for Trapit?] datetime_added=[2014-08-01 16:20:33.611972+00:00]>	1	
105	2014-08-01 15:07:48.104114-07	1	10	36	<Answer answer=[1. CREATE USER myuser;\r\n2. ALTER USER myuser WITH password 'mypassword';\r\n3. echo 'localhost:5432:mydbname:myuser:mypassword' >> ~/.pgpass\r\n4. chmod go-rwx ~/.pgpass\r\n5. psql -h localh	1	
106	2014-08-01 15:08:02.41305-07	1	9	39	<Question question=[In Postgresql, what is the difference between peer authentication and password authentication?  What do you do to be able to login with psql as a different user?] datetime_added=[2	1	
107	2014-08-01 15:18:00.61862-07	1	10	36	<Answer answer=[    1. CREATE USER myuser;\r\n    2. ALTER USER myuser WITH password 'mypassword';\r\n    3. echo 'localhost:5432:mydbname:myuser:mypassword' >> ~/.pgpass  # only needed if you don't want 	2	Changed answer.
108	2014-08-01 16:07:20.425607-07	1	10	37	<Answer answer=[    MetaData().create_all()\r\n    MetaData().drop_all()] datetime_added=[2014-08-01 23:07:20.424626+00:00]>	1	
109	2014-08-01 16:07:23.368831-07	1	9	40	<Question question=[What are the sqlalchemy methods for creating and dropping all tables that are described in all the models?] datetime_added=[2014-08-01 23:07:23.360686+00:00]>	1	
110	2014-08-04 10:13:52.981443-07	1	10	38	<Answer answer=[postgresql.conf:\r\n\r\n    statement_timeout = 1000 # in milliseconds] datetime_added=[2014-08-04 17:13:52.971369+00:00]>	1	
111	2014-08-04 10:13:56.315397-07	1	9	41	<Question question=[How do you configure PostgreSQL to terminate statements that take longer than n milliseconds?] datetime_added=[2014-08-04 17:13:56.305084+00:00]>	1	
112	2014-08-04 13:58:14.969556-07	1	10	39	<Answer answer=[for the `create_engine()` call, set:\r\n\r\n    echo="debug"\r\n\r\nhttp://docs.sqlalchemy.org/en/rel_0_9/core/engines.html] datetime_added=[2014-08-04 20:58:14.965510+00:00]>	1	
113	2014-08-04 13:58:22.760629-07	1	9	42	<Question question=[How do you tell SQLAlchemy to show all the rows returned in the log?] datetime_added=[2014-08-04 20:58:22.748532+00:00]>	1	
114	2014-08-04 14:12:25.677835-07	1	10	40	<Answer answer=[> Temporary tables in other sessions are invisible by design. It makes\r\n> no difference if two sessions have the same user.\r\n\r\nhttp://dba.stackexchange.com/questions/5236/is-there-a-wa	1	
115	2014-08-04 14:20:48.504615-07	1	9	43	<Question question=[What is the visibility of TEMP tables in Postgres?] datetime_added=[2014-08-04 21:20:48.491125+00:00]>	1	
191	2014-08-29 17:33:38.813625-07	1	10	65	<Answer answer=[    tests.__init__.ElzarTestCase.get_api()] datetime_added=[2014-08-30 00:33:38.805616+00:00]>	1	
116	2014-08-04 14:21:17.230543-07	1	10	40	<Answer answer=[TEMP tables are only visible to the session that created them.\r\n\r\n> Temporary tables in other sessions are invisible by design. It makes\r\n> no difference if two sessions have the same 	2	Changed answer.
117	2014-08-04 15:33:41.680032-07	1	10	41	<Answer answer=[psql> \\pset expanded\r\n\r\n> expanded (or x) If value is specified it must be either on or off\r\n> which will enable or disable expanded mode. If value is omitted the\r\n> command toggles be	1	
118	2014-08-04 15:33:48.561045-07	1	9	44	<Question question=[How do I tell psql to output rows in vertical format instead of horizontal format?] datetime_added=[2014-08-04 22:33:48.553200+00:00]>	1	
119	2014-08-05 11:00:27.920764-07	1	10	42	<Answer answer=[DELETE * FROM my_table;] datetime_added=[2014-08-05 18:00:27.903413+00:00]>	1	
120	2014-08-05 11:00:29.693518-07	1	9	45	<Question question=[How to delete all rows from a table in SQL?] datetime_added=[2014-08-05 18:00:29.682240+00:00]>	1	
121	2014-08-05 11:02:40.074742-07	1	10	43	<Answer answer=[Use the `RETURNING` clause, e.g.,\r\n\r\n    DELETE FROM my_table RETURNING *;] datetime_added=[2014-08-05 18:02:40.073793+00:00]>	1	
122	2014-08-05 11:02:43.677301-07	1	9	46	<Question question=[How do you show the rows that were deleted in SQL when doing a DELETE?] datetime_added=[2014-08-05 18:02:43.674624+00:00]>	1	
123	2014-08-05 11:29:33.294896-07	1	10	44	<Answer answer=[    psql> \\x auto\r\n\r\nCan also set this in the `.psqlrc` file, though I haven't got it to work for me yet:\r\n\r\n    \\x auto] datetime_added=[2014-08-05 18:29:33.288974+00:00]>	1	
124	2014-08-05 12:06:05.546987-07	1	9	47	<Question question=[In `psql`, how do you tell it to format the output horizontally if there is enough room, and if not, format it vertically?] datetime_added=[2014-08-05 19:06:05.533109+00:00]>	1	
125	2014-08-06 14:32:01.846876-07	1	10	45	<Answer answer=[    psql postgres://my_username:my_password@db_host/db_name] datetime_added=[2014-08-06 21:32:01.835866+00:00]>	1	
126	2014-08-06 14:32:04.811337-07	1	9	48	<Question question=[How to connect with psql to a database using a connection string?] datetime_added=[2014-08-06 21:32:04.774896+00:00]>	1	
127	2014-08-07 10:09:16.487264-07	1	10	46	<Answer answer=[> OAuth provides client applications a 'secure delegated access' to\r\n> server resources on behalf of a resource owner. It specifies a process\r\n> for resource owners to authorize third-	1	
128	2014-08-07 10:09:18.992101-07	1	9	49	<Question question=[What is OAuth?] datetime_added=[2014-08-07 17:09:18.987071+00:00]>	1	
129	2014-08-07 10:18:04.834285-07	1	10	47	<Answer answer=[> In computer systems, an access token contains the security credentials\r\n> for a login session and identifies the user, the user's groups, the\r\n> user's privileges, and, in some cases	1	
130	2014-08-07 10:18:06.535878-07	1	9	50	<Question question=[What is an access token?] datetime_added=[2014-08-07 17:18:06.531259+00:00]>	1	
131	2014-08-11 17:20:31.605993-07	1	10	39	<Answer answer=[for the `create_engine()` call, set:\r\n\r\n    echo="debug"\r\n\r\ne.g.,\r\n\r\n     engine = create_engine(connect_string, echo='debug')\r\n\r\n\r\n\r\nAlternatively:\r\n\r\n    # sqlalchemy.engine - contro	2	Changed answer.
132	2014-08-12 08:56:22.518143-07	1	10	48	<Answer answer=[Use the `rowcount` attribute of the ResultProxy that is returned, e.g.,\r\n\r\n    result_proxy = session.execute('select * from my_table')\r\n    print "Number of rows selected = [%s]" % re	1	
133	2014-08-12 08:56:24.4248-07	1	9	51	<Question question=[In SQLAlchemy, when doing an execute(), how do you show how many rows were affected by the select/insert/update/delete?] datetime_added=[2014-08-12 15:56:24.415376+00:00]>	1	
134	2014-08-12 17:26:55.900102-07	1	10	49	<Answer answer=[    CREATE DATABASE newdb WITH TEMPLATE originaldb OWNER dbuser;\r\n\r\nThis copies all schema and all data.\r\n\r\n(note that the db should not be in use by any users or you may get an error)	1	
135	2014-08-12 17:27:02.060246-07	1	9	52	<Question question=[In Postgres, how do you make a copy of a database?] datetime_added=[2014-08-13 00:27:02.049463+00:00]>	1	
136	2014-08-12 21:13:26.33695-07	1	10	50	<Answer answer=[`GNU Readline Library` is used for editing.  To set to vi:\r\n\r\n    set editing-mode vi\r\n\r\n\r\nhttp://www.postgresql.org/docs/9.2/static/app-psql.html\r\nhttp://cnswww.cns.cwru.edu/php/chet/	1	
137	2014-08-12 21:13:28.404093-07	1	9	53	<Question question=[In Postgres's `psql`, what is used for editing the commands and how do you change it to vi mode?] datetime_added=[2014-08-13 04:13:28.392846+00:00]>	1	
138	2014-08-12 23:14:21.983698-07	1	10	51	<Answer answer=[    -- double dashes for a single line comment\r\n    \r\n    /*\r\n      for a multiline comment,\r\n      use the slash and asterisk\r\n    */] datetime_added=[2014-08-13 06:14:21.974396+00:00	1	
139	2014-08-12 23:14:25.156428-07	1	9	54	<Question question=[In Postgresql SQL, what is the syntax for comments?] datetime_added=[2014-08-13 06:14:25.144007+00:00]>	1	
140	2014-08-13 14:48:06.41138-07	1	10	52	<Answer answer=[    SELECT feed_url,count(feed_url) FROM feeds GROUP BY feed_url HAVING count(feed_url) > 1;] datetime_added=[2014-08-13 21:48:06.372528+00:00]>	1	
141	2014-08-13 14:48:07.771235-07	1	9	55	<Question question=[How to select all values for column1 that have 2 or more rows?] datetime_added=[2014-08-13 21:48:07.735149+00:00]>	1	
142	2014-08-17 09:28:17.771117-07	1	9	19	<Question question=[Review the Python wiki: [https://wiki.python.org/moin/][1]\r\n\r\n\r\n  [1]: https://wiki.python.org/moin/] datetime_added=[2014-07-15 21:37:01.625205+00:00]>	2	Changed question.
143	2014-08-17 09:32:34.694598-07	1	9	56	<Question question=[Review this page: [http://pythonhackers.com/open-source/][1] (the top 400 Python projects on GitHub)\r\n\r\n\r\n  [1]: http://pythonhackers.com/open-source/] datetime_added=[2014-08-17 1	1	
144	2014-08-17 09:33:25.600133-07	1	9	57	<Question question=[Review this page: [http://pypi-ranking.info/alltime][1]\r\n\r\n\r\n  [1]: http://pypi-ranking.info/alltime] datetime_added=[2014-08-17 16:33:25.588246+00:00]>	1	
145	2014-08-19 08:04:50.473122-07	1	10	53	<Answer answer=[Paraphrase:  there must only be one possible value to return for an ungrouped column (e.g., a primary key of the table containing the ungrouped column).\r\n\r\n> Aggregate functions, if an	1	
146	2014-08-19 08:04:55.331808-07	1	9	58	<Question question=[When are columns allowed / not allowed in a select for a `GROUP BY` in Postgres?] datetime_added=[2014-08-19 15:04:55.295133+00:00]>	1	
147	2014-08-19 08:09:12.346516-07	1	10	54	<Answer answer=[It means to group by the first column regardless of what it's called. You can do the same with ORDER BY.\r\n\r\ne.g., \r\n\r\n    SELECT id FROM orgs GROUP BY 1;\r\n\r\n[http://stackoverflow.com/q	1	
148	2014-08-19 08:09:18.952411-07	1	9	59	<Question question=[What does `GROUP BY 1` mean?] datetime_added=[2014-08-19 15:09:18.942672+00:00]>	1	
149	2014-08-19 08:23:33.628563-07	1	13	21	vocabulary	1	
150	2014-08-19 08:26:43.331152-07	1	10	55	<Answer answer=[combine\r\n\r\nag·gre·gate  \r\nnoun  \r\nˈagrigit/  \r\n\r\n1. a whole formed by combining several (typically disparate) elements.\r\n"the council was an aggregate of three regional assemblies"\r\n2.	1	
151	2014-08-19 08:26:48.80443-07	1	9	60	<Question question=[What is a synonym for the verb `aggregate`?] datetime_added=[2014-08-19 15:26:48.793084+00:00]>	1	
152	2014-08-19 10:42:36.678429-07	1	10	56	<Answer answer=[    CREATE TEMP TABLE tmp_rob_feeds AS SELECT * FROM feeds WHERE feed_url ILIKE '%beautyandwell%';] datetime_added=[2014-08-19 17:42:36.661888+00:00]>	1	
153	2014-08-19 10:42:38.463232-07	1	9	61	<Question question=[In Postgres, how do you create a temporary table from the results of a query?] datetime_added=[2014-08-19 17:42:38.450132+00:00]>	1	
154	2014-08-19 10:49:04.262616-07	1	10	57	<Answer answer=[    ALTER TABLE my_table DROP COLUMN my_column;] datetime_added=[2014-08-19 17:49:04.261565+00:00]>	1	
155	2014-08-19 10:49:07.076492-07	1	9	62	<Question question=[How do you remove a column from a table?] datetime_added=[2014-08-19 17:49:07.073290+00:00]>	1	
156	2014-08-19 11:31:51.694604-07	1	13	22	vim	1	
157	2014-08-19 11:34:48.942062-07	1	10	58	<Answer answer=[gUw\r\n\r\nFrom ":help gU":\r\n\r\n> gU{motion}        => make Nmove text uppercase] datetime_added=[2014-08-19 18:34:48.937928+00:00]>	1	
158	2014-08-19 11:34:50.544005-07	1	9	63	<Question question=[How do you capitalize an entire word?] datetime_added=[2014-08-19 18:34:50.535325+00:00]>	1	
159	2014-08-19 12:07:21.899828-07	1	13	23	zoidberg	1	
160	2014-08-19 12:09:14.604797-07	1	10	59	<Answer answer=[Note that zoidberg uses `feedparser` which is a PyPI package, and `bozo` is a flag that is set on the output from feedparser.\r\n\r\n> Universal Feed Parser can parse feeds whether they ar	1	
161	2014-08-19 12:11:58.475188-07	1	9	64	<Question question=[What is `bozo` in Zoidberg?] datetime_added=[2014-08-19 19:11:58.463007+00:00]>	1	
162	2014-08-19 12:34:05.853466-07	1	10	60	<Answer answer=[It shows the last 10 polls for the feed, where there are 3 fields for each poll:\r\n  \r\n\r\n    status, bozo, datetime.utcnow()\r\n\r\n(bozo is 1 if a non-well-formed feed, 0 otherwise)\r\n] dat	1	
163	2014-08-19 12:34:11.357989-07	1	9	65	<Question question=[What is the `poll_stats` field for a feed?] datetime_added=[2014-08-19 19:34:11.345991+00:00]>	1	
164	2014-08-20 11:59:03.152682-07	1	10	61	<Answer answer=[    \\pset null '_NULL_'\r\n\r\n(can add this to `.psqlrc` file)] datetime_added=[2014-08-20 18:59:03.133482+00:00]>	1	
165	2014-08-20 11:59:06.633454-07	1	9	66	<Question question=[How to display NULL values in psql with something other than just space?] datetime_added=[2014-08-20 18:59:06.621493+00:00]>	1	
166	2014-08-23 15:02:34.787646-07	1	10	62	<Answer answer=[    nosetests --logging-filter=none\r\n\r\n(give it a name of a non-existent logger)\r\n\r\n>  --logging-filter=FILTER\r\n>               Specify  which  statements  to filter in/out. By default	1	
167	2014-08-23 15:02:38.354965-07	1	9	67	<Question question=[How do you disable all logging with nosetests?] datetime_added=[2014-08-23 22:02:38.316053+00:00]>	1	
168	2014-08-23 15:14:36.527334-07	1	10	62	<Answer answer=[    nosetests --logging-filter=none\r\n\r\n(give it a name of a non-existent logger)\r\n\r\n>  --logging-filter=FILTER\r\n>               Specify  which  statements  to filter in/out. By default	2	No fields changed.
169	2014-08-23 15:20:13.242195-07	1	10	63	<Answer answer=[Use an exclamation point, e.g.,\r\n\r\n    pdb> !c = 3] datetime_added=[2014-08-23 22:20:13.237037+00:00]>	1	
170	2014-08-23 15:20:14.785172-07	1	9	68	<Question question=[In pdb, how do you tell it to execute the inputted code where the code conflicts with a pdb command (e.g., `c = 3` (`c` conflicts with the `c` pdb command for `continue`)] datetime	1	
171	2014-08-25 15:14:01.737328-07	1	10	28	<Answer answer=[> The SQLAlchemy Expression Language presents a system of representing\r\n> relational database structures and expressions using Python\r\n> constructs. These constructs are modeled to res	2	Changed answer.
172	2014-08-25 15:20:15.511389-07	1	10	32	<Answer answer=["I feel... when you... because..." communication\r\n\r\nI feel \\_\\_\\_ when you \\_\\_\\_ because \\_\\_\\_.  \r\nI want \\_\\_\\_.\r\n\r\n[http://en.wikipedia.org/wiki/I-message][1]  \r\n[http://www.thirte	2	Changed answer.
173	2014-08-25 15:32:16.378135-07	1	13	24	code katas	1	
174	2014-08-25 15:33:04.766745-07	1	9	69	<Question question=[Review this page of  simple programming projects / code katas and solutions:\r\n\r\n[https://github.com/karan/Projects][1]\r\n\r\n\r\n  [1]: https://github.com/karan/Projects] datetime_added	1	
175	2014-08-25 15:35:24.470567-07	1	9	70	<Question question=[Review this page, which is a list of Python frameworks, libraries, and software: [https://github.com/vinta/awesome-python][1]\r\n\r\n\r\n  [1]: https://github.com/vinta/awesome-python] d	1	
176	2014-08-25 15:37:09.553986-07	1	9	71	<Question question=[Review this page: [http://docs.python-guide.org/en/latest/][1]\r\n\r\n\r\n  [1]: http://docs.python-guide.org/en/latest/] datetime_added=[2014-08-25 22:37:09.532395+00:00]>	1	
177	2014-08-25 15:40:26.995344-07	1	9	72	<Question question=[Review this page of Python patterns: [https://github.com/faif/python-patterns][1]\r\n\r\n\r\n  [1]: https://github.com/faif/python-patterns] datetime_added=[2014-08-25 22:40:26.991721+00	1	
178	2014-08-26 12:28:09.740861-07	1	9	73	<Question question=[What would you lose if _____?\r\n\r\ne.g., “What would you lose if the cancer was healed?” She finally replied:\r\n“I would be lonely again”.\r\n\r\nSecondary gain may be defined as ‘a hidde	1	
179	2014-08-26 12:28:26.31003-07	1	9	73	<Question question=[What would you lose if _____?\r\n\r\ne.g., “What would you lose if the cancer was healed?” She finally replied:\r\n“I would be lonely again”.\r\n\r\nSecondary gain may be defined as ‘a hidde	2	Changed question.
180	2014-08-26 12:37:12.320856-07	1	13	25	programming	1	
181	2014-08-26 12:37:14.978072-07	1	9	74	<Question question=[Visit this site: [http://www.quora.com/What-are-the-top-10-websites-computer-science-students-must-visit][1]\r\n\r\n\r\n  [1]: http://www.quora.com/What-are-the-top-10-websites-computer-	1	
182	2014-08-26 12:42:06.774278-07	1	13	26	learning	1	
183	2014-08-26 12:42:12.075487-07	1	9	75	<Question question=[Visit: http://www.tutorialspoint.com/] datetime_added=[2014-08-26 19:42:12.062369+00:00]>	1	
184	2014-08-26 12:44:01.579771-07	1	9	76	<Question question=[Visit this site: [http://noexcuselist.com/][1]\r\n\r\n\r\n  [1]: http://noexcuselist.com/] datetime_added=[2014-08-26 19:44:01.571733+00:00]>	1	
185	2014-08-26 12:46:45.178154-07	1	9	77	<Question question=[Visit: [http://www.spoj.com/][1]\r\n\r\n\r\n  [1]: http://www.spoj.com/] datetime_added=[2014-08-26 19:46:45.165758+00:00]>	1	
186	2014-08-26 12:49:21.204634-07	1	13	27	web development	1	
187	2014-08-26 12:49:27.454462-07	1	9	78	<Question question=[Visit: [http://www.quora.com/What-are-5-essential-skills-any-Web-Developer-should-have][1]\r\n\r\n\r\n  [1]: http://www.quora.com/What-are-5-essential-skills-any-Web-Developer-should-hav	1	
188	2014-08-29 15:00:59.998033-07	1	10	64	<Answer answer=[    nosetests --failed] datetime_added=[2014-08-29 22:00:59.987822+00:00]>	1	
189	2014-08-29 15:01:04.252606-07	1	9	79	<Question question=[How do you tell nosetests to run all the tests that failed in the last test run?] datetime_added=[2014-08-29 22:01:04.241332+00:00]>	1	
190	2014-08-29 17:28:27.160997-07	1	9	80	<Question question=[For the Elzar behavioral tests, where is the `self.get_api()` method defined?] datetime_added=[2014-08-30 00:28:27.138865+00:00]>	1	
192	2014-08-29 17:33:42.275489-07	1	9	80	<Question question=[For the Elzar behavioral tests, where is the `self.get_api()` method defined?] datetime_added=[2014-08-30 00:28:27.138865+00:00]>	2	Changed answer.
193	2014-08-29 17:47:28.053095-07	1	10	66	<Answer answer=[    elzar.client.APIClient.users()] datetime_added=[2014-08-30 00:47:28.046669+00:00]>	1	
194	2014-08-29 17:47:31.56572-07	1	9	81	<Question question=[In the following Elzar test code, where is `api.users()` defined?\r\n\r\n    def test_walk(self):\r\n        org = self.standard_org(1)\r\n        api = self.get_api(org.testusers['admin1'	1	
195	2014-08-29 18:11:59.640448-07	1	10	56	<Answer answer=[    CREATE TEMP TABLE tmp_rob_feeds \r\n        AS SELECT * FROM feeds WHERE feed_url ILIKE '%beautyandwell%';] datetime_added=[2014-08-19 17:42:36.661888+00:00]>	2	Changed answer.
196	2014-08-29 18:36:58.035047-07	1	10	67	<Answer answer=[It selects all distinct names.  If there are multiple rows with a given name, only one instance of that name will be returned.] datetime_added=[2014-08-30 01:36:58.029804+00:00]>	1	
197	2014-08-29 18:37:01.140453-07	1	9	82	<Question question=[What does the following query do:\r\n    SELECT DISTINCT name FROM my_table;] datetime_added=[2014-08-30 01:37:01.126626+00:00]>	1	
198	2014-08-29 18:42:56.917129-07	1	10	68	<Answer answer=[    SELECT DISTINCT name, COUNT(name)\r\n        FROM my_table\r\n        GROUP BY name\r\n        ORDER BY count DESC;] datetime_added=[2014-08-30 01:42:56.910570+00:00]>	1	
199	2014-08-29 18:42:59.615718-07	1	9	83	<Question question=[Create a query to find the number of rows for each "name".] datetime_added=[2014-08-30 01:42:59.602250+00:00]>	1	
200	2014-08-31 19:56:22.823462-07	1	13	28	software applications	1	
201	2014-08-31 19:57:10.3516-07	1	10	69	<Answer answer=[1. RollerCoaster Tycoon\r\n1. developed by Chris Sawyer\r\n1. released in 1999] datetime_added=[2014-09-01 02:57:10.346901+00:00]>	1	
202	2014-08-31 19:57:15.752089-07	1	9	84	<Question question=[Which popular video game was written by a single developer in assembly?\r\n\r\n1. name of the game?\r\n1. name of the developer?\r\n1. year released?] datetime_added=[2014-09-01 02:57:15.7	1	
203	2014-08-31 19:57:32.075259-07	1	13	28	software apps	2	Changed name.
204	2014-09-02 10:34:39.33722-07	1	13	29	elzar	1	
205	2014-09-02 10:35:50.653757-07	1	10	70	<Answer answer=[`selector` is the package written and open-sourced by Luke which does WSGI request delegation / routing.\r\n\r\n[https://github.com/lukearno/selector][1]\r\n\r\n\r\n  [1]: https://github.com/luk	1	
206	2014-09-02 10:46:02.042441-07	1	9	85	<Question question=[What is `selector` in Elzar?] datetime_added=[2014-09-02 17:46:02.031045+00:00]>	1	
207	2014-09-02 11:47:12.470363-07	1	13	30	val	1	
208	2014-09-02 11:54:39.614905-07	1	10	71	<Answer answer=[It allows you to add 0 or more optional fields that can be anything.  This means that only the fields that you specify will be validated, and other fields will just be ignored.\r\n\r\n    	1	
209	2014-09-02 11:54:44.093128-07	1	9	86	<Question question=[In `val`, what is the effect of adding `object : object` into a schema?  \r\ne.g.,\r\n\r\n    from val import Schema\r\n    \r\n    schema = Schema({'foo' : str, object : object})] datetime_	1	
\.


--
-- Name: django_admin_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quizme
--

SELECT pg_catalog.setval('django_admin_log_id_seq', 209, true);


--
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: quizme
--

COPY django_content_type (id, name, app_label, model) FROM stdin;
1	permission	auth	permission
2	group	auth	group
3	content type	contenttypes	contenttype
4	session	sessions	session
5	site	sites	site
6	log entry	admin	logentry
7	migration history	south	migrationhistory
8	user	emailusername	user
9	question	questions	question
10	answer	questions	answer
11	attempt	questions	attempt
12	hint	questions	hint
13	tag	questions	tag
14	quiz	questions	quiz
15	question tag	questions	questiontag
16	user tag	questions	usertag
\.


--
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quizme
--

SELECT pg_catalog.setval('django_content_type_id_seq', 16, true);


--
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: quizme
--

COPY django_session (session_key, session_data, expire_date) FROM stdin;
fij2jpcp8px9bph8uhlldgae92gupmut	NmZmMDUxYzU1NTc1MzRkZTc4NzljZTlhOWNjOGVlNGNkMDEwNjcyNjp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6MX0=	2014-07-20 14:02:57.445648-07
lx8ofc25thahtfbcg1iuvgmvo8y1z5gx	NmZmMDUxYzU1NTc1MzRkZTc4NzljZTlhOWNjOGVlNGNkMDEwNjcyNjp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6MX0=	2014-07-26 19:42:38.757099-07
tmmp54p0vpd4udzklcc8ld9q735dhzlq	NmZmMDUxYzU1NTc1MzRkZTc4NzljZTlhOWNjOGVlNGNkMDEwNjcyNjp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6MX0=	2014-07-27 08:25:07.894807-07
aseoihqcg5setzflt53b2mzzuazbij0y	NmZmMDUxYzU1NTc1MzRkZTc4NzljZTlhOWNjOGVlNGNkMDEwNjcyNjp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6MX0=	2014-08-15 15:18:00.709275-07
89udxu59dvhfnqmhj63qqkdnxtwy41pt	NmZmMDUxYzU1NTc1MzRkZTc4NzljZTlhOWNjOGVlNGNkMDEwNjcyNjp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6MX0=	2014-09-08 15:14:01.891947-07
\.


--
-- Data for Name: django_site; Type: TABLE DATA; Schema: public; Owner: quizme
--

COPY django_site (id, domain, name) FROM stdin;
1	example.com	example.com
\.


--
-- Name: django_site_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quizme
--

SELECT pg_catalog.setval('django_site_id_seq', 1, true);


--
-- Data for Name: emailusername_user; Type: TABLE DATA; Schema: public; Owner: quizme
--

COPY emailusername_user (id, password, last_login, email, is_active, is_admin) FROM stdin;
1	pbkdf2_sha256$12000$ioz0mlkEw9SJ$EQpLDIrld0z/j9fBeCCznU/EPl3xkiktLHdPIEVtJjg=	2014-08-17 09:11:51.725154-07	rbednark@gmail.com	t	t
\.


--
-- Name: emailusername_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quizme
--

SELECT pg_catalog.setval('emailusername_user_id_seq', 1, true);


--
-- Data for Name: questions_answer; Type: TABLE DATA; Schema: public; Owner: quizme
--

COPY questions_answer (id, datetime_added, datetime_updated, user_id, answer) FROM stdin;
3	2014-07-07 18:15:24.293974-07	2014-07-07 18:15:24.294005-07	1	Remix and share web pages instantly.
1	2014-07-07 18:00:53.31371-07	2014-07-13 08:30:35.295363-07	1	If:\r\n\r\n1. a user does a "wr update-package-index" which gets all the recent versions of packages from PiPy\r\n2. the user does a release which does an rsync to president\r\n3. the release was done in a package (e.g., mom) that has a package (e.g., docopt) not pinned\r\n4. the package that is not pinned (e.g., docopt) is pinned in another required package (e.g., redbike has docopt==0.6.1)\r\n5. the tests pass and the release is created\r\n\r\nthen:  \r\n\r\n  - there will be a runtime error when the package is deployed, e.g.,  \r\n\r\n    pkg_resources.VersionConflict: (docopt 0.6.2 (/trapit/mom/76e8972c-fd81-11e3-9512-1285db2c24cb/.virt/lib/python2.7/site-packages), Requirement.parse('docopt==0.6.1'))\r\n\r\n     \r\n
2	2014-07-07 18:09:55.261371-07	2014-07-13 08:30:56.388307-07	1	When you click on the "Click Here" text, an alert box will pop up that says "Hello World!" \r\n\r\n[http://jsfiddle.net/rbednark/uGuMR/][1]\r\n\r\n\r\n  [1]: http://jsfiddle.net/rbednark/uGuMR/
4	2014-07-13 15:40:47.796514-07	2014-07-13 15:40:47.796546-07	1	1.  Identifier\r\n1.  Id\r\n1.  Name\r\n1.  Link\r\n1.  DOM\r\n1.  XPath\r\n1.  CSS\r\n1.  UI-element
5	2014-07-14 08:23:04.288181-07	2014-07-14 08:23:04.288221-07	1	A unit of work is changes in state between Python objects and their related db rows.\r\n\r\n[SQLAlchemy] includes a system that transparently synchronizes all changes in state between objects and their related rows, called a unit of work.   \r\n[ http://docs.sqlalchemy.org/en/rel_0_8/orm/tutorial.html ]
6	2014-07-14 08:29:42.022518-07	2014-07-14 08:29:42.02255-07	1	ORM is constructed on the SQLAlchemy Expression Language.  ORM is high-level, related to Python objects.  The Expression Language is low-level, related to the schema.\r\n\r\n> The ORM is in contrast to the SQLAlchemy Expression Language, upon\r\n> which the ORM is constructed. Whereas the SQL Expression Language,\r\n> introduced in SQL Expression Language Tutorial, presents a system of\r\n> representing the primitive constructs of the relational database\r\n> directly without opinion, the ORM presents a high level and abstracted\r\n> pattern of usage, which itself is an example of applied usage of the\r\n> Expression Language.\r\n> \r\n> While there is overlap among the usage patterns of the ORM and the\r\n> Expression Language, the similarities are more superficial than they\r\n> may at first appear. One approaches the structure and content of data\r\n> from the perspective of a user-defined domain model which is\r\n> transparently persisted and refreshed from its underlying storage\r\n> model. The other approaches it from the perspective of literal schema\r\n> and SQL expression representations which are explicitly composed into\r\n> messages consumed individually by the database.\r\n> \r\n> A successful application may be constructed using the Object\r\n> Relational Mapper exclusively. In advanced situations, an application\r\n> constructed with the ORM may make occasional usage of the Expression\r\n> Language directly in certain areas where specific database\r\n> interactions are required.\r\n[ http://docs.sqlalchemy.org/en/rel_0_8/orm/tutorial.html ]
7	2014-07-14 10:57:55.247972-07	2014-07-14 10:57:55.248003-07	1	    CREATE TYPE mood AS ENUM ('happy', 'joyful', 'ecstatic');\r\n    CREATE TABLE person (\r\n        name text,\r\n        current_mood mood\r\n    );\r\n    INSERT INTO person VALUES ('Rob', 'joyful');
8	2014-07-14 11:01:39.803848-07	2014-07-14 11:01:39.803879-07	1	List user-defined data types:\r\n\r\n    psql> \\dT+\r\n\r\nList system data types as well:\r\n\r\n    psql> \\dTS+\r\n\r\n
9	2014-07-14 12:16:26.734731-07	2014-07-14 13:46:01.757999-07	1	0.8.2\r\n\r\nNote that it is unpinned in mom.  0.8.2 is the only version on president.  I don't know why the "wr update-package-index" hasn't updated it on president.  The latest PyPI version as of 7/14/14 is 0.9.6
10	2014-07-14 18:11:58.383813-07	2014-07-14 18:11:58.383844-07	1	    from sqlalchemy import create_engine\r\n    from sqlalchemy.org import sessionmaker\r\n    \r\n    engine = create_engine('postgres://postgres:postgres@localhost/%s' % DB, echo=True)\r\n    Session = sessionmaker(bind=engine)\r\n    session = Session()
11	2014-07-14 18:13:26.043615-07	2014-07-14 18:13:26.043645-07	1	It creates a session instance that can then be used to communicate with the ORM (insert rows, query, ...).
15	2014-07-15 08:16:52.846598-07	2014-07-15 08:16:52.846631-07	1	Use the `echo=True` argument to `check_engine()`, e.g.,\r\n\r\n    engine = create_engine('postgres://my_username:my_password@localhost/my_database', echo=True)
16	2014-07-15 08:51:15.937199-07	2014-07-15 08:51:15.93723-07	1	    psql> \\d my_table\r\n\r\nor to show more information:\r\n\r\n    psql> \\d+ my_table\r\n\r\n
13	2014-07-15 07:03:02.665088-07	2014-07-15 07:03:02.665122-07	1	Use `2>`, e.g.,\r\n\r\n     grep asdf asdf 2> /dev/null
12	2014-07-15 06:55:26.909685-07	2014-07-15 07:21:12.484133-07	1	There are 7 components (some of the optional):\r\n\r\n1.  dialect\r\n1.  driver\r\n1.  username\r\n1.  password\r\n1.  host\r\n1.  port\r\n1.  database\r\n\r\n<!-- html needed here to separate above list from code below -->\r\n\r\n        # dialect+driver://username:password@host:port/database\r\n        # engine = create_engine('{DATABASE_TYPE}://{USERNAME}:{PASSWORD}@{HOST}/{DB_NAME}')\r\n        engine = create_engine('postgres://my_username:my_password@localhost/my_database')
14	2014-07-15 07:41:46.417907-07	2014-07-15 07:41:46.417941-07	1	Add an html element after the list, e.g.,\r\n\r\n    1. list item\r\n\r\n    <!-- html element -->\r\n\r\n         indented code\r\n\r\ne.g.,\r\n\r\n1. list item\r\n\r\n<!-- html element -->\r\n\r\n    code
17	2014-07-15 12:02:37.828915-07	2014-07-15 12:02:37.828946-07	1	Summary:\r\n\r\nPer http://www.sqlite.org/datatype3.html :\r\n\r\n> 1.0 Storage Classes and Datatypes\r\n> \r\n> Each value stored in an SQLite database (or manipulated by the\r\n> database engine) has one of the following storage classes:\r\n> \r\n> NULL. The value is a NULL value.\r\n> \r\n> INTEGER. The value is a signed integer, stored in 1, 2, 3, 4, 6, or 8\r\n> bytes depending on the magnitude of the value.\r\n> \r\n> REAL. The value is a floating point value, stored as an 8-byte IEEE\r\n> floating point number.\r\n> \r\n> TEXT. The value is a text string, stored using the database encoding\r\n> (UTF-8, UTF-16BE or UTF-16LE).\r\n> \r\n> BLOB. The value is a blob of data, stored exactly as it was input.\r\n> \r\n> Note that a storage class is slightly more general than a datatype.\r\n> The INTEGER storage class, for example, includes 6 different integer\r\n> datatypes of different lengths. This makes a difference on disk. But\r\n> as soon as INTEGER values are read off of disk and into memory for\r\n> processing, they are converted to the most general datatype (8-byte\r\n> signed integer). And so for the most part, "storage class" is\r\n> indistinguishable from "datatype" and the two terms can be used\r\n> interchangeably.\r\n> \r\n> Any column in an SQLite version 3 database, except an INTEGER PRIMARY\r\n> KEY column, may be used to store a value of any storage class.\r\n> \r\n> All values in SQL statements, whether they are literals embedded in\r\n> SQL statement text or parameters bound to precompiled SQL statements\r\n> have an implicit storage class. Under circumstances described below,\r\n> the database engine may convert values between numeric storage classes\r\n> (INTEGER and REAL) and TEXT during query execution.\r\n> \r\n> 1.1 Boolean Datatype\r\n> \r\n> SQLite does not have a separate Boolean storage class. Instead,\r\n> Boolean values are stored as integers 0 (false) and 1 (true).\r\n> \r\n> 1.2 Date and Time Datatype\r\n> \r\n> SQLite does not have a storage class set aside for storing dates\r\n> and/or times. Instead, the built-in Date And Time Functions of SQLite\r\n> are capable of storing dates and times as TEXT, REAL, or INTEGER\r\n> values:\r\n> \r\n> TEXT as ISO8601 strings ("YYYY-MM-DD HH:MM:SS.SSS"). REAL as Julian\r\n> day numbers, the number of days since noon in Greenwich on November\r\n> 24, 4714 B.C. according to the proleptic Gregorian calendar. INTEGER\r\n> as Unix Time, the number of seconds since 1970-01-01 00:00:00 UTC.\r\n> Applications can chose to store dates and times in any of these\r\n> formats and freely convert between formats using the built-in date and\r\n> time functions.\r\n> \r\n> 2.2 Affinity Name Examples\r\n> \r\n> The following table shows how many common datatype names from more\r\n> traditional SQL implementations are converted into affinities by the\r\n> five rules of the previous section. This table shows only a small\r\n> subset of the datatype names that SQLite will accept. Note that\r\n> numeric arguments in parentheses that following the type name (ex:\r\n> "VARCHAR(255)") are ignored by SQLite - SQLite does not impose any\r\n> length restrictions (other than the large global SQLITE_MAX_LENGTH\r\n> limit) on the length of strings, BLOBs or numeric values.\r\n> \r\n\r\n    |Example Typenames From The|                  |                               |\r\n    |CREATE TABLE Statement    |Resulting Affinity|Rule Used To Determine Affinity|\r\n    |or CAST Expression        |                  |                               |\r\n    |             INT          |                  |                               |\r\n    |           INTEGER        |                  |                               |\r\n    |           TINYINT        |                  |                               |\r\n    |           SMALLINT       |                  |                               |\r\n    |          MEDIUMINT       |        INTEGER   |                      1        |\r\n    |            BIGINT        |                  |                               |\r\n    |       UNSIGNED BIG INT   |                  |                               |\r\n    |             INT2         |                  |                               |\r\n    |             INT8         |                  |                               |\r\n    --------------------------------------------------------------------------------\r\n    |       CHARACTER(20)      |                  |                               |\r\n    |        VARCHAR(255)      |                  |                               |\r\n    |   VARYING CHARACTER(255) |                  |                               |\r\n    |         NCHAR(55)        |          TEXT    |                      2        |\r\n    |    NATIVE CHARACTER(70)  |                  |                               |\r\n    |       NVARCHAR(100)      |                  |                               |\r\n    |            TEXT          |                  |                               |\r\n    |            CLOB          |                  |                               |\r\n    --------------------------------------------------------------------------------\r\n    |            BLOB          |          NONE    |                      3        |\r\n    |   no datatype specified  |                  |                               |\r\n    ------------------------------------------------------------------------------\r\n    |             REAL         |                  |                               |\r\n    |            DOUBLE        |          REAL    |                      4        |\r\n    |       DOUBLE PRECISION   |                  |                               |\r\n    |            FLOAT         |                  |                               |\r\n    -------------------------------------------------------------------------------\r\n    |            NUMERIC       |                  |                               |\r\n    |         DECIMAL(10,5)    |                  |                               |\r\n    |            BOOLEAN       |        NUMERIC   |                      5        |\r\n    |              DATE        |                  |                               |\r\n    |            DATETIME      |                  |                               |\r\n\r\nNote that a declared type of "FLOATING POINT" would give INTEGER affinity, not REAL affinity, due to the "INT" at the end of "POINT". And the declared type of "STRING" has an affinity of NUMERIC, not TEXT.
18	2014-07-15 15:15:16.201938-07	2014-07-15 15:15:16.201972-07	1	> Daniel Dennet on how to compose a successful critical commentary:\r\n> \r\n> 1. You should attempt to re-express your target’s position so clearly, vividly, and fairly that your target says, “Thanks, I wish I’d thought\r\n> of putting it that way.\r\n> \r\n> 2. You should list any points of agreement (especially if they are not matters of general or widespread agreement).\r\n> \r\n> 3. You should mention anything you have learned from your target.\r\n> \r\n> 4. Only then are you permitted to say so much as a word of rebuttal or criticism.\r\n> \r\n> \\- Daniel Dennet\r\n\r\nhttp://www.swiss-miss.com/2014/07/how-to-compose-a-successful-critical-commentary.html
19	2014-07-16 09:08:51.964728-07	2014-07-16 09:08:51.964767-07	1	In the browser in Storm or Vulcan:\r\n\r\n1. go into Developer Tools > Network\r\n1. make a request to do something with the document (e.g., rate, feature, publish, share, edit)\r\n1. Look at the parameters in the network request
20	2014-07-16 14:40:01.079684-07	2014-07-16 14:40:01.079721-07	1	> Materialized views in PostgreSQL use the rule system like views do,\r\n> but persist the results in a table-like form. The main differences\r\n> between:\r\n> \r\n>     CREATE MATERIALIZED VIEW mymatview AS SELECT * FROM mytab; and:\r\n> \r\n>     CREATE TABLE mymatview AS SELECT * FROM mytab; \r\n> are that the\r\n> materialized view cannot subsequently be directly updated and that the\r\n> query used to create the materialized view is stored in exactly the\r\n> same way that a view's query is stored, so that fresh data can be\r\n> generated for the materialized view with:\r\n> \r\n>     REFRESH MATERIALIZED VIEW mymatview;\r\n\r\n[http://www.postgresql.org/docs/9.3/static/rules-materializedviews.html][1]\r\n\r\n\r\n  [1]: http://www.postgresql.org/docs/9.3/static/rules-materializedviews.html
34	2014-08-01 07:50:58.079505-07	2014-08-01 07:50:58.079538-07	1	122 acres\r\n\r\nhttp://bond.pcc.edu/campus/sylvania-campus/
35	2014-08-01 09:20:31.632362-07	2014-08-01 09:20:31.632392-07	1	    SHOW ALL;\r\n    ...\r\n    log_min_duration_statement      | 1s                                                       | Sets the minimum execution time above which statements will be logged.
21	2014-07-18 01:23:25.375621-07	2014-07-18 01:23:25.375659-07	1	Summary:\r\n\r\n1. INNER JOIN - all students with lockers (returns 70 rows)\r\n1. LEFT OUTER JOIN - all students, and show locker if they have one (returns 100 rows)\r\n1. RIGHT OUTER JOIN - all lockers, and students assigned to locker if there are any (returns 80 rows)\r\n1. FULL OUTER JOIN - all students and all lockers, match up where you can (returns 110 rows)\r\n1. CROSS JOIN - every possible student-to-locker pairing (returns 5000 rows)\r\n\r\n\r\n> INNER JOIN is equivalent to "show me all students with lockers". Any\r\n> students without lockers, or any lockers without students are missing.\r\n> Returns 70 rows\r\n> \r\n> LEFT OUTER JOIN would be "show me all students, with their\r\n> corresponding locker if they have one". This might be a general\r\n> student list, or could be used to identify students with no locker.\r\n> Returns 100 rows [I think this is equivalent to a LEFT JOIN --Rob\r\n> Bednark 10/27/13]\r\n> \r\n> RIGHT OUTER JOIN would be "show me all lockers, and the students\r\n> assigned to them if there are any". This could be used to identify\r\n> lockers that have no students assigned, or lockers that have too many\r\n> students. Returns 80 rows (list of 70 students in the 40 lockers, plus\r\n> the 10 lockers with no student)\r\n> \r\n> FULL OUTER JOIN would be silly and probably not much use. Something\r\n> like "show me all students and all lockers, and match them up where\r\n> you can" Returns 110 rows (all 100 students, including those without\r\n> lockers. Plus the 10 lockers with no student)\r\n> \r\n> CROSS JOIN is also fairly silly in this scenario. It doesn't use the\r\n> linked "lockernumber" field in the students table, so you basically\r\n> end up with a big giant list of every possible student-to-locker\r\n> pairing, whether or not it actually exists. Returns 5000 rows (100\r\n> students x 50 lockers). Could be useful (with filtering) as a starting\r\n> point to match up the new students with the empty lockers.\r\n\r\n[http://stackoverflow.com/questions/448023/what-is-the-difference-between-left-right-outer-and-inner-joins][1]\r\n\r\n\r\n  [1]: http://stackoverflow.com/questions/448023/what-is-the-difference-between-left-right-outer-and-inner-joins
22	2014-07-18 02:20:07.766997-07	2014-07-18 02:20:07.767048-07	1	    SELECT users.name, orgs.name\r\n      FROM users\r\n      LEFT JOIN orgs\r\n        ON orgs.id = users.org_id;
23	2014-07-18 04:12:23.104737-07	2014-07-18 04:12:23.104782-07	1	    $ git remote set-url origin git@github.com:rbednark/my_repo.git\r\n
24	2014-07-18 05:05:14.946462-07	2014-07-18 05:05:14.946501-07	1	    from datetime import datetime\r\n    ...\r\n    Column(’last_modified’, DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
25	2014-07-18 07:55:23.710197-07	2014-07-18 07:58:58.366053-07	1	    nosetests --debug=DEBUG --nocapture --nologcapture
26	2014-07-21 22:16:29.732161-07	2014-07-21 22:16:29.732236-07	1	**cascading**\r\n\r\n    >>> jack = User(name='jack', fullname='Jack Bean', password='gjffdd')\r\n    >>> jack.addresses\r\n    []\r\n\r\nWe are free to add Address objects on our User object. In this case we just assign a full list directly:\r\n\r\n    >>> jack.addresses = [\r\n    ...                 Address(email_address='jack@google.com'),\r\n    ...                 Address(email_address='j25@yahoo.com')]\r\n\r\nWhen using a bidirectional relationship, elements added in one direction automatically become visible in the other direction. This behavior occurs based on attribute on-change events and is evaluated in Python, without using any SQL:\r\n\r\n    >>> jack.addresses[1]\r\n    <Address(email_address='j25@yahoo.com')>\r\n    \r\n    >>> jack.addresses[1].user\r\n    <User(name='jack', fullname='Jack Bean', password='gjffdd')>\r\n\r\nLet’s add and commit Jack Bean to the database. jack as well as the two Address members in the corresponding addresses collection are both added to the session at once, using a process known as **cascading**:\r\n\r\n    >>> session.add(jack)\r\n    >>> session.commit()\r\n\r\n[http://docs.sqlalchemy.org/en/latest/orm/tutorial.html][1]\r\n\r\n\r\n  [1]: http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
27	2014-07-22 15:30:22.095061-07	2014-07-22 15:30:22.095107-07	1	Declarative uses simply specify the class, whereas Declarative specifies a class and maps it to a Table object.
29	2014-07-22 20:58:12.448762-07	2014-07-22 20:58:12.448801-07	1	    def load_engine(env):\r\n        engine = create_engine(connect_string, echo=True)\r\n                                                    ^^^^
30	2014-07-24 08:01:03.077668-07	2014-07-24 08:01:03.077712-07	1	    less --no-init\r\n\r\n-or-\r\n\r\n    less -X\r\n\r\n
33	2014-07-31 11:49:22.908034-07	2014-07-31 11:49:22.908064-07	1	**fixed** mindset -- encounters are test of worthiness; success based on innate ability; goal is to look smart and never dumb; dread failure  \r\n**growth** mindset -- encounters are opportunities to improve; talents and abilities are developed through effort\r\n\r\n> Some believe their success is based on innate ability; these are said\r\n> to have a "fixed" theory of intelligence (fixed mindset). Others, who\r\n> believe their success is based on hard work, learning, training and\r\n> doggedness are said to have a "growth" or an "incremental" theory of\r\n> intelligence (growth mindset). Individuals may not necessarily be\r\n> aware of their own mindset, but their mindset can still be discerned\r\n> based on their behavior. It is especially evident in their reaction to\r\n> failure. Fixed-mindset individuals dread failure because it is a\r\n> negative statement on their basic abilities, while growth mindset\r\n> individuals don't mind or fear failure as much because they realize\r\n> their performance can be improved and learning comes from failure.\r\n> These two mindsets play an important role in all aspects of a person's\r\n> life. Dweck argues that the growth mindset will allow a person to live\r\n> a less stressful and more successful life. Dweck's definition of fixed\r\n> and growth mindsets from a 2012 interview:\r\n> \r\n> "In a fixed mindset students believe their basic abilities, their\r\n> intelligence, their talents, are just fixed traits. They have a\r\n> certain amount and that's that, and then their goal becomes to look\r\n> smart all the time and never look dumb. In a growth mindset students\r\n> understand that their talents and abilities can be developed through\r\n> effort, good teaching and persistence. They don't necessarily think\r\n> everyone's the same or anyone can be Einstein, but they believe\r\n> everyone can get smarter if they work at it."\r\n\r\nhttp://en.wikipedia.org/wiki/Carol_Dweck
31	2014-07-30 13:56:15.474268-07	2014-07-30 14:02:13.16348-07	1	double quotes => values (e.g., `WHERE name = "John"`)  \r\nsingle quotes => system identifiers (field names, table names, ...) (e.g., `WHERE 'first name' = "John"`)\r\n\r\n> MySQL uses ' or " to quote values (i.e. WHERE name = "John"). This is\r\n> not the ANSI standard for databases. PostgreSQL uses only single\r\n> quotes for this (i.e. WHERE name = 'John'). Double quotes are used to\r\n> quote system identifiers; field names, table names, etc. (i.e. WHERE\r\n> "last name" = 'Smith').\r\n\r\n[https://wiki.postgresql.org/wiki/Things_to_find_out_about_when_moving_from_MySQL_to_PostgreSQL][1]\r\n\r\n\r\n  [1]: https://wiki.postgresql.org/wiki/Things_to_find_out_about_when_moving_from_MySQL_to_PostgreSQL
32	2014-07-31 11:43:26.700295-07	2014-08-25 15:20:15.508471-07	1	"I feel... when you... because..." communication\r\n\r\nI feel \\_\\_\\_ when you \\_\\_\\_ because \\_\\_\\_.  \r\nI want \\_\\_\\_.\r\n\r\n[http://en.wikipedia.org/wiki/I-message][1]  \r\n[http://www.thirteen.org/peaceful/strate.html][2]  \r\n[http://www.selba.org/EngTaster/Social/Communication/ObsFeelNeedRequest.html][3]  \r\n[https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=i%20feel%20when%20you%20because%20communication][4]\r\n\r\n\r\n  [1]: http://en.wikipedia.org/wiki/I-message\r\n  [2]: http://www.thirteen.org/peaceful/strate.html\r\n  [3]: http://www.selba.org/EngTaster/Social/Communication/ObsFeelNeedRequest.html\r\n  [4]: https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=i%20feel%20when%20you%20because%20communication
36	2014-08-01 15:07:48.098793-07	2014-08-01 15:18:00.614852-07	1	    1. CREATE USER myuser;\r\n    2. ALTER USER myuser WITH password 'mypassword';\r\n    3. echo 'localhost:5432:mydbname:myuser:mypassword' >> ~/.pgpass  # only needed if you don't want to be prompted for a password\r\n    4. chmod go-rwx ~/.pgpass\r\n    5. psql -h localhost --dbname=mydbname --username myusername\r\n    (note that the -h localhost part is important: it tells the psql client to connect using a TCP connection (which is configured to use password authentication), and not by a PEER connection (which does not care about the password))\r\n    http://stackoverflow.com/questions/2942485/psql-fatal-ident-authentication-failed-for-user-postgres\r\n\r\npg_hba.conf file:\r\n\r\n    local   all             postgres                                peer\r\n\r\n"peer" can also be set to "md5"\r\n\r\n> Peer authentication\r\n> \r\n> The peer authentication method works by obtaining the client's\r\n> operating system user name from the kernel and using it as the allowed\r\n> database user name (with optional user name mapping). This method is\r\n> only supported on local connections.\r\n> \r\n> Password authentication\r\n> \r\n> The password-based authentication methods are md5 and password. These\r\n> methods operate similarly except for the way that the password is sent\r\n> across the connection, namely MD5-hashed and clear-text respectively.\r\n> \r\n> If you are at all concerned about password "sniffing" attacks then md5\r\n> is preferred. Plain password should always be avoided if possible.\r\n> However, md5 cannot be used with the db_user_namespace feature. If the\r\n> connection is protected by SSL encryption then password can be used\r\n> safely (though SSL certificate authentication might be a better choice\r\n> if one is depending on using SSL).\r\n\r\nhttp://www.postgresql.org/docs/9.3/static/auth-methods.html
37	2014-08-01 16:07:20.424626-07	2014-08-01 16:07:20.424656-07	1	    MetaData().create_all()\r\n    MetaData().drop_all()
38	2014-08-04 10:13:52.971369-07	2014-08-04 10:13:52.971409-07	1	postgresql.conf:\r\n\r\n    statement_timeout = 1000 # in milliseconds
40	2014-08-04 14:12:25.671077-07	2014-08-04 14:21:17.22777-07	1	TEMP tables are only visible to the session that created them.\r\n\r\n> Temporary tables in other sessions are invisible by design. It makes\r\n> no difference if two sessions have the same user.\r\n\r\nhttp://dba.stackexchange.com/questions/5236/is-there-a-way-to-access-temporary-tables-of-other-sessions-in-postgres
41	2014-08-04 15:33:41.676126-07	2014-08-04 15:33:41.676156-07	1	psql> \\pset expanded\r\n\r\n> expanded (or x) If value is specified it must be either on or off\r\n> which will enable or disable expanded mode. If value is omitted the\r\n> command toggles between regular and expanded mode. When expanded mode\r\n> is enabled, query results are displayed in two columns, with the\r\n> column name on the left and the data on the right. This mode is useful\r\n> if the data wouldn't fit on the screen in the normal "horizontal"\r\n> mode.\r\n> \r\n> \\x Toggles expanded table formatting mode. As such it is equivalent to\r\n> \\pset expanded.\r\n> \r\n> -x\r\n> --expanded Turn on the expanded table formatting mode. This is equivalent to the \\x command.\r\n\r\nhttp://www.postgresql.org/docs/9.1/static/app-psql.html
42	2014-08-05 11:00:27.903413-07	2014-08-05 11:00:27.903443-07	1	DELETE * FROM my_table;
43	2014-08-05 11:02:40.073793-07	2014-08-05 11:02:40.073824-07	1	Use the `RETURNING` clause, e.g.,\r\n\r\n    DELETE FROM my_table RETURNING *;
44	2014-08-05 11:29:33.288974-07	2014-08-05 11:29:33.289011-07	1	    psql> \\x auto\r\n\r\nCan also set this in the `.psqlrc` file, though I haven't got it to work for me yet:\r\n\r\n    \\x auto
45	2014-08-06 14:32:01.835866-07	2014-08-06 14:32:01.835903-07	1	    psql postgres://my_username:my_password@db_host/db_name
46	2014-08-07 10:09:16.468161-07	2014-08-07 10:09:16.468192-07	1	> OAuth provides client applications a 'secure delegated access' to\r\n> server resources on behalf of a resource owner. It specifies a process\r\n> for resource owners to authorize third-party access to their server\r\n> resources without sharing their credentials. Designed specifically to\r\n> work with Hypertext Transfer Protocol (HTTP), OAuth essentially allows\r\n> access tokens to be issued to third-party clients by an authorization\r\n> server, with the approval of the resource owner, or end-user. The\r\n> client then uses the access token to access the protected resources\r\n> hosted by the resource server. OAuth is commonly used as a way for\r\n> web surfers to log into third party web sites using their Google,\r\n> Facebook or Twitter accounts, without worrying about their access\r\n> credentials being compromised.\r\n> \r\n> OAuth is a service that is complementary to, and therefore distinct\r\n> from, OpenID.\r\n\r\nhttp://en.wikipedia.org/wiki/OAuth
47	2014-08-07 10:18:04.828534-07	2014-08-07 10:18:04.828574-07	1	> In computer systems, an access token contains the security credentials\r\n> for a login session and identifies the user, the user's groups, the\r\n> user's privileges, and, in some cases, a particular application.\r\n\r\nhttp://en.wikipedia.org/wiki/Access_token
39	2014-08-04 13:58:14.96551-07	2014-08-11 17:20:31.600483-07	1	for the `create_engine()` call, set:\r\n\r\n    echo="debug"\r\n\r\ne.g.,\r\n\r\n     engine = create_engine(connect_string, echo='debug')\r\n\r\n\r\n\r\nAlternatively:\r\n\r\n    # sqlalchemy.engine - controls SQL echoing. set to logging.INFO for SQL query output, logging.DEBUG for query + result set output.\r\n    import logging\r\n    logging.basicConfig()\r\n    # setting sqlalchemy.engine - controls SQL echoing. set to logging.INFO for SQL query output, logging.DEBUG for query + result set output.\r\n    logging.getLogger('sqlalchemy.engine').setLevel(logging.DEBUG)\r\n\r\nhttp://docs.sqlalchemy.org/en/rel_0_9/core/engines.htm
48	2014-08-12 08:56:22.512717-07	2014-08-12 08:56:22.512751-07	1	Use the `rowcount` attribute of the ResultProxy that is returned, e.g.,\r\n\r\n    result_proxy = session.execute('select * from my_table')\r\n    print "Number of rows selected = [%s]" % result_proxy.rowcount
49	2014-08-12 17:26:55.890678-07	2014-08-12 17:26:55.890711-07	1	    CREATE DATABASE newdb WITH TEMPLATE originaldb OWNER dbuser;\r\n\r\nThis copies all schema and all data.\r\n\r\n(note that the db should not be in use by any users or you may get an error)\r\n\r\nhttp://stackoverflow.com/questions/876522/creating-a-copy-of-a-database-in-postgres
50	2014-08-12 21:13:26.331715-07	2014-08-12 21:13:26.331747-07	1	`GNU Readline Library` is used for editing.  To set to vi:\r\n\r\n    set editing-mode vi\r\n\r\n\r\nhttp://www.postgresql.org/docs/9.2/static/app-psql.html\r\nhttp://cnswww.cns.cwru.edu/php/chet/readline/readline.html
51	2014-08-12 23:14:21.974396-07	2014-08-12 23:14:21.974432-07	1	    -- double dashes for a single line comment\r\n    \r\n    /*\r\n      for a multiline comment,\r\n      use the slash and asterisk\r\n    */
52	2014-08-13 14:48:06.372528-07	2014-08-13 14:48:06.372568-07	1	    SELECT feed_url,count(feed_url) FROM feeds GROUP BY feed_url HAVING count(feed_url) > 1;
71	2014-09-02 11:54:39.608317-07	2014-09-02 11:54:39.608347-07	1	It allows you to add 0 or more optional fields that can be anything.  This means that only the fields that you specify will be validated, and other fields will just be ignored.\r\n\r\n    >>> schema = Schema({object:object})\r\n    >>> schema.validate({'foo':'bar'})\r\n    {'foo': 'bar'}\r\n\r\n    >>> schema2 = Schema({'rob': str, object:object})\r\n    >>> schema2.validate({'rob' : 'bednark'})\r\n    {'rob': 'bednark'}\r\n    >>> schema2.validate({'rob' : 'bednark', 1:3})\r\n    {1: 3, 'rob': 'bednark'}\r\n    >>> schema2.validate({'rob' : 'bednark', 1:3, 2:4})\r\n    {1: 3, 'rob': 'bednark', 2: 4}\r\n    >>> schema2.validate({1:3})\r\n    Traceback...\r\n    ...\r\n    val.NotValid: missing key: 'rob'\r\n    \r\n    >>> schema3 = Schema({'rob': str})\r\n    >>> schema3.validate({'rob':'bednark'})\r\n    {'rob': 'bednark'}\r\n    >>> schema3.validate({'rob':'bednark', 1:3})\r\n    Traceback (most recent call last):\r\n    ...\r\n     val.NotValid: 1: 3 not matched
53	2014-08-19 08:04:50.466508-07	2014-08-19 08:04:50.46655-07	1	Paraphrase:  there must only be one possible value to return for an ungrouped column (e.g., a primary key of the table containing the ungrouped column).\r\n\r\n> Aggregate functions, if any are used, are computed across all rows\r\n> making up each group, producing a separate value for each group\r\n> (whereas without GROUP BY, an aggregate produces a single value\r\n> computed across all the selected rows).\r\n> \r\n> When GROUP BY is present, it is not valid for the SELECT list\r\n> expressions to refer to ungrouped columns except within aggregate\r\n> functions or if the ungrouped column is functionally dependent on the\r\n> grouped columns, since there would otherwise be more than one possible\r\n> value to return for an ungrouped column. A functional dependency\r\n> exists if the grouped columns (or a subset thereof) are the primary\r\n> key of the table containing the ungrouped column.\r\n\r\n[http://www.postgresql.org/docs/9.1/static/sql-select.html#SQL-GROUPBY][1]\r\n[http://stackoverflow.com/questions/22788073/why-is-postgres-allowing-me-have-columns-not-in-the-group-by][2]\r\n\r\n\r\n  [1]: http://www.postgresql.org/docs/9.1/static/sql-select.html#SQL-GROUPBY\r\n  [2]: http://stackoverflow.com/questions/22788073/why-is-postgres-allowing-me-have-columns-not-in-the-group-by
54	2014-08-19 08:09:12.34394-07	2014-08-19 08:09:12.343978-07	1	It means to group by the first column regardless of what it's called. You can do the same with ORDER BY.\r\n\r\ne.g., \r\n\r\n    SELECT id FROM orgs GROUP BY 1;\r\n\r\n[http://stackoverflow.com/questions/7392730/what-does-sql-group-by-clause-group-by-1-mean][1]\r\n\r\n\r\n  [1]: http://stackoverflow.com/questions/7392730/what-does-sql-group-by-clause-group-by-1-mean
55	2014-08-19 08:26:43.325364-07	2014-08-19 08:26:43.325396-07	1	combine\r\n\r\nag·gre·gate  \r\nnoun  \r\nˈagrigit/  \r\n\r\n1. a whole formed by combining several (typically disparate) elements.\r\n"the council was an aggregate of three regional assemblies"\r\n2. a material or structure formed from a loosely compacted mass of fragments or particles.\r\nsynonyms:\tcollection, mass, agglomeration, conglomerate, assemblage; More\r\npieces of broken or crushed stone or gravel used to make concrete, or more generally in building and construction work.\r\n\r\nadjective\r\n\r\n1. formed or calculated by the combination of many separate units or items; total.\r\n"the aggregate amount of grants made"\r\nsynonyms:\ttotal, combined, gross, overall, composite\r\n"an aggregate score"\r\nBOTANY\r\n(of a group of species) comprising several very similar species formerly regarded as a single species.\r\nECONOMICS\r\ndenoting the total supply or demand for goods and services in an economy at a particular time.\r\n"aggregate demand"\r\n\r\nverb  \r\n3rd person present: aggregates; past tense: aggregated; past participle: aggregated; gerund or present participle: aggregating  \r\n-ˌgāt/  \r\n1. form or group into a class or cluster.\r\n"the butterflies aggregate in dense groups"
57	2014-08-19 10:49:04.261565-07	2014-08-19 10:49:04.261598-07	1	    ALTER TABLE my_table DROP COLUMN my_column;
58	2014-08-19 11:34:48.937928-07	2014-08-19 11:34:48.937959-07	1	gUw\r\n\r\nFrom ":help gU":\r\n\r\n> gU{motion}        => make Nmove text uppercase
59	2014-08-19 12:09:14.598874-07	2014-08-19 12:09:14.598907-07	1	Note that zoidberg uses `feedparser` which is a PyPI package, and `bozo` is a flag that is set on the output from feedparser.\r\n\r\n> Universal Feed Parser can parse feeds whether they are well-formed XML\r\n> or not. However, since some applications may wish to reject or warn\r\n> users about non-well-formed feeds, Universal Feed Parser sets the bozo\r\n> bit when it detects that a feed is not well-formed.\r\n\r\n[https://pythonhosted.org/feedparser/bozo.html][1]\r\n\r\n\r\n  [1]: https://pythonhosted.org/feedparser/bozo.html
60	2014-08-19 12:34:05.847633-07	2014-08-19 12:34:05.847664-07	1	It shows the last 10 polls for the feed, where there are 3 fields for each poll:\r\n  \r\n\r\n    status, bozo, datetime.utcnow()\r\n\r\n(bozo is 1 if a non-well-formed feed, 0 otherwise)\r\n
61	2014-08-20 11:59:03.133482-07	2014-08-20 11:59:03.133513-07	1	    \\pset null '_NULL_'\r\n\r\n(can add this to `.psqlrc` file)
62	2014-08-23 15:02:34.773792-07	2014-08-23 15:14:36.522976-07	1	    nosetests --logging-filter=none\r\n\r\n(give it a name of a non-existent logger)\r\n\r\n>  --logging-filter=FILTER\r\n>               Specify  which  statements  to filter in/out. By default, everything is captured. If\r\n>               the output is too verbose, use this option to filter out needless output.   Example:\r\n>               filter=foo will capture statements issued ONLY to\r\n>                foo  or foo.what.ever.sub but not foobar or other logger.  Specify multiple loggers\r\n>               with comma: filter=foo,bar,baz.  If any logger name is prefixed  with  a  minus,  eg\r\n>               filter=-foo, it will be excluded rather than included. Default: exclude logging mes-\r\n>               sages from nose itself (-nose). [NOSE_LOGFILTER]
63	2014-08-23 15:20:13.237037-07	2014-08-23 15:20:13.237074-07	1	Use an exclamation point, e.g.,\r\n\r\n    pdb> !c = 3
28	2014-07-22 17:25:05.858524-07	2014-08-25 15:14:01.723825-07	1	> The SQLAlchemy Expression Language presents a system of representing\r\n> relational database structures and expressions using Python\r\n> constructs. These constructs are modeled to resemble those of the\r\n> underlying database as closely as possible, while providing a modicum\r\n> of abstraction of the various implementation differences between\r\n> database backends. While the constructs attempt to represent\r\n> equivalent concepts between backends with consistent structures, they\r\n> do not conceal useful concepts that are unique to particular subsets\r\n> of backends. The Expression Language therefore presents a method of\r\n> writing backend-neutral SQL expressions, but does not attempt to\r\n> enforce that expressions are backend-neutral.\r\n> \r\n> The Expression Language is in contrast to the Object Relational\r\n> Mapper, which is a distinct API that builds on top of the Expression\r\n> Language. Whereas the ORM, introduced in Object Relational Tutorial,\r\n> presents a high level and abstracted pattern of usage, which itself is\r\n> an example of applied usage of the Expression Language, the Expression\r\n> Language presents a system of representing the primitive constructs of\r\n> the relational database directly without opinion.\r\n> \r\n> While there is overlap among the usage patterns of the ORM and the\r\n> Expression Language, the similarities are more superficial than they\r\n> may at first appear. One approaches the structure and content of data\r\n> from the perspective of a user-defined domain model which is\r\n> transparently persisted and refreshed from its underlying storage\r\n> model. The other approaches it from the perspective of literal schema\r\n> and SQL expression representations which are explicitly composed into\r\n> messages consumed individually by the database.\r\n> \r\n> A successful application may be constructed using the Object\r\n> Relational Mapper exclusively. In advanced situations, an application\r\n> constructed with the ORM may make occasional usage of the Expression\r\n> Language directly in certain areas where specific database\r\n> interactions are required.\r\n\r\n[http://docs.sqlalchemy.org/en/latest/core/tutorial.html][1]\r\n\r\n\r\n  [1]: http://docs.sqlalchemy.org/en/latest/core/tutorial.html
64	2014-08-29 15:00:59.987822-07	2014-08-29 15:00:59.98786-07	1	    nosetests --failed
65	2014-08-29 17:33:38.805616-07	2014-08-29 17:33:38.805654-07	1	    tests.__init__.ElzarTestCase.get_api()
66	2014-08-29 17:47:28.046669-07	2014-08-29 17:47:28.0467-07	1	    elzar.client.APIClient.users()
56	2014-08-19 10:42:36.661888-07	2014-08-29 18:11:59.631139-07	1	    CREATE TEMP TABLE tmp_rob_feeds \r\n        AS SELECT * FROM feeds WHERE feed_url ILIKE '%beautyandwell%';
67	2014-08-29 18:36:58.029804-07	2014-08-29 18:36:58.029842-07	1	It selects all distinct names.  If there are multiple rows with a given name, only one instance of that name will be returned.
68	2014-08-29 18:42:56.91057-07	2014-08-29 18:42:56.910602-07	1	    SELECT DISTINCT name, COUNT(name)\r\n        FROM my_table\r\n        GROUP BY name\r\n        ORDER BY count DESC;
69	2014-08-31 19:57:10.346901-07	2014-08-31 19:57:10.346935-07	1	1. RollerCoaster Tycoon\r\n1. developed by Chris Sawyer\r\n1. released in 1999
70	2014-09-02 10:35:50.648244-07	2014-09-02 10:35:50.648277-07	1	`selector` is the package written and open-sourced by Luke which does WSGI request delegation / routing.\r\n\r\n[https://github.com/lukearno/selector][1]\r\n\r\n\r\n  [1]: https://github.com/lukearno/selector
\.


--
-- Name: questions_answer_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quizme
--

SELECT pg_catalog.setval('questions_answer_id_seq', 71, true);


--
-- Data for Name: questions_attempt; Type: TABLE DATA; Schema: public; Owner: quizme
--

COPY questions_attempt (id, datetime_added, datetime_updated, user_id, attempt, question_id) FROM stdin;
1	2014-07-08 08:33:25.413522-07	2014-07-08 08:33:25.413554-07	1	Running "wr update-package-index" will cause dependency slide of unpinned packages, and those packages that are pinned in a different package will cause a problem when trying to run.	1
2	2014-07-09 07:56:16.584742-07	2014-07-09 07:56:16.584774-07	1	Shows a "Hello World" alert when you click on "Click Here".	2
3	2014-07-09 07:56:40.828252-07	2014-07-09 07:56:40.828285-07	1	Modify a webpage and share it with someone.	3
4	2014-07-09 07:58:02.505075-07	2014-07-09 07:58:02.505109-07	1	dependency slide, and then there is an issue with packageA requiring a specific version and it is not there.	1
5	2014-07-09 07:58:45.842388-07	2014-07-09 07:58:45.842437-07	1		2
6	2014-07-09 07:58:56.029104-07	2014-07-09 07:58:56.029139-07	1		1
7	2014-07-09 07:59:02.767121-07	2014-07-09 07:59:02.767156-07	1		1
8	2014-07-09 07:59:07.957232-07	2014-07-09 07:59:07.957282-07	1		2
9	2014-07-12 19:42:54.084106-07	2014-07-12 19:42:54.084142-07	1	it puts up alert when text is clicked	2
10	2014-07-12 19:43:07.280439-07	2014-07-12 19:43:07.280479-07	1		2
11	2014-07-12 19:43:26.204865-07	2014-07-12 19:43:26.204901-07	1	modify a webpage and share it with someone else	3
12	2014-07-13 10:13:28.201283-07	2014-07-13 10:13:28.201315-07	1	*italics*  \r\n**bold**  \r\n`blockquote`  \r\n\r\n    code\r\n    more code\r\n    abcdefghij\r\n	1
13	2014-07-13 10:14:50.687455-07	2014-07-13 10:14:50.687487-07	1	modify web pages and share  \r\n*italics*\r\n**bold**  \r\nhere is a `blockquote` back there\r\n\r\n    one\r\n    two\r\n    three\r\n    four	3
14	2014-07-13 11:10:40.338493-07	2014-07-13 11:10:40.338524-07	1	asdf\r\nasdf  \r\nadf	1
15	2014-07-13 13:41:56.210638-07	2014-07-13 13:41:56.210671-07	1	**bold** *italics*	3
16	2014-07-13 13:44:10.27414-07	2014-07-13 13:44:10.274171-07	1	**bold** *italics*\r\n\r\n    code1\r\n    code2\r\n\r\n    codeA\r\n    codeB	1
17	2014-07-13 13:50:35.620104-07	2014-07-13 13:50:35.62014-07	1		3
18	2014-07-13 13:50:57.024039-07	2014-07-13 13:50:57.024076-07	1		1
19	2014-07-13 13:51:03.956153-07	2014-07-13 13:51:03.956186-07	1		1
20	2014-07-13 13:51:08.671359-07	2014-07-13 13:51:08.671392-07	1		3
21	2014-07-14 12:08:33.202487-07	2014-07-14 12:08:33.202517-07	1		1
22	2014-07-14 12:10:08.141795-07	2014-07-14 12:10:08.141825-07	1		1
23	2014-07-14 12:10:13.229729-07	2014-07-14 12:10:13.22976-07	1		1
24	2014-07-14 18:07:18.669342-07	2014-07-14 18:07:18.669375-07	1		1
25	2014-07-14 18:07:27.298377-07	2014-07-14 18:07:27.298407-07	1		6
26	2014-07-14 18:08:15.993435-07	2014-07-14 18:08:15.993466-07	1	ORM high-level, via Python objects.\r\nExpression Language low-level; SQL-like commands	7
27	2014-07-16 09:55:44.698735-07	2014-07-16 09:55:44.698767-07	1		6
28	2014-07-16 09:55:57.354251-07	2014-07-16 09:55:57.35428-07	1		11
29	2014-07-16 09:56:06.701018-07	2014-07-16 09:56:06.701048-07	1		18
30	2014-07-18 02:43:52.570532-07	2014-07-18 02:43:52.570577-07	1		18
31	2014-07-18 02:44:18.960855-07	2014-07-18 02:44:18.960886-07	1		18
32	2014-07-18 02:44:36.136834-07	2014-07-18 02:44:36.136868-07	1		23
33	2014-08-17 09:13:53.31824-07	2014-08-17 09:13:53.318275-07	1	    SELECT *, orgs.name FROM users\r\n      JOIN orgs ON users.org_id = orgs.id;\r\n    \r\n    -- or\r\n    \r\n    SELECT * FROM users, orgs \r\n      WHERE users.org_id = orgs.id;	24
34	2014-08-17 09:16:38.024671-07	2014-08-17 09:16:38.024706-07	1	DELETE FROM mytable;	45
35	2014-08-17 09:19:40.435052-07	2014-08-17 09:19:40.435105-07	1	I looked at both of them.  Nice!	4
36	2014-08-17 09:20:17.43277-07	2014-08-17 09:20:17.432803-07	1	    xpath\r\n    css\r\n\r\n	5
37	2014-08-17 09:22:06.442834-07	2014-08-17 09:22:06.442867-07	1	    CREATE TABLE mytable \r\n      (my_enum my_enum_type);\r\n    \r\n    CREATE ...	8
38	2014-08-17 09:22:26.895214-07	2014-08-17 09:22:26.895248-07	1		9
39	2014-08-17 09:23:09.705873-07	2014-08-17 09:23:09.705927-07	1	The `echo=True` causes it to emit all SQL statements to stdout.	12
40	2014-08-17 09:24:23.761351-07	2014-08-17 09:24:23.76141-07	1	postgres:my_database:my_username:my_password:hostname:port	13
41	2014-08-17 09:25:56.304531-07	2014-08-17 09:25:56.304583-07	1	    cat asdfasdf 2> /tmp/stderr	14
42	2014-08-17 09:26:36.681842-07	2014-08-17 09:26:36.681929-07	1	1. one\r\n1. two\r\n\r\n<p>\r\n    my code here\r\n\r\nI don't know!	15
43	2014-08-17 09:27:11.00034-07	2014-08-17 09:27:11.000375-07	1	create_engine(..., echo=True)	16
44	2014-08-17 09:27:35.434543-07	2014-08-17 09:27:35.434575-07	1	\\d mytable	17
45	2014-08-17 09:40:25.487833-07	2014-08-17 09:40:25.487865-07	1	Done.  Nice!	19
46	2014-08-18 08:56:05.928173-07	2014-08-18 08:56:05.928223-07	1	re-express, agreement, learned	20
47	2014-08-18 08:56:28.168653-07	2014-08-18 08:56:28.168704-07	1		21
48	2014-08-18 08:56:48.335453-07	2014-08-18 08:56:48.335486-07	1		22
49	2014-08-18 08:57:49.606211-07	2014-08-18 08:57:49.606242-07	1		25
50	2014-08-18 08:58:06.932392-07	2014-08-18 08:58:06.932425-07	1		26
51	2014-08-18 08:58:22.334546-07	2014-08-18 08:58:22.334579-07	1		27
52	2014-08-18 08:58:43.954374-07	2014-08-18 08:58:43.954407-07	1		28
53	2014-08-18 08:59:18.889796-07	2014-08-18 08:59:18.889827-07	1		29
54	2014-08-25 15:10:02.103189-07	2014-08-25 15:10:02.10322-07	1		30
55	2014-08-25 15:16:46.803149-07	2014-08-25 15:16:46.803182-07	1	    mom.__init__.py\r\n      create_engine(..., echo=True)\r\n\r\nor\r\n\r\n    .test.conf\r\n        [mom]\r\n        echo=True	31
56	2014-08-25 15:17:31.64239-07	2014-08-25 15:17:31.64242-07	1		32
57	2014-08-25 15:18:08.842336-07	2014-08-25 15:18:08.842367-07	1	single quotes: strings\r\n\r\ndouble quotes: system things (e.g., column name)	33
58	2014-08-25 15:18:34.048425-07	2014-08-25 15:18:34.048457-07	1		34
59	2014-08-25 15:19:19.914796-07	2014-08-25 15:19:19.914827-07	1	I feel __ when you __ because __.  Would you be willing to a, b, or c?	35
60	2014-08-25 15:20:33.89485-07	2014-08-25 15:20:33.894881-07	1	Fixed mindset and growth mindset.	36
61	2014-08-25 15:21:04.72612-07	2014-08-25 15:21:04.726153-07	1	200 acres?	37
62	2014-08-25 15:21:22.237994-07	2014-08-25 15:21:22.238039-07	1	Duration > 1 sec.	38
63	2014-08-25 15:21:58.659852-07	2014-08-25 15:21:58.659887-07	1	peer authentication -- logged-in as that user  \r\npassword authentication -- provide a password	39
64	2014-08-25 15:23:07.162962-07	2014-08-25 15:23:07.162993-07	1	    create_all()\r\n    drop_all()	40
65	2014-08-25 15:23:18.953459-07	2014-08-25 15:23:18.953491-07	1		41
66	2014-08-25 15:23:42.116039-07	2014-08-25 15:23:42.116071-07	1	create_engine(..., echo='debug')	42
67	2014-08-25 15:24:07.274098-07	2014-08-25 15:24:07.274129-07	1	Only in the session in which they are created.  Not by other sessions by the same user.	43
68	2014-08-25 15:24:23.906921-07	2014-08-25 15:24:23.906952-07	1	\\x	44
69	2014-08-25 15:25:09.944566-07	2014-08-25 15:25:09.944597-07	1	    RETURNING *\r\n\r\ne.g.,\r\n\r\n    DELETE * FROM my_table RETURNING *;\r\n\r\n	46
70	2014-08-25 15:25:21.587981-07	2014-08-25 15:25:21.588012-07	1	\\x auto	47
71	2014-08-25 15:25:31.33399-07	2014-08-25 15:25:31.334031-07	1		48
72	2014-08-25 15:26:24.215864-07	2014-08-25 15:26:24.215894-07	1	    foo = session.execute('select * from my_table')\r\n    foo.num_rows	51
73	2014-08-25 15:26:38.214641-07	2014-08-25 15:26:38.214675-07	1		52
74	2014-08-25 15:27:11.084873-07	2014-08-25 15:27:11.084903-07	1	readlines\r\n	53
75	2014-08-25 15:27:39.374716-07	2014-08-25 15:27:39.374749-07	1	-- double dashes\r\n\r\nor\r\n\r\n/* \r\n  foo\r\n  bar\r\n*/	54
76	2014-08-25 15:28:19.026131-07	2014-08-25 15:28:19.026162-07	1	select distinct(col1) where count(col1) >= 2;	55
77	2014-08-25 15:36:39.515763-07	2014-08-25 15:36:39.515793-07	1	done!	56
78	2014-08-26 17:08:41.032085-07	2014-08-26 17:08:41.032118-07	1	done	57
79	2014-08-26 17:08:53.554393-07	2014-08-26 17:08:53.554427-07	1		58
80	2014-08-26 17:09:18.747385-07	2014-08-26 17:09:18.747416-07	1		59
81	2014-08-26 17:09:40.737323-07	2014-08-26 17:09:40.737382-07	1	combine	60
82	2014-08-29 18:11:09.751644-07	2014-08-29 18:11:09.751702-07	1	    CREATE TEMP TABLE my_table AS\r\n      SELECT * FROM other_table;	61
83	2014-08-29 18:12:25.757234-07	2014-08-29 18:12:25.757283-07	1	DROP COLUMN my_column FROM my_table;	62
84	2014-08-29 18:13:23.069071-07	2014-08-29 18:13:23.069103-07	1	gUw	63
85	2014-08-29 18:17:06.81379-07	2014-08-29 18:17:06.813848-07	1	It is a boolean variable returned by feedparser indicating if the feed is malformed.	64
86	2014-08-29 18:17:49.480732-07	2014-08-29 18:17:49.480763-07	1	poll_stats indicates the last 10 polls of a feed.  For each poll it indicates the return code, the date, and ___.	65
87	2014-08-29 18:18:07.853793-07	2014-08-29 18:18:07.853826-07	1	\\pset NULL __null__	66
88	2014-08-29 18:18:19.57869-07	2014-08-29 18:18:19.578724-07	1		67
89	2014-08-29 18:18:35.512316-07	2014-08-29 18:18:35.512349-07	1	!c = 3	68
\.


--
-- Name: questions_attempt_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quizme
--

SELECT pg_catalog.setval('questions_attempt_id_seq', 89, true);


--
-- Data for Name: questions_hint; Type: TABLE DATA; Schema: public; Owner: quizme
--

COPY questions_hint (id, datetime_added, datetime_updated, user_id, answer_id, hint) FROM stdin;
\.


--
-- Name: questions_hint_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quizme
--

SELECT pg_catalog.setval('questions_hint_id_seq', 1, false);


--
-- Data for Name: questions_question; Type: TABLE DATA; Schema: public; Owner: quizme
--

COPY questions_question (id, datetime_added, datetime_updated, user_id, question, answer_id) FROM stdin;
1	2014-07-07 18:00:58.433961-07	2014-07-07 18:00:58.433994-07	1	What is sometimes a problem with having a local pip2pi package repository and rsync'ing to it?	1
3	2014-07-07 18:15:42.314139-07	2014-07-13 08:26:24.891754-07	1	What does the X-Ray Goggles website by Mozilla allow you to do?  \r\n[https://goggles.webmaker.org][1]\r\n\r\n\r\n  [1]: https://goggles.webmaker.org	3
2	2014-07-07 18:10:02.574012-07	2014-07-13 08:31:28.548732-07	1	What does this code do?\r\n\r\n    <script>\r\n      function clickHandler() {\r\n         alert("Hello, World!");\r\n      }\r\n    </script>\r\n    <span onclick="clickHandler();">Click Here</span>	2
4	2014-07-13 15:39:14.172617-07	2014-07-13 15:39:14.172649-07	1	Glance at this PDF that shows the ways in which you can select elements in Selenium.\r\n\r\n[https://www.simple-talk.com/dotnet/.net-framework/xpath,-css,-dom-and-selenium-the-rosetta-stone/][1]\r\n\r\n\r\n  [1]: https://www.simple-talk.com/dotnet/.net-framework/xpath,-css,-dom-and-selenium-the-rosetta-stone/	\N
5	2014-07-13 15:40:57.799444-07	2014-07-13 15:40:57.799492-07	1	What are the 8 Selenium locators that can be used to select elements?	4
6	2014-07-14 08:23:29.775086-07	2014-07-14 08:23:29.77518-07	1	What is a **unit of work** in SQLAlchemy?	5
7	2014-07-14 08:29:44.644649-07	2014-07-14 08:29:44.644681-07	1	In SQLAlchemy, what is the difference between the **ORM** and the **SQLAlchemy Expression Language**?	6
8	2014-07-14 10:58:20.303263-07	2014-07-14 10:58:20.303294-07	1	In Postgres, how do you create a table with a column that is an enumerated type?	7
9	2014-07-14 11:02:19.909455-07	2014-07-14 11:02:19.909495-07	1	In Postgres, how do you list the data types? (user-defined, system-defined, enums, ...)	8
10	2014-07-14 12:40:29.154814-07	2014-07-14 12:40:29.15486-07	1	What version of SQLAlchemy is Trapit using?	9
11	2014-07-14 18:12:20.852488-07	2014-07-14 18:12:20.852518-07	1	What is the code to construct the interface to communicate with the ORM?	10
12	2014-07-14 18:13:35.411567-07	2014-07-14 18:13:35.411605-07	1	What does this code do?\r\n\r\n    from sqlalchemy import create_engine\r\n    from sqlalchemy.org import sessionmaker\r\n    \r\n    engine = create_engine('postgres://postgres:postgres@localhost/%s' % DB, echo=True)\r\n    Session = sessionmaker(bind=engine)\r\n    session = Session()	11
13	2014-07-15 06:55:49.839318-07	2014-07-15 06:55:49.839348-07	1	What does the SQLAlchemy PostgreSQL connect string look like?  How many different components are there?	12
14	2014-07-15 07:03:05.197272-07	2014-07-15 07:03:05.197303-07	1	How do you redirect only stderr to a file?	13
15	2014-07-15 07:41:51.17553-07	2014-07-15 07:41:51.175562-07	1	In Markdown, how do you add code after a list?	14
16	2014-07-15 08:16:57.293155-07	2014-07-15 08:16:57.293187-07	1	In SQLAlchemy, how do you enable logging to show all the SQL commands?	15
17	2014-07-15 08:51:17.859867-07	2014-07-15 08:51:17.859899-07	1	In psql, how do you show the data definition (columns, etc.) for a table?	16
18	2014-07-15 12:02:50.214161-07	2014-07-15 12:02:50.214192-07	1	Review the sqlite data types:  http://www.sqlite.org/datatype3.html	17
20	2014-07-15 15:15:19.659331-07	2014-07-15 15:15:19.659368-07	1	Daniel Dennet on how to compose a successful critical commentary\r\n\r\n1. You should attempt to re-express your target’s position so clearly, vividly, and fairly that your target says, “Thanks, I wish I’d thought of putting it that way.\r\n\r\n2. You should list any points of agreement (especially if they are not matters of general or widespread agreement).\r\n\r\n3. You should mention anything you have learned from your target.\r\n\r\n4. Only then are you permitted to say so much as a word of rebuttal or criticism.\r\n\r\n- Daniel Dennet	18
21	2014-07-16 09:34:14.619876-07	2014-07-16 09:34:14.619907-07	1	How can you get the doc_id and trap_id for a document from the UI?	19
22	2014-07-16 14:40:06.035516-07	2014-07-16 14:40:06.03555-07	1	What is a materialized view in Postgres?	20
23	2014-07-18 01:26:26.341462-07	2014-07-18 01:26:26.341516-07	1	Difference between LEFT/RIGHT/INNER/OUTER JOINS\r\n\r\nExample: Lets say you have a Students table (100 students, 70 of which have lockers), and a Lockers table (50 lockers, 40 with at least one student).\r\n\r\nEach student can be assigned to a locker, so there is a "LockerNumber" column in the student table. More than one student could potentially be in a single locker, but especially at the begining of the school year, you may have some incoming students without lockers and some lockers that have no students assigned.\r\n\r\nFor the sake of this example, lets say you have 100 students, 70 of which have lockers. You have a total of 50 lockers, 40 of which have at least 1 student.\r\n\r\nDescribe each of the following:\r\n\r\n1. INNER JOIN\r\n1. LEFT OUTER JOIN\r\n1. RIGHT OUTER JOIN\r\n1. FULL OUTER JOIN\r\n1. CROSS JOIN\r\n\r\nhttp://stackoverflow.com/questions/448023/what-is-the-difference-between-left-right-outer-and-inner-joins	21
24	2014-07-18 02:20:13.139814-07	2014-07-18 02:20:13.139863-07	1	Suppose you have these tables:\r\n\r\n    users table:  name  org_id\r\n    orgs table:   name  id\r\n\r\nDo a query to select all users and show the name of their associated org.	22
25	2014-07-18 04:30:34.211807-07	2014-07-18 04:30:34.21188-07	1	How do you change a git repository to use ssh instead of https for it's authentication with origin?	23
26	2014-07-18 05:05:19.564125-07	2014-07-18 05:05:19.564163-07	1	In SQLAlchemy, how do you create a "last_modified" column that automatically gets updated when a record is updated?	24
27	2014-07-18 07:55:26.239846-07	2014-07-18 07:55:26.239878-07	1	How do you tell nosetests to show logging output, even if the test passes?	25
28	2014-07-21 22:16:32.953269-07	2014-07-21 22:16:32.95333-07	1	In SQLAlchemy, what is the term for describing the process of creating an instance of an object, adding some relations to it, and those relations automatically added to the session?	26
29	2014-07-22 15:30:26.754095-07	2014-07-22 15:30:26.754124-07	1	In SQLAlchemy, what is the difference between a classical mapping and the declarative system?	27
30	2014-07-22 17:25:09.883728-07	2014-07-22 17:25:09.883759-07	1	In SQLAlchemy, what is the difference between the SQL Expression Language and the ORM?	28
31	2014-07-22 20:58:17.741962-07	2014-07-22 20:58:17.741993-07	1	In the Trapit code, how do you enable SQLAlchemy to show all SQL statements?	29
32	2014-07-24 08:01:05.334973-07	2014-07-24 08:01:05.335005-07	1	In Unix, how do you tell **less** to exit without clearing the screen of the contents of **less**?	30
33	2014-07-30 13:56:30.338499-07	2014-07-30 13:56:30.338529-07	1	In Postgres, what is the difference between single quotes and double quotes?	31
34	2014-07-31 08:14:13.341162-07	2014-07-31 08:14:13.341193-07	1	Whenever you are feeling less than good, if you will stop and say, Nothing is more important than that I feel good—I want to find a reason now to feel good, you will find an improved thought.\r\n\r\nAnytime you feel negative emotion, you are in the mode of resisting something that you want, and that resistance takes its toll on you. It takes its toll on your physical body, and it takes its toll on the amount of wonderful things that you are allowing to come into your experience.  \r\n\r\n---Abraham  \r\nExcerpted from the workshop: Money and the Law of Attraction on August 31, 2008\r\n	\N
35	2014-07-31 11:43:42.073859-07	2014-07-31 11:43:42.0739-07	1	What is a non-codependent way of expressing an emotion?	32
36	2014-07-31 11:51:32.939704-07	2014-07-31 11:51:32.939737-07	1	What are the two mindsets that Carol Dweck has identified?	33
37	2014-08-01 07:51:00.57229-07	2014-08-01 07:51:00.572346-07	1	How large is PCC Sylvania (in acres)?	34
38	2014-08-01 09:20:33.611972-07	2014-08-01 09:20:33.612003-07	1	What setting is causing SQL statements to be logged in Higgs for Trapit?	35
39	2014-08-01 15:08:02.399365-07	2014-08-01 15:08:02.399396-07	1	In Postgresql, what is the difference between peer authentication and password authentication?  What do you do to be able to login with psql as a different user?	36
40	2014-08-01 16:07:23.360686-07	2014-08-01 16:07:23.360717-07	1	What are the sqlalchemy methods for creating and dropping all tables that are described in all the models?	37
41	2014-08-04 10:13:56.305084-07	2014-08-04 10:13:56.305119-07	1	How do you configure PostgreSQL to terminate statements that take longer than n milliseconds?	38
42	2014-08-04 13:58:22.748532-07	2014-08-04 13:58:22.748563-07	1	How do you tell SQLAlchemy to show all the rows returned in the log?	39
43	2014-08-04 14:20:48.491125-07	2014-08-04 14:20:48.491156-07	1	What is the visibility of TEMP tables in Postgres?	40
44	2014-08-04 15:33:48.5532-07	2014-08-04 15:33:48.553231-07	1	How do I tell psql to output rows in vertical format instead of horizontal format?	41
45	2014-08-05 11:00:29.68224-07	2014-08-05 11:00:29.68227-07	1	How to delete all rows from a table in SQL?	42
46	2014-08-05 11:02:43.674624-07	2014-08-05 11:02:43.674659-07	1	How do you show the rows that were deleted in SQL when doing a DELETE?	43
47	2014-08-05 12:06:05.533109-07	2014-08-05 12:06:05.533141-07	1	In `psql`, how do you tell it to format the output horizontally if there is enough room, and if not, format it vertically?	44
48	2014-08-06 14:32:04.774896-07	2014-08-06 14:32:04.774926-07	1	How to connect with psql to a database using a connection string?	45
49	2014-08-07 10:09:18.987071-07	2014-08-07 10:09:18.987104-07	1	What is OAuth?	46
50	2014-08-07 10:18:06.531259-07	2014-08-07 10:18:06.531292-07	1	What is an access token?	47
51	2014-08-12 08:56:24.415376-07	2014-08-12 08:56:24.415408-07	1	In SQLAlchemy, when doing an execute(), how do you show how many rows were affected by the select/insert/update/delete?	48
52	2014-08-12 17:27:02.049463-07	2014-08-12 17:27:02.049502-07	1	In Postgres, how do you make a copy of a database?	49
53	2014-08-12 21:13:28.392846-07	2014-08-12 21:13:28.392897-07	1	In Postgres's `psql`, what is used for editing the commands and how do you change it to vi mode?	50
54	2014-08-12 23:14:25.144007-07	2014-08-12 23:14:25.144038-07	1	In Postgresql SQL, what is the syntax for comments?	51
55	2014-08-13 14:48:07.735149-07	2014-08-13 14:48:07.73518-07	1	How to select all values for column1 that have 2 or more rows?	52
19	2014-07-15 14:37:01.625205-07	2014-08-17 09:28:17.764288-07	1	Review the Python wiki: [https://wiki.python.org/moin/][1]\r\n\r\n\r\n  [1]: https://wiki.python.org/moin/	\N
56	2014-08-17 09:32:34.683211-07	2014-08-17 09:32:34.683245-07	1	Review this page: [http://pythonhackers.com/open-source/][1] (the top 400 Python projects on GitHub)\r\n\r\n\r\n  [1]: http://pythonhackers.com/open-source/	\N
57	2014-08-17 09:33:25.588246-07	2014-08-17 09:33:25.588279-07	1	Review this page: [http://pypi-ranking.info/alltime][1]\r\n\r\n\r\n  [1]: http://pypi-ranking.info/alltime	\N
58	2014-08-19 08:04:55.295133-07	2014-08-19 08:04:55.295164-07	1	When are columns allowed / not allowed in a select for a `GROUP BY` in Postgres?	53
59	2014-08-19 08:09:18.942672-07	2014-08-19 08:09:18.942731-07	1	What does `GROUP BY 1` mean?	54
60	2014-08-19 08:26:48.793084-07	2014-08-19 08:26:48.793136-07	1	What is a synonym for the verb `aggregate`?	55
61	2014-08-19 10:42:38.450132-07	2014-08-19 10:42:38.450163-07	1	In Postgres, how do you create a temporary table from the results of a query?	56
62	2014-08-19 10:49:07.07329-07	2014-08-19 10:49:07.073322-07	1	How do you remove a column from a table?	57
63	2014-08-19 11:34:50.535325-07	2014-08-19 11:34:50.535356-07	1	How do you capitalize an entire word?	58
64	2014-08-19 12:11:58.463007-07	2014-08-19 12:11:58.463038-07	1	What is `bozo` in Zoidberg?	59
65	2014-08-19 12:34:11.345991-07	2014-08-19 12:34:11.346022-07	1	What is the `poll_stats` field for a feed?	60
66	2014-08-20 11:59:06.621493-07	2014-08-20 11:59:06.621524-07	1	How to display NULL values in psql with something other than just space?	61
67	2014-08-23 15:02:38.316053-07	2014-08-23 15:02:38.316085-07	1	How do you disable all logging with nosetests?	62
68	2014-08-23 15:20:14.772943-07	2014-08-23 15:20:14.772975-07	1	In pdb, how do you tell it to execute the inputted code where the code conflicts with a pdb command (e.g., `c = 3` (`c` conflicts with the `c` pdb command for `continue`)	63
69	2014-08-25 15:33:04.751767-07	2014-08-25 15:33:04.751797-07	1	Review this page of  simple programming projects / code katas and solutions:\r\n\r\n[https://github.com/karan/Projects][1]\r\n\r\n\r\n  [1]: https://github.com/karan/Projects	\N
70	2014-08-25 15:35:24.467675-07	2014-08-25 15:35:24.467706-07	1	Review this page, which is a list of Python frameworks, libraries, and software: [https://github.com/vinta/awesome-python][1]\r\n\r\n\r\n  [1]: https://github.com/vinta/awesome-python	\N
71	2014-08-25 15:37:09.532395-07	2014-08-25 15:37:09.532427-07	1	Review this page: [http://docs.python-guide.org/en/latest/][1]\r\n\r\n\r\n  [1]: http://docs.python-guide.org/en/latest/	\N
72	2014-08-25 15:40:26.991721-07	2014-08-25 15:40:26.991756-07	1	Review this page of Python patterns: [https://github.com/faif/python-patterns][1]\r\n\r\n\r\n  [1]: https://github.com/faif/python-patterns	\N
73	2014-08-26 12:28:09.69536-07	2014-08-26 12:28:26.305346-07	1	What would you lose if _____?\r\n\r\ne.g., “What would you lose if the cancer was healed?” She finally replied:\r\n“I would be lonely again”.\r\n\r\nSecondary gain may be defined as ‘a hidden benefit that is derived from the problem’.\r\n\r\n[http://benralston.blogspot.com/2011/08/reason-why-most-alternative-healing.html][1]\r\n\r\n\r\n  [1]: http://benralston.blogspot.com/2011/08/reason-why-most-alternative-healing.html	\N
74	2014-08-26 12:37:14.966766-07	2014-08-26 12:37:14.966823-07	1	Visit this site: [http://www.quora.com/What-are-the-top-10-websites-computer-science-students-must-visit][1]\r\n\r\n\r\n  [1]: http://www.quora.com/What-are-the-top-10-websites-computer-science-students-must-visit	\N
75	2014-08-26 12:42:12.062369-07	2014-08-26 12:42:12.062406-07	1	Visit: http://www.tutorialspoint.com/	\N
76	2014-08-26 12:44:01.571733-07	2014-08-26 12:44:01.571765-07	1	Visit this site: [http://noexcuselist.com/][1]\r\n\r\n\r\n  [1]: http://noexcuselist.com/	\N
77	2014-08-26 12:46:45.165758-07	2014-08-26 12:46:45.165789-07	1	Visit: [http://www.spoj.com/][1]\r\n\r\n\r\n  [1]: http://www.spoj.com/	\N
78	2014-08-26 12:49:27.443576-07	2014-08-26 12:49:27.443607-07	1	Visit: [http://www.quora.com/What-are-5-essential-skills-any-Web-Developer-should-have][1]\r\n\r\n\r\n  [1]: http://www.quora.com/What-are-5-essential-skills-any-Web-Developer-should-have	\N
79	2014-08-29 15:01:04.241332-07	2014-08-29 15:01:04.241364-07	1	How do you tell nosetests to run all the tests that failed in the last test run?	64
80	2014-08-29 17:28:27.138865-07	2014-08-29 17:33:42.267249-07	1	For the Elzar behavioral tests, where is the `self.get_api()` method defined?	65
81	2014-08-29 17:47:31.530374-07	2014-08-29 17:47:31.530426-07	1	In the following Elzar test code, where is `api.users()` defined?\r\n\r\n    def test_walk(self):\r\n        org = self.standard_org(1)\r\n        api = self.get_api(org.testusers['admin1'])\r\n        resp = api.users()	66
82	2014-08-29 18:37:01.126626-07	2014-08-29 18:37:01.126658-07	1	What does the following query do:\r\n    SELECT DISTINCT name FROM my_table;	67
83	2014-08-29 18:42:59.60225-07	2014-08-29 18:42:59.60228-07	1	Create a query to find the number of rows for each "name".	68
84	2014-08-31 19:57:15.738346-07	2014-08-31 19:57:15.738384-07	1	Which popular video game was written by a single developer in assembly?\r\n\r\n1. name of the game?\r\n1. name of the developer?\r\n1. year released?	69
85	2014-09-02 10:46:02.031045-07	2014-09-02 10:46:02.031076-07	1	What is `selector` in Elzar?	70
86	2014-09-02 11:54:44.079917-07	2014-09-02 11:54:44.079949-07	1	In `val`, what is the effect of adding `object : object` into a schema?  \r\ne.g.,\r\n\r\n    from val import Schema\r\n    \r\n    schema = Schema({'foo' : str, object : object})	71
\.


--
-- Name: questions_question_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quizme
--

SELECT pg_catalog.setval('questions_question_id_seq', 86, true);


--
-- Data for Name: questions_questiontag; Type: TABLE DATA; Schema: public; Owner: quizme
--

COPY questions_questiontag (id, datetime_added, datetime_updated, user_id, question_id, tag_id, enabled) FROM stdin;
1	2014-07-07 18:00:58.437723-07	2014-07-07 18:00:58.437754-07	1	1	1	t
2	2014-07-07 18:10:02.576119-07	2014-07-07 18:10:02.576152-07	1	2	2	t
3	2014-07-07 18:15:42.320478-07	2014-07-07 18:15:42.320534-07	1	3	3	t
4	2014-07-13 15:39:14.176486-07	2014-07-13 15:39:14.17651-07	1	4	4	t
5	2014-07-13 15:40:57.808237-07	2014-07-13 15:40:57.808263-07	1	5	4	t
6	2014-07-14 08:23:29.78088-07	2014-07-14 08:23:29.780922-07	1	6	5	t
7	2014-07-14 08:29:44.6462-07	2014-07-14 08:29:44.646225-07	1	7	5	t
8	2014-07-14 10:58:20.309584-07	2014-07-14 10:58:20.309628-07	1	8	6	t
9	2014-07-14 11:02:19.911429-07	2014-07-14 11:02:19.911463-07	1	9	6	t
10	2014-07-14 18:12:20.858229-07	2014-07-14 18:12:20.858262-07	1	11	5	t
11	2014-07-14 18:13:35.413541-07	2014-07-14 18:13:35.413575-07	1	12	5	t
12	2014-07-15 06:55:49.843653-07	2014-07-15 06:55:49.843683-07	1	13	5	t
13	2014-07-15 06:55:49.850179-07	2014-07-15 06:55:49.850213-07	1	13	6	t
14	2014-07-15 07:03:05.198745-07	2014-07-15 07:03:05.198772-07	1	14	7	t
15	2014-07-15 07:03:05.199667-07	2014-07-15 07:03:05.19969-07	1	14	8	t
16	2014-07-15 07:41:51.17715-07	2014-07-15 07:41:51.177174-07	1	15	9	t
17	2014-07-15 08:16:57.297717-07	2014-07-15 08:16:57.297751-07	1	16	5	t
18	2014-07-15 08:51:17.864081-07	2014-07-15 08:51:17.864117-07	1	17	6	t
19	2014-07-15 12:02:50.218133-07	2014-07-15 12:02:50.218161-07	1	18	10	t
20	2014-07-15 14:37:01.632009-07	2014-07-15 14:37:01.632055-07	1	19	11	t
21	2014-07-15 15:15:19.663416-07	2014-07-15 15:15:19.663444-07	1	20	12	t
22	2014-07-16 09:34:14.625437-07	2014-07-16 09:34:14.625472-07	1	21	1	t
23	2014-07-16 14:40:06.039876-07	2014-07-16 14:40:06.039907-07	1	22	6	t
24	2014-07-18 01:26:26.346589-07	2014-07-18 01:26:26.346626-07	1	23	13	t
25	2014-07-18 02:20:13.144036-07	2014-07-18 02:20:13.144068-07	1	24	13	t
26	2014-07-18 04:30:34.218431-07	2014-07-18 04:30:34.218488-07	1	25	14	t
27	2014-07-18 05:05:19.570723-07	2014-07-18 05:05:19.570761-07	1	26	5	t
28	2014-07-18 07:55:26.245437-07	2014-07-18 07:55:26.245472-07	1	27	11	t
29	2014-07-18 07:55:26.251982-07	2014-07-18 07:55:26.252023-07	1	27	15	t
30	2014-07-21 22:16:32.959524-07	2014-07-21 22:16:32.959563-07	1	28	5	t
31	2014-07-22 15:30:26.759089-07	2014-07-22 15:30:26.759122-07	1	29	5	t
32	2014-07-22 17:25:09.890403-07	2014-07-22 17:25:09.890449-07	1	30	5	t
33	2014-07-22 20:58:17.747473-07	2014-07-22 20:58:17.747508-07	1	31	1	t
34	2014-07-24 08:01:05.340288-07	2014-07-24 08:01:05.340347-07	1	32	16	t
35	2014-07-30 13:56:30.342975-07	2014-07-30 13:56:30.343001-07	1	33	6	t
36	2014-07-31 08:14:13.34764-07	2014-07-31 08:14:13.347675-07	1	34	17	t
37	2014-07-31 11:43:42.078043-07	2014-07-31 11:43:42.078076-07	1	35	18	t
38	2014-07-31 11:51:32.941281-07	2014-07-31 11:51:32.941309-07	1	36	19	t
39	2014-08-01 07:51:00.578368-07	2014-08-01 07:51:00.578403-07	1	37	20	t
40	2014-08-01 09:20:33.616688-07	2014-08-01 09:20:33.616715-07	1	38	1	t
41	2014-08-01 09:20:33.623622-07	2014-08-01 09:20:33.623657-07	1	38	6	t
42	2014-08-01 15:08:02.405634-07	2014-08-01 15:08:02.405681-07	1	39	6	t
43	2014-08-01 16:07:23.366027-07	2014-08-01 16:07:23.36606-07	1	40	5	t
44	2014-08-04 10:13:56.309874-07	2014-08-04 10:13:56.309908-07	1	41	6	t
45	2014-08-04 13:58:22.755521-07	2014-08-04 13:58:22.755555-07	1	42	5	t
46	2014-08-04 14:20:48.496464-07	2014-08-04 14:20:48.496492-07	1	43	6	t
47	2014-08-04 15:33:48.556177-07	2014-08-04 15:33:48.556212-07	1	44	6	t
48	2014-08-05 11:00:29.687194-07	2014-08-05 11:00:29.687223-07	1	45	13	t
49	2014-08-05 11:02:43.676314-07	2014-08-05 11:02:43.676339-07	1	46	13	t
50	2014-08-05 12:06:05.539492-07	2014-08-05 12:06:05.539526-07	1	47	6	t
51	2014-08-06 14:32:04.780651-07	2014-08-06 14:32:04.780685-07	1	48	6	t
52	2014-08-12 08:56:24.419816-07	2014-08-12 08:56:24.419842-07	1	51	5	t
53	2014-08-12 17:27:02.054373-07	2014-08-12 17:27:02.054402-07	1	52	6	t
54	2014-08-12 21:13:28.398144-07	2014-08-12 21:13:28.398179-07	1	53	6	t
55	2014-08-12 23:14:25.148908-07	2014-08-12 23:14:25.148934-07	1	54	6	t
56	2014-08-12 23:14:25.155786-07	2014-08-12 23:14:25.155822-07	1	54	13	t
57	2014-08-13 14:48:07.740103-07	2014-08-13 14:48:07.740132-07	1	55	13	t
58	2014-08-13 14:48:07.770605-07	2014-08-13 14:48:07.770639-07	1	55	6	t
59	2014-08-17 09:32:34.688902-07	2014-08-17 09:32:34.688965-07	1	56	11	t
60	2014-08-17 09:33:25.594054-07	2014-08-17 09:33:25.594114-07	1	57	11	t
61	2014-08-19 08:04:55.30136-07	2014-08-19 08:04:55.301393-07	1	58	6	t
62	2014-08-19 08:09:18.946724-07	2014-08-19 08:09:18.946758-07	1	59	13	t
63	2014-08-19 08:09:18.951289-07	2014-08-19 08:09:18.951347-07	1	59	6	t
64	2014-08-19 08:26:48.798222-07	2014-08-19 08:26:48.798249-07	1	60	21	t
65	2014-08-19 10:42:38.455711-07	2014-08-19 10:42:38.455745-07	1	61	6	t
66	2014-08-19 10:42:38.462245-07	2014-08-19 10:42:38.462279-07	1	61	13	t
67	2014-08-19 10:49:07.074848-07	2014-08-19 10:49:07.074873-07	1	62	6	t
68	2014-08-19 10:49:07.0759-07	2014-08-19 10:49:07.075928-07	1	62	13	t
69	2014-08-19 11:34:50.53818-07	2014-08-19 11:34:50.538207-07	1	63	22	t
70	2014-08-19 12:11:58.468257-07	2014-08-19 12:11:58.468291-07	1	64	1	t
71	2014-08-19 12:11:58.474515-07	2014-08-19 12:11:58.474552-07	1	64	23	t
72	2014-08-19 12:34:11.350514-07	2014-08-19 12:34:11.350538-07	1	65	1	t
73	2014-08-19 12:34:11.357355-07	2014-08-19 12:34:11.357391-07	1	65	23	t
74	2014-08-20 11:59:06.627291-07	2014-08-20 11:59:06.627335-07	1	66	6	t
75	2014-08-23 15:02:38.321878-07	2014-08-23 15:02:38.321908-07	1	67	11	t
76	2014-08-23 15:20:14.778593-07	2014-08-23 15:20:14.778628-07	1	68	11	t
77	2014-08-25 15:33:04.759086-07	2014-08-25 15:33:04.759131-07	1	69	11	t
78	2014-08-25 15:33:04.766046-07	2014-08-25 15:33:04.76608-07	1	69	24	t
79	2014-08-25 15:35:24.469643-07	2014-08-25 15:35:24.469667-07	1	70	11	t
80	2014-08-25 15:37:09.547072-07	2014-08-25 15:37:09.547108-07	1	71	11	t
81	2014-08-25 15:40:26.994259-07	2014-08-25 15:40:26.994287-07	1	72	11	t
82	2014-08-26 12:28:09.708523-07	2014-08-26 12:28:09.708554-07	1	73	19	t
83	2014-08-26 12:37:14.972374-07	2014-08-26 12:37:14.972429-07	1	74	25	t
84	2014-08-26 12:42:12.068997-07	2014-08-26 12:42:12.069032-07	1	75	26	t
85	2014-08-26 12:44:01.575737-07	2014-08-26 12:44:01.575771-07	1	76	26	t
86	2014-08-26 12:46:45.171307-07	2014-08-26 12:46:45.171331-07	1	77	25	t
87	2014-08-26 12:49:27.448784-07	2014-08-26 12:49:27.448818-07	1	78	25	t
88	2014-08-26 12:49:27.453809-07	2014-08-26 12:49:27.453845-07	1	78	27	t
89	2014-08-29 15:01:04.246304-07	2014-08-29 15:01:04.246329-07	1	79	15	t
90	2014-08-29 17:28:27.151244-07	2014-08-29 17:28:27.151271-07	1	80	1	t
91	2014-08-29 17:47:31.535931-07	2014-08-29 17:47:31.535963-07	1	81	1	t
92	2014-08-29 18:37:01.133477-07	2014-08-29 18:37:01.133511-07	1	82	13	t
93	2014-08-29 18:42:59.608031-07	2014-08-29 18:42:59.608066-07	1	83	6	t
94	2014-08-29 18:42:59.614998-07	2014-08-29 18:42:59.615034-07	1	83	13	t
95	2014-08-31 19:57:15.745416-07	2014-08-31 19:57:15.745452-07	1	84	28	t
96	2014-09-02 10:46:02.035896-07	2014-09-02 10:46:02.03593-07	1	85	1	t
97	2014-09-02 10:46:02.041887-07	2014-09-02 10:46:02.041913-07	1	85	29	t
98	2014-09-02 11:54:44.085656-07	2014-09-02 11:54:44.085692-07	1	86	30	t
99	2014-09-02 11:54:44.092048-07	2014-09-02 11:54:44.092073-07	1	86	29	t
100	2014-09-02 11:54:44.092575-07	2014-09-02 11:54:44.092599-07	1	86	1	t
\.


--
-- Name: questions_questiontag_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quizme
--

SELECT pg_catalog.setval('questions_questiontag_id_seq', 100, true);


--
-- Data for Name: questions_quiz; Type: TABLE DATA; Schema: public; Owner: quizme
--

COPY questions_quiz (id, datetime_added, datetime_updated, user_id, name) FROM stdin;
\.


--
-- Name: questions_quiz_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quizme
--

SELECT pg_catalog.setval('questions_quiz_id_seq', 1, false);


--
-- Data for Name: questions_tag; Type: TABLE DATA; Schema: public; Owner: quizme
--

COPY questions_tag (id, datetime_added, datetime_updated, user_id, name) FROM stdin;
1	2014-07-07 17:47:12.927198-07	2014-07-07 17:47:12.927239-07	1	Trapit
2	2014-07-07 18:05:13.523406-07	2014-07-07 18:05:13.52344-07	1	JavaScript
3	2014-07-07 18:14:53.341071-07	2014-07-07 18:14:53.341108-07	1	CSS
4	2014-07-13 15:38:39.875152-07	2014-07-13 15:38:39.87519-07	1	Selenium
5	2014-07-14 08:23:25.551421-07	2014-07-14 08:23:25.551459-07	1	SQLAlchemy
6	2014-07-14 10:57:14.52088-07	2014-07-14 10:57:14.520913-07	1	PostgreSQL
7	2014-07-15 07:01:57.473863-07	2014-07-15 07:01:57.473897-07	1	bash
8	2014-07-15 07:02:11.103656-07	2014-07-15 07:02:11.103693-07	1	sh
9	2014-07-15 07:23:11.384006-07	2014-07-15 07:23:11.384039-07	1	markdown
10	2014-07-15 11:57:05.098004-07	2014-07-15 11:57:05.098041-07	1	sqlite3
11	2014-07-15 14:36:56.131296-07	2014-07-15 14:36:56.131329-07	1	python
12	2014-07-15 15:12:52.233411-07	2014-07-15 15:12:52.233444-07	1	unassimilated
13	2014-07-18 01:18:49.175483-07	2014-07-18 01:18:49.175518-07	1	SQL
14	2014-07-18 04:10:24.343164-07	2014-07-18 04:10:24.3432-07	1	git
15	2014-07-18 07:55:02.882382-07	2014-07-18 07:55:02.88242-07	1	nosetests
16	2014-07-24 07:58:42.428849-07	2014-07-24 07:58:42.428891-07	1	Unix
17	2014-07-31 08:13:23.235133-07	2014-07-31 08:13:23.235188-07	1	Abraham
18	2014-07-31 11:35:10.729828-07	2014-07-31 11:35:10.729863-07	1	codependence
19	2014-07-31 11:44:13.716042-07	2014-07-31 11:44:13.716076-07	1	psychology
20	2014-08-01 07:50:29.097759-07	2014-08-01 07:50:29.097796-07	1	SW Portland
21	2014-08-19 08:23:33.623718-07	2014-08-19 08:23:33.623755-07	1	vocabulary
22	2014-08-19 11:31:51.688528-07	2014-08-19 11:31:51.688564-07	1	vim
23	2014-08-19 12:07:21.895435-07	2014-08-19 12:07:21.895468-07	1	zoidberg
24	2014-08-25 15:32:16.360116-07	2014-08-25 15:32:16.360151-07	1	code katas
25	2014-08-26 12:37:12.310055-07	2014-08-26 12:37:12.310091-07	1	programming
26	2014-08-26 12:42:06.768954-07	2014-08-26 12:42:06.76899-07	1	learning
27	2014-08-26 12:49:21.200625-07	2014-08-26 12:49:21.20066-07	1	web development
28	2014-08-31 19:56:22.818731-07	2014-08-31 19:57:32.071497-07	1	software apps
29	2014-09-02 10:34:39.330856-07	2014-09-02 10:34:39.33089-07	1	elzar
30	2014-09-02 11:47:12.466062-07	2014-09-02 11:47:12.466098-07	1	val
\.


--
-- Name: questions_tag_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quizme
--

SELECT pg_catalog.setval('questions_tag_id_seq', 30, true);


--
-- Data for Name: questions_usertag; Type: TABLE DATA; Schema: public; Owner: quizme
--

COPY questions_usertag (id, user_id, tag_id, enabled) FROM stdin;
13	1	13	t
1	1	1	t
2	1	2	t
3	1	3	t
4	1	4	t
5	1	5	t
6	1	6	t
7	1	7	t
8	1	8	t
9	1	9	t
10	1	10	t
11	1	11	t
12	1	12	t
14	1	14	t
15	1	15	t
16	1	16	t
17	1	17	t
18	1	18	t
19	1	19	t
20	1	20	t
21	1	21	t
22	1	22	t
23	1	23	t
24	1	24	t
25	1	25	t
26	1	26	t
27	1	27	t
\.


--
-- Name: questions_usertag_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quizme
--

SELECT pg_catalog.setval('questions_usertag_id_seq', 27, true);


--
-- Data for Name: south_migrationhistory; Type: TABLE DATA; Schema: public; Owner: quizme
--

COPY south_migrationhistory (id, app_name, migration, applied) FROM stdin;
1	emailusername	0001_initial	2014-07-06 13:59:28.894109-07
2	questions	0001_initial	2014-07-06 13:59:28.969107-07
\.


--
-- Name: south_migrationhistory_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quizme
--

SELECT pg_catalog.setval('south_migrationhistory_id_seq', 2, true);


--
-- Name: auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- Name: auth_group_permissions_group_id_permission_id_key; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_key UNIQUE (group_id, permission_id);


--
-- Name: auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- Name: auth_permission_content_type_id_codename_key; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_key UNIQUE (content_type_id, codename);


--
-- Name: auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- Name: django_admin_log_pkey; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY django_admin_log
    ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);


--
-- Name: django_content_type_app_label_model_key; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_key UNIQUE (app_label, model);


--
-- Name: django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- Name: django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- Name: django_site_pkey; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY django_site
    ADD CONSTRAINT django_site_pkey PRIMARY KEY (id);


--
-- Name: emailusername_user_email_key; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY emailusername_user
    ADD CONSTRAINT emailusername_user_email_key UNIQUE (email);


--
-- Name: emailusername_user_pkey; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY emailusername_user
    ADD CONSTRAINT emailusername_user_pkey PRIMARY KEY (id);


--
-- Name: questions_answer_pkey; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY questions_answer
    ADD CONSTRAINT questions_answer_pkey PRIMARY KEY (id);


--
-- Name: questions_attempt_pkey; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY questions_attempt
    ADD CONSTRAINT questions_attempt_pkey PRIMARY KEY (id);


--
-- Name: questions_hint_pkey; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY questions_hint
    ADD CONSTRAINT questions_hint_pkey PRIMARY KEY (id);


--
-- Name: questions_question_pkey; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY questions_question
    ADD CONSTRAINT questions_question_pkey PRIMARY KEY (id);


--
-- Name: questions_questiontag_pkey; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY questions_questiontag
    ADD CONSTRAINT questions_questiontag_pkey PRIMARY KEY (id);


--
-- Name: questions_quiz_pkey; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY questions_quiz
    ADD CONSTRAINT questions_quiz_pkey PRIMARY KEY (id);


--
-- Name: questions_tag_pkey; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY questions_tag
    ADD CONSTRAINT questions_tag_pkey PRIMARY KEY (id);


--
-- Name: questions_usertag_pkey; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY questions_usertag
    ADD CONSTRAINT questions_usertag_pkey PRIMARY KEY (id);


--
-- Name: south_migrationhistory_pkey; Type: CONSTRAINT; Schema: public; Owner: quizme; Tablespace: 
--

ALTER TABLE ONLY south_migrationhistory
    ADD CONSTRAINT south_migrationhistory_pkey PRIMARY KEY (id);


--
-- Name: auth_group_name_like; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX auth_group_name_like ON auth_group USING btree (name varchar_pattern_ops);


--
-- Name: auth_group_permissions_group_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX auth_group_permissions_group_id ON auth_group_permissions USING btree (group_id);


--
-- Name: auth_group_permissions_permission_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX auth_group_permissions_permission_id ON auth_group_permissions USING btree (permission_id);


--
-- Name: auth_permission_content_type_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX auth_permission_content_type_id ON auth_permission USING btree (content_type_id);


--
-- Name: django_admin_log_content_type_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX django_admin_log_content_type_id ON django_admin_log USING btree (content_type_id);


--
-- Name: django_admin_log_user_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX django_admin_log_user_id ON django_admin_log USING btree (user_id);


--
-- Name: django_session_expire_date; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX django_session_expire_date ON django_session USING btree (expire_date);


--
-- Name: django_session_session_key_like; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX django_session_session_key_like ON django_session USING btree (session_key varchar_pattern_ops);


--
-- Name: emailusername_user_email_like; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX emailusername_user_email_like ON emailusername_user USING btree (email varchar_pattern_ops);


--
-- Name: questions_answer_user_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX questions_answer_user_id ON questions_answer USING btree (user_id);


--
-- Name: questions_attempt_question_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX questions_attempt_question_id ON questions_attempt USING btree (question_id);


--
-- Name: questions_attempt_user_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX questions_attempt_user_id ON questions_attempt USING btree (user_id);


--
-- Name: questions_hint_answer_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX questions_hint_answer_id ON questions_hint USING btree (answer_id);


--
-- Name: questions_hint_user_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX questions_hint_user_id ON questions_hint USING btree (user_id);


--
-- Name: questions_question_answer_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX questions_question_answer_id ON questions_question USING btree (answer_id);


--
-- Name: questions_question_user_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX questions_question_user_id ON questions_question USING btree (user_id);


--
-- Name: questions_questiontag_question_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX questions_questiontag_question_id ON questions_questiontag USING btree (question_id);


--
-- Name: questions_questiontag_tag_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX questions_questiontag_tag_id ON questions_questiontag USING btree (tag_id);


--
-- Name: questions_questiontag_user_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX questions_questiontag_user_id ON questions_questiontag USING btree (user_id);


--
-- Name: questions_quiz_user_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX questions_quiz_user_id ON questions_quiz USING btree (user_id);


--
-- Name: questions_tag_user_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX questions_tag_user_id ON questions_tag USING btree (user_id);


--
-- Name: questions_usertag_tag_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX questions_usertag_tag_id ON questions_usertag USING btree (tag_id);


--
-- Name: questions_usertag_user_id; Type: INDEX; Schema: public; Owner: quizme; Tablespace: 
--

CREATE INDEX questions_usertag_user_id ON questions_usertag USING btree (user_id);


--
-- Name: answer_id_refs_id_a73a4b2b; Type: FK CONSTRAINT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_hint
    ADD CONSTRAINT answer_id_refs_id_a73a4b2b FOREIGN KEY (answer_id) REFERENCES questions_answer(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: answer_id_refs_id_f47a3cc8; Type: FK CONSTRAINT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_question
    ADD CONSTRAINT answer_id_refs_id_f47a3cc8 FOREIGN KEY (answer_id) REFERENCES questions_answer(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions_permission_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_permission_id_fkey FOREIGN KEY (permission_id) REFERENCES auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: content_type_id_refs_id_d043b34a; Type: FK CONSTRAINT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY auth_permission
    ADD CONSTRAINT content_type_id_refs_id_d043b34a FOREIGN KEY (content_type_id) REFERENCES django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log_content_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_fkey FOREIGN KEY (content_type_id) REFERENCES django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: group_id_refs_id_f4b32aac; Type: FK CONSTRAINT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY auth_group_permissions
    ADD CONSTRAINT group_id_refs_id_f4b32aac FOREIGN KEY (group_id) REFERENCES auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: question_id_refs_id_5c11b53f; Type: FK CONSTRAINT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_questiontag
    ADD CONSTRAINT question_id_refs_id_5c11b53f FOREIGN KEY (question_id) REFERENCES questions_question(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: question_id_refs_id_f533cb74; Type: FK CONSTRAINT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_attempt
    ADD CONSTRAINT question_id_refs_id_f533cb74 FOREIGN KEY (question_id) REFERENCES questions_question(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: tag_id_refs_id_54a9fbbb; Type: FK CONSTRAINT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_questiontag
    ADD CONSTRAINT tag_id_refs_id_54a9fbbb FOREIGN KEY (tag_id) REFERENCES questions_tag(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: tag_id_refs_id_cf514b85; Type: FK CONSTRAINT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_usertag
    ADD CONSTRAINT tag_id_refs_id_cf514b85 FOREIGN KEY (tag_id) REFERENCES questions_tag(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: user_id_refs_id_137b5840; Type: FK CONSTRAINT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_answer
    ADD CONSTRAINT user_id_refs_id_137b5840 FOREIGN KEY (user_id) REFERENCES emailusername_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: user_id_refs_id_4799ce27; Type: FK CONSTRAINT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_tag
    ADD CONSTRAINT user_id_refs_id_4799ce27 FOREIGN KEY (user_id) REFERENCES emailusername_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: user_id_refs_id_68d4030b; Type: FK CONSTRAINT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_questiontag
    ADD CONSTRAINT user_id_refs_id_68d4030b FOREIGN KEY (user_id) REFERENCES emailusername_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: user_id_refs_id_7794b2f3; Type: FK CONSTRAINT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_usertag
    ADD CONSTRAINT user_id_refs_id_7794b2f3 FOREIGN KEY (user_id) REFERENCES emailusername_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: user_id_refs_id_c3efe0ed; Type: FK CONSTRAINT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_attempt
    ADD CONSTRAINT user_id_refs_id_c3efe0ed FOREIGN KEY (user_id) REFERENCES emailusername_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: user_id_refs_id_db1206ea; Type: FK CONSTRAINT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_hint
    ADD CONSTRAINT user_id_refs_id_db1206ea FOREIGN KEY (user_id) REFERENCES emailusername_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: user_id_refs_id_e3223746; Type: FK CONSTRAINT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_question
    ADD CONSTRAINT user_id_refs_id_e3223746 FOREIGN KEY (user_id) REFERENCES emailusername_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: user_id_refs_id_e9a47b21; Type: FK CONSTRAINT; Schema: public; Owner: quizme
--

ALTER TABLE ONLY questions_quiz
    ADD CONSTRAINT user_id_refs_id_e9a47b21 FOREIGN KEY (user_id) REFERENCES emailusername_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: public; Type: ACL; Schema: -; Owner: rob
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM rob;
GRANT ALL ON SCHEMA public TO rob;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

