This file is in plain text (convert to markdown at some point).  

================================================================================
#How to install and run
================================================================================
1. clone the repo
2. create a virtualenv, e.g.,
    mkvirtualenv quizme
3. activate the virtualenv, e.g.,
    workon quizme
4. install the required packages in the virtualenv, e.g.,
    pip install --requirement requirements.txt
5. install postgresql (if using postgresql); e.g., on OSX,
    brew install postgresql
6. create a postgres database
    createdb quizme
    (note that the database name "quizme" is a setting in settings.py for
     DATABASES['default']['NAME']
    )
7. create a postgres user:
    createuser quizme
    --or--
        psql --command="CREATE USER quizme"

    Test it:
        psql --user=quizme quizme
7. copy database
================================================================================
#Thoughts about scheduling
================================================================================
- maybe capture percentage of correctness and time since last seen
- I ask myself: when do I want to see this again?
- I ask myself: how long before I think I will forget this?
- consider assigning an importance to each question; distinguish between how important it is to me, and when I think I will forget it; don't mix the two together
================================================================================
#Show schedules for each tag
================================================================================

User > UserTag's > QuestionTag's > Question's > Schedule's > Schedule.date_added

Want: most recently-added Schedule for each Question for the specified User
To get latest Schedule's, need Question's and User
To get Question's, need QuestionTag's
To get QuestionTag's, need UserTag's (specifically, need the tag's from UserTag's to get the QuestionTag's)
To get UserTag's, need User

Reference: http://stackoverflow.com/questions/27544223/django-query-filter-many-to-many-to-many-etc
Reference: http://stackoverflow.com/questions/3630619/django-queryset-for-many-to-many-field

Could just add this code to _get_tag2periods, just need to add UserTag's.
Keep track of most-recently schedule question by seeing if that question has a UserTag (need an extra query for each question though)

Data structure to process schedules:
  questions2schedules[question_id] == latest_schedule

Iterate through questions for each tag:
    for tag in tags:
        questions = ...
        questions.annotate(newest_date_added)
        for question in questions:
            tag2periods...

Resulting data structure:
  tag2periods['python']['now-10m'] = 4
              ^^^^^^^^  ^^^^^^^^^    ^
              tag       period       num_questions

Consider using the Max(pk) to get the latest-added schedule.

Note that a question with multiple tags will still only have one schedule, because the schedule is per user per question.

Q: How do I find the most-recently-added schedule of each question (datetime_added)?
A:
I have the queryset of questions.
*** Get the code working first, then worry about performance.  Easier to just ask on stackoverflow with existing code.
================================================================================
#Glossary / Terms / Nomenclature
================================================================================
answer - the "correct" answer associated with a question; a question can have 0 or 1 answers
attempt - a user's single attempt to answer a question; it is the user's guess as to the answer
hint - a hint for a question and answer (not yet implemented)
schedule - when the user wants to see a question again
question - a question
quiz - a set of associated questions (not yet implemented)
tag - a tag associated with a question; a question can have 0 to many tags
user tag - the tags that a user has selected indicating which questions they want to see

================================================================================
#Tests
================================================================================
Tests to add:
    12/27/14 add a test where there are no questions for whatever tags are selected, but selecting a different tag causes a question to be shown
================================================================================
#Notes
================================================================================
QuizMe notes can be found in these places:
    o here (git repo /README)
    o notebooks
    o Portland Python quiz program (~/bin/learn/quiz.python/quiz.py)

[The rest of this file was moved from bin/learn/quiz.python/db/db_app_designs 9/16/13]

Code: Dropbox/git/quizme_site

================================================================================
#Documentation
================================================================================
question_next - ready (just a redirect to question)
question - shows a question with a form to input an attempt
    GET - show the question and an empty for for an attempt
    POST - post a new attempt
answer - shows the question, attempt, and answer, and a form to input a schedule
    GET - show the question, attempt, and answer
    POST - create a new schedule; redirect to question_next

Start request        Start template                 User Action             End Request           End template
-------------------- --------------                 -----------             -------------------   --------
(none)               (none)                         user goes into quiz     GET  /show_question/  show_question.html
                                                    for the first time  
GET /show_question/  show_question.html             user answers a question POST /show_question/  show_question_and_answer.html
POST /show_question/ show_question_and_answer.html  user clicks             GET /show_question/   show_question.html
                                                    "next question"

Requests, methods, and tempates:
METHOD  REQUEST          TEMPLATE REQUEST IS FROM  REQUEST VIA
------  ---------------  ------------------------  -----------
GET     /question/       question.html
POST    /question/  

Symbolic actions:
    - ask/show question (GET question)
    - submit answer (POST question) (really POSTing an attempt)
    - schedule question for next time (GET answer) (really GETting a specific attempt along with answer)
    - submit answer feedback (POST answer) (really POSTing a schedule)


----------------------------------------
Algorithm for deciding which question to show next:

question has no schedule
question has schedule with no interval

----------------------------------------
Time zones

USE_TZ = True in the settings.py file, so time zone support is enabled.  Times are stored as UTC.
To get the current time in UTC, use:
    from django.utils import timezone
    now = timezone.now()
Note that:
    >>> naive = datetime.datetime.utcnow()
    >>> aware = timezone.now()
utcnow() is naive.

See https://docs.djangoproject.com/en/1.7/topics/i18n/timezones/

================================================================================
#HOW TO add a South migration
================================================================================
a) create the migration
    ./manage.py schemamigration myapp --auto
b) run the migration:
    ./manage.py migrate myapp

================================================================================
#How to backup Postgres database and restore
================================================================================
Q: How to make a backup of the database?
A:
make dumpdb
    - this creates dumps in 2 different formats (plain and custom) and puts them in the db_dumps subdir with a datestamp on them, e.g.,
        -rw-r--r--  1 rob  staff  244938 Sep 26 17:26 dump.quizme.2014.09.26_Fri_17.26.21.plain
        -rw-r--r--  1 rob  staff  125248 Sep 26 17:26 dump.quizme.2014.09.26_Fri_17.26.21.custom

Q: How to restore from a backup?
A: 
make loaddb
    - this will create two databases named "restore_quizme_custom" and "restore_quizme_plain"
      and load the dumps 

Q: How to test a database loaded from a backup?
A: 

================================================================================
#TODO / Backlog / Features / Stories
================================================================================
o 7/1/15 FEATURE: in addition to tags, consider keywords
o 6/28/15 FEATURE: show how long (duration/interval) it has been between when we last answered the question and now; this will me when I answer determine how long I want to set the next interval (both question and answer pages)
o 6/2/15 BUG: I added a new question with tags=[file_systems, unix]; when I went to quiz myself with a bunch of tags selected, but neither [file_systems, unix], I still got that question; after I answered that question, I then got another question with those same tags
  - it might be because the schedules query 
  - questions being shown that should not be:
        http://localhost:8000/question/1052/  
        http://localhost:8000/question/1053/
o 5/29/15 show list of selected tags on one line (instead of having to look through list of all tags) #high
o 05/17/15 show the number of questions recently answered/scheduled (e.g., 0-10mins=[5]  10-30mins=[12] 30m-2h=[4]  0-2h=[21])  #high
o 04/03/15 add a "note" section to the schedule, as a scratchpad, and also to mention what I forgot and what to remember next time  #high
o 3/28/15 allow a tree structure of tags, so that selecting a tag would select that and everything below it [suggested by Nev]
o 3/10/15 don't allow duplicate tags to be created
o 3/10/15 show the question number on the answer page, so that it can be visually seen to manually edit the question in the admin
o Export (export questions via csv / json / yaml / xml / python data structure / plain text).  Find a way to maintain referential integrity.
o 02/11/15 On the answer page, add an input box where the user can type to practice the answer.  Maybe or maybe not save it (only value in saving it would be to see the effort that was made).  #high
o 01/23/15 Django Admin: be able to click on the answer from the list of questions page.
o 02/15/15 Django Admin: show the associated question(s) for each answer, and be able to click on the question 
o 01/23/15 Django Admin: add ability to edit answer in same page as editing question.
o 2/11/15  Show the schedule numbers for the total of selected tags (just like is done for each individual tag)  #high
o 01/23/15 Add search to Django admin to search in questions and answers.
o 12/31/14 Added schedule intervals for "immediate" and "never"
o 12/31/14 Allow a quiz mode that consists of a set of questions, and the user can go back and change their answers as much as they want (e.g., as part of an interview)
o 12/31/14 Make it possible to view questions that don't have any tags ("untagged")
o 12/31/14 Have a "review all" mode that goes through all questions for the selected tags, showing you number seen and number remaining.
o 12/31/14 REFACTOR: change all datetime_* variables to either date_* or time_*
o 12/31/14 Change all timezones to UTC
o 12/30/14 Implement variations (a question can have variations -- other questions that are similar but modified in a different way; e.g., 2+3=? could be a variation of 2+2=?); this is helpful so that you don't get in the habit of seeing the question and remembering the answer without understanding it
o 12/27/14 ask how well the question was answered (maybe percentage; excellent / good / bad)
o 12/21/14 Modify to pass question number in endpoint instead of as hidden field
o 12/21/14 Add contributors.md
o 12/21/14 Add to readthedocs
o 02/15/15 Consider adding a priority field (interval is ideally when you want to see it again, but priority is how important it is to you; so 2 different questions could have the same interval, but the one with the higher priority gets shown first; however, what to do if question1 has interval 1 month and priority "high", and question2 has interval 1 minute and priority "low" -- which gets shown first?)
o 12/21/14 Add tasks to either github issues or to Trello
o 11/17/14 add ability to select all or none for tags
o 10/20/14 add search ability, to search questions/answers for specified keywords
o 10/20/14 in the admin, when viewing a question, show the answer as an inline
o 10/20/14 in the admin, when viewing a question, add a link to jump to the answer to view/edit it
o 10/19/14 upgrade Django to latest (currently using 1.6.7; latest is 1.7)
o 10/18/14 per Steven Jonas, have a way to find other questions (or bookmarked webpages) with similar content to help form associations and new insights
o 10/18/14 have questions that are a single webpagge to review (a url), and show the content of the webpage instead of just a link
o 8/17/14 enabling tags during an answer does not enable it when the next question is shown (but it does work if enabled when asking a question)
BUG: clicking on tag (to disable) during a question does not disable it when the answer is shown
o Show linefeeds as linefeeds for questions/answers/attempts (add <br/> tags; or add a rich text editor)
o 7/15/14 - add admin "list_filter" setting to be able to filter by tags on questions and answers
o use a single template: combine show_question.html and show_question_and_answer.html
o add an inline in the admin to edit the answer for a given question
o ability to change tags for the question shown #high
o Frequency (user selects when they want to see again (hr, day, 2 days, week, month, 2 mos)
o deploy to heroku
o 7/14/14 - add a "SKIP" button to skip a question
o 7/14/14 - capture the elapsed time that it took the user to reply
o 7/14/14 - show all questions/answers for given tags on a single page
o add documentation for other users to use
o display url's as clickable url's (href's)
o Import (import questions via csv / json / yaml / python data structure)
o Questions (add questions from the web page instead of the admin)
o Tags (be able to tag questions, and then select tags from which to select questions)
    DONE - select a single tag to use for a quiz
    DONE - select multiple tags to use for a quiz
    - consider allowing a hierarchy of tags, e.g.,
        Programming
            Languages
                Python
                Perl
                C
            Methodologies
                Agile
      Maybe allowing multiple parent/child relationships.
o NewUser registration
    - page to create account
    - email address verification/registration
o tests
o Footer: 
    - show tags
    - show how many times seen
    - show how many times answered
    - show last time seen
    - show total number of questions
o Review mode: just show questions and answers
o email questions

o Rich Text for questions and answers
o graph database
o Questions (modify questions from the web page while asking the question)
o unique url's (e.g., either based on question words, or based on an id)
o "Ignore" tag -- never see the question again
o private questions/answers
o add Google Analytics

Front-end:
o ability to add questions/answers
o ability to modify questions/answers on-the-fly

o versions of questions/answers

DONE o 8/29/14 Show the tags for the question being asked/answered.
DONE o 3/10/15 show the answer id in answer.__unicode__ in the admin [DONE 3/10/15]
DONE o 12/27/14 Show the number of questions for each tag (total number of questions, and number of questions past deadline)
DONE o postgres backups (via Makefile)
DONE o User login
DONE - add tags via Django Admin

o Ask a question, and then show the answer.
    quiz view:
        form:
            if GET:
                ask the first question
            elif POST:
                tell server which question was just asked
  Format:
    1) Show user a question
    2) give user an input box to put their answer
    3) Submit (user submits their answer)
    4) save the user's answer, and show the correct answer, along with a Next button
    5) Next (user clicks Next to go to the next question)
    6) go to (1)
o Example of one answer with multiple questions:
    Q: 
    A:
o Example of one question with multiple answers:
    Q: 
    A:

================================================================================
#django-quiz
================================================================================
o Name of quiz is passed in the url
o views:
    - question, answer, quiz, previous are all loaded in the context
o models:
    Category
    Quiz
    Progress
    Sitting
        - user
        - question_list (TextField; csv of questions)
        - incorrect_question (TextField; csv of incorrect questions)
    Question
    Answer
    

================================================================================
#User Stories / Features
================================================================================
o users can create accounts for themselves
o add questions via admin
o users can create quizzes (list of questions)
o Edit History (see history of edits of questions, etc.)
o web page is AJAX 
o users can edit other peoples questions/answers
o users can edit quizzes (add questions)
o users can edit quizzes (remove questions)
o users can add tags to questions
o users can add tags to questions during quiz
o can edit question while taking the quiz
o bulk upload
o edit a question while it's being asked
o edit an answer while it's being shown
o send emails with questions
o answer question in email
o view facts (no Q&A)
o algorithm based on Steven Jonas SuperMemo (Piotr Wozniak)
o spelling (sound clips)
o recognize photos
o time how long it takes to answer
o give Atlatl interview candidates quizzes
o ask in reverse (show answers, guess questions)
o study mode: show questions and answers together
o movie clips / YouTube videos

================================================================================
#Django Apps
================================================================================
Word meaning "piece of information":
chunk / game / info / piece of info / library / article / meme / agents / chapter / quiz / 
tidbit / interesting thing / atom / main / unit / info unit / knowledge / 
feature
segment
part
entity
noun
thing
bit
thing that stands alone
article
InfoEntity
component
portion
piece
fragment
building block
monad
constituent

entities
================================================================================
#MVP:
================================================================================
    Questions:
        - text
    Answers:
        - text
    Attempts:
        - answer
        - date
        - user
        - 

================================================================================
#Entities
================================================================================
answers
hints
questions
quizzes (collection of questions)
tags
users
================================================================================
#Screens:
================================================================================
  New user (use the admin initially)
  Add a question/answer (use the admin initially)
  Edit a question/answer (use the admin initially)
  Quiz - ask questions, record answers

================================================================================
#Ultimate:
================================================================================

Question Types:
        - multiple choice
        - true/false
        - fill in the blank
        - essay
        - audio clip
        - video clip
        - image
        - click on photo (e.g., US map, states)
Hints:

Modes:

================================================================================
#Use Cases:
================================================================================
o want to quiz myself for a specify tag

================================================================================
#HOW TO use django-versioning
================================================================================
cddjango
cd learn_django-versioning_package
vim README
================================================================================
# Other similar apps
================================================================================
Anki - open source; written in Python; https://github.com/dae/anki
Brainscape (iOS)
Eidetic (iOS)
Flashcards (iOS)
Flashcardlet (iOS)
Fresh Memory - open source; Windows and Linux; last updated ; http://fresh-memory.com/ ; http://sourceforge.net/projects/freshmemory/; documentation last updated 10/6/14; app last updated 10/20/12; Mykhaylo Kopytonenko (mishakop at gmail com); c++
Mnemosyne
SuperMemo

================================================================================
# Product/App Names / Naming:
================================================================================

----------------------------------------
Name Ideas:
----------------------------------------
Ask Me
Ask Me Show Me

Brain Librarian
Brain Library

Capture and Memorize

Extra Memory

Fingertip
FlashCards
Fresh Memory (a Windows/Mac app with this name already exists)

Help Me Remember

I Remember

Learn and Remember
Learn-Quiz-Remember
LibraryOfQuestions

MeMemorize

Memorizer

Memory Aid
Memory Assistant
Memory Butler
Memory Chest
Memory Concierge
Memory Coach
Memory Curator
Memory Bunny
Memory Fountain
Memory-Go-Round
Memory Gym
Memory Lift
Memory Push-ups
Memory Refresh
Memory Refresher
Memory Secretary
Memory Toolchest
Memory Toy

Neuron Expander

Perfect Memory (French company website http://www.perfect-memory.com ; content management)

Quiz and Remember
QuizMe - already an iOS and Android app with this name
Quizzer
quizzical
QuizMeNow / quizmenow / quiz-me-now

Read Learn Quiz Remember
Read Quizi Learn Remember
Rediscover
Refresh My Memory (an Android app for remembering where you put things already exists)
Remember It
Review and Remember
Review to Remember

See If I Know
Show Me Again
Smart Quiz
So Many Questions
Spaced Repetition
Strong Memory
Sweet Memory

Tic-Tock-Remember
Time to Remember
Tip of my Tongue (iOS word-searching app with this name already exists)
Total Recall

What Was That?

----------------------------------------
My Favorites:
----------------------------------------
Memory Butler
Memory Curator

----------------------------------------
Keywords:
----------------------------------------
    aid
    ask
    assistant
    awesome
    brain
    butler
    catalog
    chest
    clear
    crisp
    elephant
    exercise
    fit
    fitness
    flashcard
    forget
    genius
    gray matter
    gym
    help
    intelligent
    learn
    librarian
    master
    memorize
    memory
    muscle
    neuron
    pod
    query
    question
    quiz
    recall
    remember
    repeat
    repetition
    review
    see
    spaced repetition
    storage
    study
    test
    tool
    workout

----------------------------------------
Themes / analogies:
----------------------------------------
    assistant
    curation / collecting
    exercise
    memory
    quiz
    smart

----------------------------------------
Similar apps:
----------------------------------------
    Anki - open source; written in Python; https://github.com/dae/anki
    Brainscape (iOS)
    Cram
    Cram4Finals
    Cramberry 
    Eidetic (iOS)
    FlashBuddy
    Flashcard Elite
    Flashcards (iOS)
    Flashcards Deluxe
    Flashcardlet (iOS)
    Fresh Memory
    Mnemosyne
    MyStudyPal
    ProVoc
    Quizlet
    Repeat and Memorize
    Study Stack
    SuperMemo

    http://www.flashcardapps.info/filter/

----------------------------------------
Naming ideas / considerations:
----------------------------------------
    - use a two-part name (e.g., Evernote, Wunderlist, Tweetbot)
    - use a strange name (e.g., Google, Yahoo)
    - pronounceability
    - 11 chars or less
    - use a prefix or suffix (e.g., app, go, get) (e.g., outsideapp.com)
    - check domain names
    - account name availability on Facebook and Twitter
    - easy to remember
    - use real words with a twist (Ford Mustang)
    - create a compound word
    - make up a word
    - add on a prefix (e.g., Coursera)
    - add a pleasing word (e.g., Fountain)
    
----------------------------------------
Taglines:
----------------------------------------
    - Quizzes / Flashcards / Spaced Repetition
================================================================================
#Examples of tables
================================================================================
Attempt:
    attempt     correct     question_id  datetime_added  datetime_updated  user_id
    ---------   -------     -----------  --------------  ----------------  -------
    "foobar"    True            3        7/1/14 8:35am   7/1/14 8:35am        5

Question:
    question    answer_id
    --------    ---------
      1+1           1

QuestionTag:
    question_id tag_id  enabled
    ----------- ------  -------
         1        1      True

Tag:
    name
    -----
    my_tag

UserTag
    user_id   tag_id  enabled
    -------   ------  -------
       1        1       True

For questions,
    user_tags = UserTag.objects.filter(user=user, enabled=True)
    question_tags = QuestionTag.objects.filter(enabled=True, tag__in=user_tags)
    questions = Question.objects.filter(question__in=question_tags)

================================================================================
# The End.
================================================================================
