QuizMe notes can be found in these places:
    o here (git repo /README)
    o notebooks
    o Portland Python quiz program (~/bin/learn/quiz.python/quiz.py)

[The rest of this file was moved from bin/learn/quiz.python/db/db_app_designs 9/16/13]
Code: Dropbox/git/quizme_site

================================================================================
!Log/History/Diary
================================================================================
Wed 3/26/14 5pm
    5:20pm next: finish learn_form_checkbox_for_manytomany_field and learn_checkboxes_for_every_boolean_record
    5:19pm learn_form_1: modified mycmd to specify all the fields
    5:02pm working on getting learn_form_1 mycmd working
    5:00pm Forget about figuring out how to use existing field value if not specified.
Wed 3/26/14 8am
    9:03am NEXT: figure out how to use existing field value if not specified (just like for Atlatl)
    9:00am got learn_ModelForm working with not requiring all fields.  However, updating an existing instance does not use the existing field value if not specified.
    8:58am got ModelForm working when creating a new instance in learn_ModelForm.  However, when updating an existing instance, the fields are still required.  Make them not required.
    8:44am figuring how how a ModelForm takes fields
    8:35am beginning learn_form_1 mycmd
Tue 3/25/14 4pm
    5:10pm LEFT OFF: get learn_form_1 mycmd working
    5:09pm modified learn_form_1 mycmd to understand how to use a ModelForm;
    5:00pm creating a project to learn how to map an instance
    4:53pm Now need to figure out how to map an instance to the form:
        MyForm(instance=my_instance)
    4:52pm Figured out how to instantiate a form.
    4:51pm Working on learn_form_1 to figure out how to instantiate a form();
    4:50pm Working on learn_form_checkbox_for_manytomany_field
Mon 3/17/14 8am
    understanding how a single checkbox should work in the follow scenarios:
        - ManyToMany field with two specified values
        - a new instance
        - an existing instance
    working on learn_form_checkbox_for_manytomany_field
Fri 3/14/14 10am
    detailing how the functionality should work
Wed 3/12/14 5pm
    left off: exploring different tagging methods after googling; explore django-taggit by Alex Gaynor some more, and also some blog posts
    Next: get checkboxes for the boolean values
    + Got working with showing the page.  
    resuming work on learn_checkboxes_for_every_boolean_record
    + modified code for view, forms, and html template
Tue 3/11/14 9am
    Working on the view for learn_checkboxes_for_every_boolean_record
Mon 3/10/14 5pm
    Decided I'm done with learn_aaron_inline_formsets.
    Resuming learn_checkboxes_for_every_boolean_record
    Created the models, now figuring out what to create for the view.
Fri 3/7/14 5pm
    Reading through Django documentation on formsets.
Thu 3/6/14 6pm
    Copied Aaron Sykes' inlineformset_factory project into learn.  
    Read about sqlite3 in wikipedia.
    LEFT OFF: documenting how Aaron's inlineformset_factory works.
Thu 3/6/14 8am
    Added a boolean field to learn_ModelForm and proved that it uses a checkbox.
    Went through learn_form_1 and determined what it was doing.
    Went through learn_form_1a_customize_form_html and determined it was using html instead of {{ form.as_p }}
    Next: keep going through other learn*form* projects to get a thorough understanding of forms.
Wed 3/5/14 5pm
    LEFT OFF: discovered stackoverflow post of using formsets for each one
    Looked at Postgresql bit strings.  Don't see it supported in Django.
    Continuing to work on checkboxes project.

Thu 2/13/14 7am
    Working on Django learn project for checkboxes for all the tags.
Tue 2/11/14 7am
    Next: implement tags via checkboxes or radio buttons.  First create a Django learn project.
    Consider:
        
        event.members = form.cleaned_data['members']
    Add saving of tags for a user:
        default to all tags

Mon 2/10/14 9am
    Next:
    It now works!!!!
    SOLUTION: added admin.py code 
    I looked at learn_django_doc_example_custom_user_mycmd_create_users and found that I forgot
    all the admin.py code.  I have now added it.
Sun 2/9/14 3pm
    Next: try the learn project to see how it's storing passwords
    Reason: it looks like creating a user through the admin is not encrypting the password.
    Why can I login as a superuser, but not as a non-superuser?
    deleted rbednark@gmail.com and then re-created:
        FAIL: rbednark@gmail.com / p
    manage.py createsuperuser
        SUCCESS: superuser@bednark.com / p
    attempts:
        FAIL: rob / rob 
        FAIL: rbednark@gmail.com / p
    I have now set AUTH_USER_MODEL in settings.py

    What is being authenticated?  auth_user or emailusername_user?
    Currently logged-in as: [rob]
    auth_user:
        rob
        rbednark
    emailusername_user:
        rbednark@gmail.com
    I think it's because I forgot settings AUTH_USER_MODEL in settings.py

Thu 2/6/14 9am
    I set a trace to see what the error is.  It is here:
        /Users/rob/.virtualenvs/quizme/lib/python2.7/site-packages/django/contrib/auth/backends.py(16)authenticate()
    Added a logout link via a base.html page.
    login as rbednark@gmail.com / p: 
        Your username and password didn't match. Please try again.
        (I confirmed that rbednark@gmail.com / p in the admin are correct, and is_active=True)
    login as rob / rob:
        
Wed 2/5/14 7am
    Problem: getting this error:
        Cannot assign "<SimpleLazyObject: <User: rob>>": "Attempt.user" must be a "User" instance.
    Theory: I think it's because I'm logged-in as an auth_user instead of an emailusername_user
    Next: add a logout link
    Status: added a base.html page.  Including it in the other 2 pages.
Tue 2/4/14 6pm
    Next: resolve the csrf error
    Got the login screen working.  Now there is a csrf error:
        CSRF token missing or incorrect.
    Got the django learn project working to use the login screen.
Tue 2/4/14 8am
    Next: implement custom login page
    Got learn_custom_user_login_page_form_view working.
Mon 2/3/14 5pm
    Working on learn_custom_user_login_page_form_view
    Added a custom form.  Now add a custom view, subclassed from login() view

    https://docs.djangoproject.com/en/dev/topics/auth/default/

    Start implementing the login form.  We'll need it anyway.

    If I did implement saving an anonymous user as a user, it would have to be done
    when they first go into a quiz.  That could potentially mean a lot of anonymous users.
    Could choose to purge them after every n days.
    Furthermore, might need a way to convert an anonymous user to an existing user.
    Maybe that would be easy -- just fill in their fields (email addr, first name, last name)
Mon 2/3/14 8am
    Anonymous users do not have a User instance.  Figuring out how to save them as an actual user.  Created a django learn project.
    Implementing...
    Maybe it's not worth it.
Sun 2/2/14 8pm
    Fixed error.
    Now getting another error:
        Cannot assign "1": "Attempt.user" must be a "User" instance.
Sun 2/2/14 11am
    Changed from sqlite3 to postgres.  Create initial migrations again.  Now get an error:
        column questions_attempt.datetime_updated does not exist
        LINE 1: ...empt"."id", "questions_attempt"."datetime_added", "questions...
    Next: need to allow superuser to add tags/questions in Django Admin.
    Added Tag ManyToMany with Question.
    Added ManyToMany both ways in Django Admin.
Sat 2/01/14 10am
    Next: add tags
    Users now work.
    Added foreign keys to User.
    Added a user_ app to quizme.
    Now add user to my model.
    Satisfied that subclassing AbstractBaseUser also has all the authentication/permission functionality.
    On plan from Charleston.
    learn_django_doc_example_custom_user -- this is done and just creates a custom user by subclassing AbstractBaseUser.
    I figured out that create_user() is a method of the manager, not of the user.

Sun 1/26/14 2pm
    On plane to Charleston.  Working on creating users and logging-in.
Fri 1/24/14 6pm
    Did some googling.  It doesn't look like it's easy to modify the Django authentication to use email addresses instead of usernames.
    Decided to use Tom Christie's django-email-as-username library.
    Working on learn_django_email_as_username
Thu 1/23/14 5pm
    Finished new template_django_1_6_1
    Now working on learn_django_user_authentication
    Left off: reading about Django user authentication
        https://docs.djangoproject.com/en/1.6/topics/auth/
        https://docs.djangoproject.com/en/1.6/topics/auth/customizing/
Thu 1/23/14 9am
    Working on creating and authenticating users.  Creating a learn project for it.  Right now, I'm creating a new template_django_1_6_1 based off of Django 1.6.1
    Left to do: 
        settings.py
Wed 1/22/14 9pm
    Got it working.  Works with 3 questions.  Cycles through.
    Next step?  Maybe tests.
Wed 1/22/14 5pm
    I think I got it working.  Add another question to see if it really works.
Wed 1/22/14 8am
    I added a "question" field to the form, but this doesn't make any sense.  Question is not an input.  I think I just added it to make it easy to display the question.  Take it out and pass it explicitly.

    Do I really want a different template for showing the first question vs showing an answer
    and the next question?  For now it's fine.  Keep moving on.
Tue 1/21/14 8am
    Left off changing field names in forms and views.
    States:
        - initial GET:
            - show the question
        - POST
            - new template:
                - show the answer, the user's attempt, the question
                - have a NEXT button be a GET for the next question
Mon 1/20/14 6pm
    I got the hidden input to work.  Now need to figure out what to do next.
Mon 1/20/14 8am
    Trying different things to get the HiddenInput to work.  I think it is due to these lines in the view:
            form_attempt.fields['question_id'] = question.id
            form_attempt.fields['question_id'] = None
    I think it should be something like ['initial'], otherwise I think it's overriding the widget.
Fri 1/17/14 6pm
    Tried putting explicit <input> in the form, and then it put the <input> widget in the "value".
    Baffling.
Fri 1/17/14 8am
    Googled.  Tried .as_hidden and using ()'s when setting the widget.  Still not working.  Might not to explicitly put it in the form.
    Look at the Django code to see what the HiddenInput widget does.
Thu 1/16/14 8am
    Added errors to form so can see what the error is.
    It is saying that question_id is not present in the form.
    I set a breakpoint and confirmed that question_id is not in request.POST.
    Now check to see if question_id is getting in the form.  I see it as one of the fields, but because I'm not using form.as_p(), it's not getting put into the form.
Wed 1/15/14 8am
    Figured out that my for is not valid.  Now trying to figure out how to show Django form errors manually, and then eventually using Django generic class-based views.
Tue 1/14/14 5pm
    Got view to show question working, and next_question() code working.
    Now getting an exception after clicking "submit".
Tue 1/14/14 9am
    Added code for next_question().  
    Added code to pass question_id as hidden field.  Now test it.
Mon 1/13/14 8am
    Looking at django-quiz to see how he did it.
    Still have to decide how to pass fields.  I want to go with hidden fields.
    Got django-quiz up and running.  Needed to do a "django-admin.py startproject", and add the apps.  I didn't actually get the templates working.
    Options:
        pass hidden fields
        pass query parameters (http://quizme.com?parm=value
Fri 1/9/14 8pm
    Got the hidden field working!  Now add it to quizme.
    Want to redirect to the next question by passing the hidden value of the current question.
    Could also pass it in the URL as the ID of the question.
Fri 1/9/14 8am
    working on getting hidden field working; found form.fields['myfield']['initial'] but it is not right
Thu 1/9/14 6pm
    Working on learn_form_hidden_field.  Got the hidden field, now need to see if it's passing a value.
    It's passing the initial value and saving that.  Now I have to see if I can set it to something else.
    How do I set the value for a field?
    Set a trace and see what the values are.
Thu 1/9/14 9am
    o Learned how to use a hidden field.  Now need to figure out how to set the value for the hidden field in the view instead of just using the initial value.
      Created learn_form_hidden_field.
Wed 1/8/14 6pm
    o Got admin working.
    o Next: redirect to the next question; started working on; need hidden field
Wed 1/8/14 10am
    o Got it saving an attempt.  Now need to work on a redirect to the next question.  Also need to add Attempt to the admin.  Left off making changes to the admin.
Tue 1/7/14 6pm
    o Got the form displaying correctly for the GET.
      ERROR when submitting: 'FormAttempt' object has no attribute 'cleaned_data'

Tue 1/7/14 9am
    o Working on the view and template.  Decided to use form for the answer, and just put the question in directly.  Still modifying the view code and the template.
Mon 1/6/14 6pm:
  o I'm trying to figure out how to do a read-only field; what I want:
        o display the question
        o have a box for the answer:
        o when submitting, only allow the answer
    Maybe what I should do is create a form just for the answer, and in the template put the questionas well.
  
Mon 1/6/14 8am:
  o work on implementing the view; was going to use a form, not sure if I use Django Forms (because I have readonly field of question) or not.

Fri 1/3/14:
  
  o got it working; added a question and answer via the admin
  o added 'questions' to INSTALLED_APPS
  o enabled the admin
  o added requirements.txt file
  o installed South
  o got Django 1.6.1 installed
Mon 10/14/13:
  o LEFT OFF: working on learn_GenericForeignKey.polymorphic.contentType; can't figure out how to chain querysets together
  o worked on the models; now figuring out how to use GenericForeignKey for the tag
  o played with django_versioning again to see how it works; decided to continue working on the models
Thu 10/3/13
  o NEXT STEP: create a basic question and answer models, and add the Django REST Framework API
  o completed the Django REST Framework Quickstart, and skimmed the tutorial
  o working on learn_django_rest_framework project
Tue 10/1/13
  o create learn_django_rest_framework project
Mon 9/30/13
  o If I use a REST API and AJAX, what should my first feature be?
    Being able to add questions.  Tag questions.  Modify questions.
  o installed django REST Framework: pip install djangorestframework
  o What should I do next?  I would like to create a REST API and use a JavaScript front-end.  Maybe I will use django-rest-framework.

Thu 9/19/13
  o got it running; can see revisions in Django Admin; 
  o need to run syncdb before versioning_setup
  o installed django-debug-toolbar
Wed 9/18/13
  o ran "manage.py version_setup..." command and got:
    ImportError: No module named debug_toolbar
  o finished modifying code
Tue 9/17/13
  o started playing with django-versioning in learn_django-versioning_package
        LEFT OFF: adding code to models.py
  o researching model instance versioning approaches (capturing every time an instance is modified)
Mon 9/16/13
  o added models
================================================================================
!TODO / Backlog
================================================================================
o Tags (be able to tag questions, and then select tags from which to select questions)
    - select a single tag to use for a quiz
    - select multiple tags to use for a quiz
    - consider allowing a hierarchy of tags, e.g.,
        Programming
            Languages
                Python
                Perl
                C
            Methodologies
                Agile
      Maybe allowing multiple parent/child relationships.
o Frequency (user selects when they want to see again (hr, day, 2 days, week, month, 2 mos)
o NewUser registration
    - page to create account
    - email address verification/registration
o tests
o Footer: 
    - show tags
    - show how many times seen
    - show how many times answered
    - show last time seen
    - show total number of questions
o Review mode: just show questions and answers
o email questions
o deploy to heroku

o Rich Text for questions and answers
o graph database
o Questions (add questions from the web page)
o Questions (modify questions from the web page while asking the question)
o unique url's (e.g., either based on question words, or based on an id)
o "Ignore" tag -- never see the question again
o private questions/answers
o add Google Analytics

Front-end:
o tag questions
o add questions/answers
o modify questions/answers on-the-fly
o versions of questions/answers

DONE o User login
DONE - add tags via Django Admin

o Ask a question, and then show the answer.
    quiz view:
        form:
            if GET:
                ask the first question
            elif POST:
                tell server which question was just asked
  Format:
    1) Show user a question
    2) give user an input box to put their answer
    3) Submit (user submits their answer)
    4) save the user's answer, and show the correct answer, along with a Next button
    5) Next (user clicks Next to go to the next question)
    6) go to (1)

================================================================================
!Tags:
================================================================================
How to design tags?
Click on each tag to toggle enable/disable it?
Lump tags into 2 groups: those that are enabled and those that are disabled?

================================================================================
!django-quiz
================================================================================
o Name of quiz is passed in the url
o views:
    - question, answer, quiz, previous are all loaded in the context
o models:
    Category
    Quiz
    Progress
    Sitting
        - user
        - question_list (TextField; csv of questions)
        - incorrect_question (TextField; csv of incorrect questions)
    Question
    Answer
    

================================================================================
User Stories / Features
================================================================================
o users can create accounts for themselves
o add questions via admin
o users can create quizzes (list of questions)
o Edit History (see history of edits of questions, etc.)
o web page is AJAX 
o users can edit other peoples questions/answers
o users can edit quizzes (add questions)
o users can edit quizzes (remove questions)
o users can add tags to questions
o users can add tags to questions during quiz
o can edit question while taking the quiz
o bulk upload
o edit a question while it's being asked
o edit an answer while it's being shown
o send emails with questions
o answer question in email
o view facts (no Q&A)
o algorithm based on Steven Jonas SuperMemo (Piotr Wozniak)
o spelling (sound clips)
o recognize photos
o time how long it takes to answer
o give Atlatl interview candidates quizzes
o ask in reverse (show answers, guess questions)
o study mode: show questions and answers together
o movie clips / YouTube videos

================================================================================
Django Apps
================================================================================
Word meaning "piece of information":
chunk / game / info / piece of info / library / article / meme / agents / chapter / quiz / 
tidbit / interesting thing / atom / main / unit / info unit / knowledge / 
feature
segment
part
entity
noun
thing
bit
thing that stands alone
article
InfoEntity
component
portion
piece
fragment
building block
monad
constituent

entities
================================================================================
MVP:
================================================================================
    Questions:
        - text
    Answers:
        - text
    Attempts:
        - answer
        - date
        - user
        - 

================================================================================
Entities
================================================================================
answers
hints
questions
quizzes (collection of questions)
tags
users
================================================================================
Screens:
================================================================================
  New user (use the admin initially)
  Add a question/answer (use the admin initially)
  Edit a question/answer (use the admin initially)
  Quiz - ask questions, record answers

================================================================================
Ultimate:
================================================================================

Question Types:
        - multiple choice
        - true/false
        - fill in the blank
        - essay
        - audio clip
        - video clip
        - image
        - click on photo (e.g., US map, states)
Hints:

Modes:

================================================================================
Use Cases:
================================================================================
o want to quiz myself for a specify tag

================================================================================
!HOW TO use django-versioning
================================================================================
cddjango
cd learn_django-versioning_package
vim README

''',},
